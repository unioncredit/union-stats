{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { isAddress } from \"@ethersproject/address\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport U_TOKEN_ABI from \"constants/abis/uToken.json\";\nimport { BLOCKS_PER_YEAR, BLOCK_SPEED } from \"constants/variables\";\nimport useSWR from \"swr\";\nimport { formatDueDate } from \"util/formatDueDate\";\nimport useCurrentToken from \"../useCurrentToken\";\nimport useMarketRegistryContract from \"../contracts/useMarketRegistryContract\";\nimport { roundUp } from \"util/numbers\";\n\nvar getPaymentDue = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(account, chainId, contract, library) {\n    var isOverdue, lastRepayRes, lastRepay, overdueBlocksRes, overdueBlocks, curBlock, block, resp, blockNumber, seconds;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return contract.checkIsOverdue(account);\n\n          case 2:\n            isOverdue = _context.sent;\n\n            if (!isOverdue) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\", \"Overdue\");\n\n          case 5:\n            _context.next = 7;\n            return contract.getLastRepay(account);\n\n          case 7:\n            lastRepayRes = _context.sent;\n            lastRepay = parseInt(lastRepayRes.toString());\n            _context.next = 11;\n            return contract.overdueBlocks();\n\n          case 11:\n            overdueBlocksRes = _context.sent;\n            overdueBlocks = parseInt(overdueBlocksRes.toString());\n            _context.next = 15;\n            return library.getBlockNumber();\n\n          case 15:\n            curBlock = _context.sent;\n            _context.next = 18;\n            return library.getBlock(curBlock);\n\n          case 18:\n            block = _context.sent;\n            _context.next = 21;\n            return library.provider.send(\"eth_getTransactionReceipt\", [block.transactions[0]]);\n\n          case 21:\n            resp = _context.sent;\n            // Supports ARBITRUM which returns L1 blockNumber as `l1BlockNumber`\n            blockNumber = resp.result.l1BlockNumber || resp.result.blockNumber;\n\n            if (!(lastRepay === 0)) {\n              _context.next = 25;\n              break;\n            }\n\n            return _context.abrupt(\"return\", \"No Payment Due\");\n\n          case 25:\n            seconds = (lastRepay + overdueBlocks - blockNumber) * BLOCK_SPEED[chainId];\n            return _context.abrupt(\"return\", formatDueDate(seconds));\n\n          case 27:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getPaymentDue(_x, _x2, _x3, _x4) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar getCreditLimit = function getCreditLimit(contract) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_, account, tokenAddress, chainId, library) {\n      var res, uTokenAddress, uTokenContract, apr, borrowed, fee, interest, overdueBlocks, isOverdue, paymentDueDate, paymentPeriod;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return contract.tokens(tokenAddress);\n\n            case 2:\n              res = _context2.sent;\n              uTokenAddress = res.uToken;\n              uTokenContract = new Contract(uTokenAddress, U_TOKEN_ABI, library.getSigner());\n              _context2.next = 7;\n              return uTokenContract.borrowRatePerBlock();\n\n            case 7:\n              apr = _context2.sent;\n              _context2.next = 10;\n              return uTokenContract.getBorrowed(account);\n\n            case 10:\n              borrowed = _context2.sent;\n              _context2.next = 13;\n              return uTokenContract.originationFee();\n\n            case 13:\n              fee = _context2.sent;\n              _context2.next = 16;\n              return uTokenContract.calculatingInterest(account);\n\n            case 16:\n              interest = _context2.sent;\n              _context2.next = 19;\n              return uTokenContract.overdueBlocks();\n\n            case 19:\n              overdueBlocks = _context2.sent;\n              _context2.next = 22;\n              return uTokenContract.checkIsOverdue(account);\n\n            case 22:\n              isOverdue = _context2.sent;\n              _context2.next = 25;\n              return getPaymentDue(account, chainId, uTokenContract, library);\n\n            case 25:\n              paymentDueDate = _context2.sent;\n              paymentPeriod = formatDueDate(overdueBlocks.mul(BLOCK_SPEED[chainId]).toNumber());\n              return _context2.abrupt(\"return\", {\n                apr: Number(formatUnits(apr, 18)) * BLOCKS_PER_YEAR[chainId],\n                borrowedRounded: roundUp(Number(formatUnits(borrowed, 18)) + Number(formatUnits(interest, 18))),\n                borrowedRaw: Number(formatUnits(borrowed, 18)) + Number(formatUnits(interest, 18)),\n                fee: Number(formatUnits(fee, 18)),\n                interest: Number(formatUnits(interest, 18)),\n                paymentDueDate: paymentDueDate,\n                paymentPeriod: paymentPeriod,\n                isOverdue: isOverdue\n              });\n\n            case 28:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x5, _x6, _x7, _x8, _x9) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\n\nexport default function useBorrowData(address) {\n  _s();\n\n  var _useWeb3React = useWeb3React(),\n      connectedAccount = _useWeb3React.account,\n      library = _useWeb3React.library,\n      chainId = _useWeb3React.chainId;\n\n  var curToken = useCurrentToken();\n  var account = address || connectedAccount;\n  var marketRegistryContract = useMarketRegistryContract();\n  var shouldFetch = !!marketRegistryContract && typeof account === \"string\" && typeof chainId === \"number\" && isAddress(curToken) && !!library;\n  return useSWR(shouldFetch ? [\"CreditLimit\", account, curToken, chainId, library] : null, getCreditLimit(marketRegistryContract));\n}\n\n_s(useBorrowData, \"8kjS24xWqy0INxwg5bd8I8IZEoo=\", false, function () {\n  return [useWeb3React, useCurrentToken, useMarketRegistryContract, useSWR];\n});","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/data/useBorrowData.js"],"names":["isAddress","Contract","formatUnits","useWeb3React","U_TOKEN_ABI","BLOCKS_PER_YEAR","BLOCK_SPEED","useSWR","formatDueDate","useCurrentToken","useMarketRegistryContract","roundUp","getPaymentDue","account","chainId","contract","library","checkIsOverdue","isOverdue","getLastRepay","lastRepayRes","lastRepay","parseInt","toString","overdueBlocks","overdueBlocksRes","getBlockNumber","curBlock","getBlock","block","provider","send","transactions","resp","blockNumber","result","l1BlockNumber","seconds","getCreditLimit","_","tokenAddress","tokens","res","uTokenAddress","uToken","uTokenContract","getSigner","borrowRatePerBlock","apr","getBorrowed","borrowed","originationFee","fee","calculatingInterest","interest","paymentDueDate","paymentPeriod","mul","toNumber","Number","borrowedRounded","borrowedRaw","useBorrowData","address","connectedAccount","curToken","marketRegistryContract","shouldFetch"],"mappings":"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","sourcesContent":["import { isAddress } from \"@ethersproject/address\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport U_TOKEN_ABI from \"constants/abis/uToken.json\";\nimport { BLOCKS_PER_YEAR, BLOCK_SPEED } from \"constants/variables\";\nimport useSWR from \"swr\";\nimport { formatDueDate } from \"util/formatDueDate\";\nimport useCurrentToken from \"../useCurrentToken\";\nimport useMarketRegistryContract from \"../contracts/useMarketRegistryContract\";\nimport { roundUp } from \"util/numbers\";\n\nconst getPaymentDue = async (account, chainId, contract, library) => {\n  const isOverdue = await contract.checkIsOverdue(account);\n\n  if (isOverdue) {\n    return \"Overdue\";\n  }\n\n  const lastRepayRes = await contract.getLastRepay(account);\n  const lastRepay = parseInt(lastRepayRes.toString());\n\n  const overdueBlocksRes = await contract.overdueBlocks();\n  const overdueBlocks = parseInt(overdueBlocksRes.toString());\n\n  const curBlock = await library.getBlockNumber();\n  const block = await library.getBlock(curBlock);\n  const resp = await library.provider.send(\"eth_getTransactionReceipt\", [\n    block.transactions[0],\n  ]);\n\n  // Supports ARBITRUM which returns L1 blockNumber as `l1BlockNumber`\n  const blockNumber = resp.result.l1BlockNumber || resp.result.blockNumber;\n\n  if (lastRepay === 0) {\n    return \"No Payment Due\";\n  }\n\n  const seconds =\n    (lastRepay + overdueBlocks - blockNumber) * BLOCK_SPEED[chainId];\n\n  return formatDueDate(seconds);\n};\n\nconst getCreditLimit =\n  (contract) => async (_, account, tokenAddress, chainId, library) => {\n    const res = await contract.tokens(tokenAddress);\n    const uTokenAddress = res.uToken;\n\n    const uTokenContract = new Contract(\n      uTokenAddress,\n      U_TOKEN_ABI,\n      library.getSigner()\n    );\n\n    const apr = await uTokenContract.borrowRatePerBlock();\n\n    const borrowed = await uTokenContract.getBorrowed(account);\n\n    const fee = await uTokenContract.originationFee();\n\n    const interest = await uTokenContract.calculatingInterest(account);\n\n    const overdueBlocks = await uTokenContract.overdueBlocks();\n\n    const isOverdue = await uTokenContract.checkIsOverdue(account);\n\n    const paymentDueDate = await getPaymentDue(\n      account,\n      chainId,\n      uTokenContract,\n      library\n    );\n\n    const paymentPeriod = formatDueDate(\n      overdueBlocks.mul(BLOCK_SPEED[chainId]).toNumber()\n    );\n\n    return {\n      apr: Number(formatUnits(apr, 18)) * BLOCKS_PER_YEAR[chainId],\n      borrowedRounded: roundUp(\n        Number(formatUnits(borrowed, 18)) + Number(formatUnits(interest, 18))\n      ),\n      borrowedRaw:\n        Number(formatUnits(borrowed, 18)) + Number(formatUnits(interest, 18)),\n      fee: Number(formatUnits(fee, 18)),\n      interest: Number(formatUnits(interest, 18)),\n      paymentDueDate,\n      paymentPeriod,\n      isOverdue,\n    };\n  };\n\nexport default function useBorrowData(address) {\n  const { account: connectedAccount, library, chainId } = useWeb3React();\n  const curToken = useCurrentToken();\n\n  const account = address || connectedAccount;\n\n  const marketRegistryContract = useMarketRegistryContract();\n\n  const shouldFetch =\n    !!marketRegistryContract &&\n    typeof account === \"string\" &&\n    typeof chainId === \"number\" &&\n    isAddress(curToken) &&\n    !!library;\n\n  return useSWR(\n    shouldFetch ? [\"CreditLimit\", account, curToken, chainId, library] : null,\n    getCreditLimit(marketRegistryContract)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}