{"ast":null,"code":"import { isAddress } from \"@ethersproject/address\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport ABI from \"constants/abis/erc20Detailed.json\";\nimport useSWR from \"swr\";\nimport useContract from \"../useContract\";\nimport { AddressZero } from \"constants/variables\";\nimport useReadProvider from \"hooks/useReadProvider\";\n\nconst getTokenBalanceOfAccount = contract => async (_, __, account) => {\n  const decimals = await contract.decimals();\n  const balanceOf = await contract.balanceOf(account);\n  const balance = formatUnits(balanceOf, decimals);\n  return parseFloat(balance);\n};\n\nexport default function useTokenBalanceOfAccount(tokenAddress, account) {\n  const readProvider = useReadProvider();\n  const contract = useContract(tokenAddress, ABI, readProvider);\n  const shouldFetch = !!contract && isAddress(tokenAddress) && isAddress(account) && account !== AddressZero;\n  return useSWR(shouldFetch ? [\"TokenBalance\", tokenAddress, account] : null, getTokenBalanceOfAccount(contract));\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/data/useTokenBalanceOfAccount.ts"],"names":["isAddress","formatUnits","ABI","useSWR","useContract","AddressZero","useReadProvider","getTokenBalanceOfAccount","contract","_","__","account","decimals","balanceOf","balance","parseFloat","useTokenBalanceOfAccount","tokenAddress","readProvider","shouldFetch"],"mappings":"AAAA,SAASA,SAAT,QAA0B,wBAA1B;AAEA,SAASC,WAAT,QAA4B,sBAA5B;AACA,OAAOC,GAAP,MAAgB,mCAAhB;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,OAAOC,eAAP,MAA4B,uBAA5B;;AAEA,MAAMC,wBAAwB,GAC3BC,QAAD,IAAwB,OAAOC,CAAP,EAAeC,EAAf,EAAwBC,OAAxB,KAA4C;AAClE,QAAMC,QAAQ,GAAG,MAAMJ,QAAQ,CAACI,QAAT,EAAvB;AAEA,QAAMC,SAAS,GAAG,MAAML,QAAQ,CAACK,SAAT,CAAmBF,OAAnB,CAAxB;AAEA,QAAMG,OAAO,GAAGb,WAAW,CAACY,SAAD,EAAYD,QAAZ,CAA3B;AAEA,SAAOG,UAAU,CAACD,OAAD,CAAjB;AACD,CATH;;AAWA,eAAe,SAASE,wBAAT,CACbC,YADa,EAEbN,OAFa,EAGb;AACA,QAAMO,YAAY,GAAGZ,eAAe,EAApC;AACA,QAAME,QAAQ,GAAGJ,WAAW,CAACa,YAAD,EAAef,GAAf,EAAoBgB,YAApB,CAA5B;AAEA,QAAMC,WAAW,GACf,CAAC,CAACX,QAAF,IACAR,SAAS,CAACiB,YAAD,CADT,IAEAjB,SAAS,CAACW,OAAD,CAFT,IAGAA,OAAO,KAAKN,WAJd;AAMA,SAAOF,MAAM,CACXgB,WAAW,GAAG,CAAC,cAAD,EAAiBF,YAAjB,EAA+BN,OAA/B,CAAH,GAA6C,IAD7C,EAEXJ,wBAAwB,CAACC,QAAD,CAFb,CAAb;AAID","sourcesContent":["import { isAddress } from \"@ethersproject/address\";\nimport type { Contract } from \"@ethersproject/contracts\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport ABI from \"constants/abis/erc20Detailed.json\";\nimport useSWR from \"swr\";\nimport useContract from \"../useContract\";\nimport { AddressZero } from \"constants/variables\";\nimport useReadProvider from \"hooks/useReadProvider\";\n\nconst getTokenBalanceOfAccount =\n  (contract: Contract) => async (_: any, __: any, account: string) => {\n    const decimals = await contract.decimals();\n\n    const balanceOf = await contract.balanceOf(account);\n\n    const balance = formatUnits(balanceOf, decimals);\n\n    return parseFloat(balance);\n  };\n\nexport default function useTokenBalanceOfAccount(\n  tokenAddress: string,\n  account: string\n) {\n  const readProvider = useReadProvider();\n  const contract = useContract(tokenAddress, ABI, readProvider);\n\n  const shouldFetch =\n    !!contract &&\n    isAddress(tokenAddress) &&\n    isAddress(account) &&\n    account !== AddressZero;\n\n  return useSWR(\n    shouldFetch ? [\"TokenBalance\", tokenAddress, account] : null,\n    getTokenBalanceOfAccount(contract)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}