{"ast":null,"code":"import parseMs from \"parse-ms\";\nimport dayjs from \"dayjs\";\n/**\n * @name formatDueDate\n * @param {Number} secondsUntilDue\n */\n\nexport var formatDueDate = function formatDueDate(secondsUntilDue) {\n  /**\n   * Convert seconds to Milliseconds\n   */\n  var ms = secondsUntilDue * 1000;\n\n  var _parseMs = parseMs(ms),\n      days = _parseMs.days,\n      hours = _parseMs.hours,\n      minutes = _parseMs.minutes;\n\n  if (days < 1 && hours <= 12) {\n    return \"in \".concat(hours, \"h \").concat(minutes, \"m\");\n  }\n\n  if (days <= 1) {\n    return \"in \".concat(hours, \" hours\");\n  }\n\n  if (days <= 7 && hours >= 22) {\n    return \"in \".concat(days + 1, \" days\");\n  }\n\n  if (days <= 7) {\n    return \"in \".concat(days, \"d \").concat(hours, \"h\");\n  }\n\n  if (days > 7 && days <= 14) {\n    return \"in \".concat(days, \" days\");\n  }\n\n  if (days > 14) {\n    return dayjs().add(ms, \"millisecond\").format(\"[on] MMM D\");\n  }\n};","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/util/formatDueDate.js"],"names":["parseMs","dayjs","formatDueDate","secondsUntilDue","ms","days","hours","minutes","add","format"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,UAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,eAAD,EAAqB;AAChD;AACF;AACA;AACE,MAAMC,EAAE,GAAGD,eAAe,GAAG,IAA7B;;AAJgD,iBAMfH,OAAO,CAACI,EAAD,CANQ;AAAA,MAMxCC,IANwC,YAMxCA,IANwC;AAAA,MAMlCC,KANkC,YAMlCA,KANkC;AAAA,MAM3BC,OAN2B,YAM3BA,OAN2B;;AAQhD,MAAIF,IAAI,GAAG,CAAP,IAAYC,KAAK,IAAI,EAAzB,EAA6B;AAC3B,wBAAaA,KAAb,eAAuBC,OAAvB;AACD;;AAED,MAAIF,IAAI,IAAI,CAAZ,EAAe;AACb,wBAAaC,KAAb;AACD;;AAED,MAAID,IAAI,IAAI,CAAR,IAAaC,KAAK,IAAI,EAA1B,EAA8B;AAC5B,wBAAaD,IAAI,GAAG,CAApB;AACD;;AAED,MAAIA,IAAI,IAAI,CAAZ,EAAe;AACb,wBAAaA,IAAb,eAAsBC,KAAtB;AACD;;AAED,MAAID,IAAI,GAAG,CAAP,IAAYA,IAAI,IAAI,EAAxB,EAA4B;AAC1B,wBAAaA,IAAb;AACD;;AAED,MAAIA,IAAI,GAAG,EAAX,EAAe;AACb,WAAOJ,KAAK,GAAGO,GAAR,CAAYJ,EAAZ,EAAgB,aAAhB,EAA+BK,MAA/B,CAAsC,YAAtC,CAAP;AACD;AACF,CA/BM","sourcesContent":["import parseMs from \"parse-ms\";\nimport dayjs from \"dayjs\";\n\n/**\n * @name formatDueDate\n * @param {Number} secondsUntilDue\n */\nexport const formatDueDate = (secondsUntilDue) => {\n  /**\n   * Convert seconds to Milliseconds\n   */\n  const ms = secondsUntilDue * 1000;\n\n  const { days, hours, minutes } = parseMs(ms);\n\n  if (days < 1 && hours <= 12) {\n    return `in ${hours}h ${minutes}m`;\n  }\n\n  if (days <= 1) {\n    return `in ${hours} hours`;\n  }\n\n  if (days <= 7 && hours >= 22) {\n    return `in ${days + 1} days`;\n  }\n\n  if (days <= 7) {\n    return `in ${days}d ${hours}h`;\n  }\n\n  if (days > 7 && days <= 14) {\n    return `in ${days} days`;\n  }\n\n  if (days > 14) {\n    return dayjs().add(ms, \"millisecond\").format(\"[on] MMM D\");\n  }\n};\n"]},"metadata":{},"sourceType":"module"}