{"ast":null,"code":"import { Contract } from \"@ethersproject/contracts\";\nimport { parseUnits } from \"@ethersproject/units\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport U_TOKENT_ABI from \"constants/abis/uToken.json\";\nimport useMarketRegistryContract from \"hooks/contracts/useMarketRegistryContract\";\nimport useCurrentToken from \"hooks/useCurrentToken\";\nimport { useCallback } from \"react\";\nexport default function useBorrow() {\n  const {\n    library\n  } = useWeb3React();\n  const tokenAddress = useCurrentToken();\n  const marketRegistryContract = useMarketRegistryContract();\n  return useCallback(async amount => {\n    const res = await marketRegistryContract.tokens(tokenAddress);\n    const uTokenAddress = res.uToken;\n    const uTokenContract = new Contract(uTokenAddress, U_TOKENT_ABI, library.getSigner());\n    const borrowAmount = parseUnits(String(amount), 18);\n    let gasLimit;\n\n    try {\n      const estimateGas = await uTokenContract.estimateGas.borrow(borrowAmount.toString());\n      gasLimit = (parseFloat(estimateGas.toString()) * 1.1).toFixed(0);\n    } catch (err) {\n      gasLimit = 1000000;\n    }\n\n    return uTokenContract.borrow(borrowAmount.toString(), {\n      gasLimit\n    });\n  }, [tokenAddress, marketRegistryContract]);\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/payables/useBorrow.ts"],"names":["Contract","parseUnits","useWeb3React","U_TOKENT_ABI","useMarketRegistryContract","useCurrentToken","useCallback","useBorrow","library","tokenAddress","marketRegistryContract","amount","res","tokens","uTokenAddress","uToken","uTokenContract","getSigner","borrowAmount","String","gasLimit","estimateGas","borrow","toString","parseFloat","toFixed","err"],"mappings":"AAAA,SAASA,QAAT,QAAyB,0BAAzB;AAEA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,yBAAP,MAAsC,2CAAtC;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,SAASC,WAAT,QAA4B,OAA5B;AAEA,eAAe,SAASC,SAAT,GAAqB;AAClC,QAAM;AAAEC,IAAAA;AAAF,MAAcN,YAAY,EAAhC;AACA,QAAMO,YAAY,GAAGJ,eAAe,EAApC;AACA,QAAMK,sBAAsB,GAAGN,yBAAyB,EAAxD;AAEA,SAAOE,WAAW,CAChB,MAAOK,MAAP,IAAiE;AAC/D,UAAMC,GAAG,GAAG,MAAMF,sBAAsB,CAACG,MAAvB,CAA8BJ,YAA9B,CAAlB;AACA,UAAMK,aAAa,GAAGF,GAAG,CAACG,MAA1B;AAEA,UAAMC,cAAc,GAAG,IAAIhB,QAAJ,CACrBc,aADqB,EAErBX,YAFqB,EAGrBK,OAAO,CAACS,SAAR,EAHqB,CAAvB;AAMA,UAAMC,YAAY,GAAGjB,UAAU,CAACkB,MAAM,CAACR,MAAD,CAAP,EAAiB,EAAjB,CAA/B;AAEA,QAAIS,QAAJ;;AACA,QAAI;AACF,YAAMC,WAAW,GAAG,MAAML,cAAc,CAACK,WAAf,CAA2BC,MAA3B,CACxBJ,YAAY,CAACK,QAAb,EADwB,CAA1B;AAGAH,MAAAA,QAAQ,GAAG,CAACI,UAAU,CAACH,WAAW,CAACE,QAAZ,EAAD,CAAV,GAAqC,GAAtC,EAA2CE,OAA3C,CAAmD,CAAnD,CAAX;AACD,KALD,CAKE,OAAOC,GAAP,EAAY;AACZN,MAAAA,QAAQ,GAAG,OAAX;AACD;;AAED,WAAOJ,cAAc,CAACM,MAAf,CAAsBJ,YAAY,CAACK,QAAb,EAAtB,EAA+C;AACpDH,MAAAA;AADoD,KAA/C,CAAP;AAGD,GA1Be,EA2BhB,CAACX,YAAD,EAAeC,sBAAf,CA3BgB,CAAlB;AA6BD","sourcesContent":["import { Contract } from \"@ethersproject/contracts\";\nimport type { TransactionResponse } from \"@ethersproject/providers\";\nimport { parseUnits } from \"@ethersproject/units\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport U_TOKENT_ABI from \"constants/abis/uToken.json\";\nimport useMarketRegistryContract from \"hooks/contracts/useMarketRegistryContract\";\nimport useCurrentToken from \"hooks/useCurrentToken\";\nimport { useCallback } from \"react\";\n\nexport default function useBorrow() {\n  const { library } = useWeb3React();\n  const tokenAddress = useCurrentToken();\n  const marketRegistryContract = useMarketRegistryContract();\n\n  return useCallback(\n    async (amount: number | string): Promise<TransactionResponse> => {\n      const res = await marketRegistryContract.tokens(tokenAddress);\n      const uTokenAddress = res.uToken;\n\n      const uTokenContract = new Contract(\n        uTokenAddress,\n        U_TOKENT_ABI,\n        library.getSigner()\n      );\n\n      const borrowAmount = parseUnits(String(amount), 18);\n\n      let gasLimit: any;\n      try {\n        const estimateGas = await uTokenContract.estimateGas.borrow(\n          borrowAmount.toString()\n        );\n        gasLimit = (parseFloat(estimateGas.toString()) * 1.1).toFixed(0);\n      } catch (err) {\n        gasLimit = 1000000;\n      }\n\n      return uTokenContract.borrow(borrowAmount.toString(), {\n        gasLimit,\n      });\n    },\n    [tokenAddress, marketRegistryContract]\n  );\n}\n"]},"metadata":{},"sourceType":"module"}