{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { parseUnits } from \"@ethersproject/units\";\nimport useCurrentToken from \"hooks/useCurrentToken\";\nimport { useCallback } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport USER_MANAGER_ABI from \"constants/abis/userManager.json\";\nimport useMarketRegistryContract from \"../contracts/useMarketRegistryContract\";\nexport default function useStakeWithdraw() {\n  _s();\n\n  var tokenAddress = useCurrentToken();\n\n  var _useWeb3React = useWeb3React(),\n      library = _useWeb3React.library;\n\n  var marketRegistryContract = useMarketRegistryContract();\n  return useCallback( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(amount) {\n      var stakeAmount, signer, res, userManagerAddress, userManagerContract, gasLimit, estimateGas;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              stakeAmount = parseUnits(String(amount), 18);\n              signer = library.getSigner();\n              _context.next = 4;\n              return marketRegistryContract.tokens(tokenAddress);\n\n            case 4:\n              res = _context.sent;\n              userManagerAddress = res.userManager;\n              userManagerContract = new Contract(userManagerAddress, USER_MANAGER_ABI, signer);\n              _context.prev = 7;\n              _context.next = 10;\n              return userManagerContract.estimateGas.unstake(stakeAmount.toString());\n\n            case 10:\n              estimateGas = _context.sent;\n              gasLimit = (parseFloat(estimateGas.toString()) * 1.1).toFixed(0);\n              _context.next = 17;\n              break;\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](7);\n              gasLimit = 800000;\n\n            case 17:\n              return _context.abrupt(\"return\", userManagerContract.unstake(stakeAmount.toString(), {\n                gasLimit: gasLimit\n              }));\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[7, 14]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [library, marketRegistryContract, tokenAddress]);\n}\n\n_s(useStakeWithdraw, \"jaPtHHkf1LDy6CMVOQBGfFLMaZ4=\", false, function () {\n  return [useCurrentToken, useWeb3React, useMarketRegistryContract];\n});","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/payables/useStakeWithdraw.ts"],"names":["parseUnits","useCurrentToken","useCallback","useWeb3React","Contract","USER_MANAGER_ABI","useMarketRegistryContract","useStakeWithdraw","tokenAddress","library","marketRegistryContract","amount","stakeAmount","String","signer","getSigner","tokens","res","userManagerAddress","userManager","userManagerContract","estimateGas","unstake","toString","gasLimit","parseFloat","toFixed"],"mappings":";;;;;AACA,SAASA,UAAT,QAA2B,sBAA3B;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,OAAOC,yBAAP,MAAsC,wCAAtC;AAEA,eAAe,SAASC,gBAAT,GAA4B;AAAA;;AACzC,MAAMC,YAAY,GAAGP,eAAe,EAApC;;AADyC,sBAErBE,YAAY,EAFS;AAAA,MAEjCM,OAFiC,iBAEjCA,OAFiC;;AAGzC,MAAMC,sBAAsB,GAAGJ,yBAAyB,EAAxD;AAEA,SAAOJ,WAAW;AAAA,wEAChB,iBAAOS,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,cAAAA,WADR,GACsBZ,UAAU,CAACa,MAAM,CAACF,MAAD,CAAP,EAAiB,EAAjB,CADhC;AAGQG,cAAAA,MAHR,GAGiBL,OAAO,CAACM,SAAR,EAHjB;AAAA;AAAA,qBAIoBL,sBAAsB,CAACM,MAAvB,CAA8BR,YAA9B,CAJpB;;AAAA;AAIQS,cAAAA,GAJR;AAKQC,cAAAA,kBALR,GAK6BD,GAAG,CAACE,WALjC;AAMQC,cAAAA,mBANR,GAM8B,IAAIhB,QAAJ,CAC1Bc,kBAD0B,EAE1Bb,gBAF0B,EAG1BS,MAH0B,CAN9B;AAAA;AAAA;AAAA,qBAc8BM,mBAAmB,CAACC,WAApB,CAAgCC,OAAhC,CACxBV,WAAW,CAACW,QAAZ,EADwB,CAd9B;;AAAA;AAcUF,cAAAA,WAdV;AAiBIG,cAAAA,QAAQ,GAAG,CAACC,UAAU,CAACJ,WAAW,CAACE,QAAZ,EAAD,CAAV,GAAqC,GAAtC,EAA2CG,OAA3C,CAAmD,CAAnD,CAAX;AAjBJ;AAAA;;AAAA;AAAA;AAAA;AAmBIF,cAAAA,QAAQ,GAAG,MAAX;;AAnBJ;AAAA,+CAsBSJ,mBAAmB,CAACE,OAApB,CAA4BV,WAAW,CAACW,QAAZ,EAA5B,EAAoD;AACzDC,gBAAAA,QAAQ,EAARA;AADyD,eAApD,CAtBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADgB;;AAAA;AAAA;AAAA;AAAA,OA2BhB,CAACf,OAAD,EAAUC,sBAAV,EAAkCF,YAAlC,CA3BgB,CAAlB;AA6BD;;GAlCuBD,gB;UACDN,e,EACDE,Y,EACWG,yB","sourcesContent":["import type { TransactionResponse } from \"@ethersproject/providers\";\nimport { parseUnits } from \"@ethersproject/units\";\nimport useCurrentToken from \"hooks/useCurrentToken\";\nimport { useCallback } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport USER_MANAGER_ABI from \"constants/abis/userManager.json\";\nimport useMarketRegistryContract from \"../contracts/useMarketRegistryContract\";\n\nexport default function useStakeWithdraw() {\n  const tokenAddress = useCurrentToken();\n  const { library } = useWeb3React();\n  const marketRegistryContract = useMarketRegistryContract();\n\n  return useCallback(\n    async (amount: number | string): Promise<TransactionResponse> => {\n      const stakeAmount = parseUnits(String(amount), 18);\n\n      const signer = library.getSigner();\n      const res = await marketRegistryContract.tokens(tokenAddress);\n      const userManagerAddress = res.userManager;\n      const userManagerContract = new Contract(\n        userManagerAddress,\n        USER_MANAGER_ABI,\n        signer\n      );\n\n      let gasLimit: any;\n      try {\n        const estimateGas = await userManagerContract.estimateGas.unstake(\n          stakeAmount.toString()\n        );\n        gasLimit = (parseFloat(estimateGas.toString()) * 1.1).toFixed(0);\n      } catch (err) {\n        gasLimit = 800000;\n      }\n\n      return userManagerContract.unstake(stakeAmount.toString(), {\n        gasLimit,\n      });\n    },\n    [library, marketRegistryContract, tokenAddress]\n  );\n}\n"]},"metadata":{},"sourceType":"module"}