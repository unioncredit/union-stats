{"ast":null,"code":"import { useWeb3React } from \"@web3-react/core\";\nimport useSWRImmutable from \"swr/immutable\";\nimport useReadProvider from \"hooks/useReadProvider\";\nimport useUserContract from \"hooks/contracts/useUserContract\";\n\nconst getIsMember = async (_, account, userManager) => {\n  const isMember = await userManager.checkIsMember(account);\n  return isMember;\n};\n\nexport default function useIsMember(address) {\n  const {\n    account: connectedAccount\n  } = useWeb3React();\n  const provider = useReadProvider();\n  const userManager = useUserContract(provider);\n  const account = address || connectedAccount;\n  const shouldFetch = !!userManager && typeof account === \"string\";\n  return useSWRImmutable(shouldFetch ? [\"IsMember\", account, userManager] : null, getIsMember);\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/union/union-stats/union-stats/hooks/data/useIsMember.ts"],"names":["useWeb3React","useSWRImmutable","useReadProvider","useUserContract","getIsMember","_","account","userManager","isMember","checkIsMember","useIsMember","address","connectedAccount","provider","shouldFetch"],"mappings":"AACA,SAASA,YAAT,QAA6B,kBAA7B;AACA,OAAOC,eAAP,MAA4B,eAA5B;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,OAAOC,eAAP,MAA4B,iCAA5B;;AAEA,MAAMC,WAAW,GAAG,OAAOC,CAAP,EAAeC,OAAf,EAAgCC,WAAhC,KAA0D;AAC5E,QAAMC,QAAiB,GAAG,MAAMD,WAAW,CAACE,aAAZ,CAA0BH,OAA1B,CAAhC;AACA,SAAOE,QAAP;AACD,CAHD;;AAKA,eAAe,SAASE,WAAT,CAAqBC,OAArB,EAAsC;AACnD,QAAM;AAAEL,IAAAA,OAAO,EAAEM;AAAX,MAAgCZ,YAAY,EAAlD;AACA,QAAMa,QAAQ,GAAGX,eAAe,EAAhC;AACA,QAAMK,WAAW,GAAGJ,eAAe,CAACU,QAAD,CAAnC;AAEA,QAAMP,OAAO,GAAGK,OAAO,IAAIC,gBAA3B;AAEA,QAAME,WAAW,GAAG,CAAC,CAACP,WAAF,IAAiB,OAAOD,OAAP,KAAmB,QAAxD;AAEA,SAAOL,eAAe,CACpBa,WAAW,GAAG,CAAC,UAAD,EAAaR,OAAb,EAAsBC,WAAtB,CAAH,GAAwC,IAD/B,EAEpBH,WAFoB,CAAtB;AAID","sourcesContent":["import { Contract } from \"@ethersproject/contracts\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport useSWRImmutable from \"swr/immutable\";\nimport useReadProvider from \"hooks/useReadProvider\";\nimport useUserContract from \"hooks/contracts/useUserContract\";\n\nconst getIsMember = async (_: any, account: string, userManager: Contract) => {\n  const isMember: boolean = await userManager.checkIsMember(account);\n  return isMember;\n};\n\nexport default function useIsMember(address: string) {\n  const { account: connectedAccount } = useWeb3React();\n  const provider = useReadProvider();\n  const userManager = useUserContract(provider);\n\n  const account = address || connectedAccount;\n\n  const shouldFetch = !!userManager && typeof account === \"string\";\n\n  return useSWRImmutable(\n    shouldFetch ? [\"IsMember\", account, userManager] : null,\n    getIsMember\n  );\n}\n"]},"metadata":{},"sourceType":"module"}