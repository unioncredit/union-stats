{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mathewstokes/Desktop/union-stats/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mathewstokes/Desktop/union-stats/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { EVENT_START_BLOCK, EVENT_BLOCK_INTERVAL } from \"constants/variables\";\nexport var getLogs = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(provider, chainId, filter, fromBlock) {\n    var currentBlock, logs, from, to, result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return provider.getBlockNumber();\n\n          case 2:\n            currentBlock = _context.sent;\n            logs = [];\n            from = fromBlock || EVENT_START_BLOCK[chainId];\n            to = from + EVENT_BLOCK_INTERVAL[chainId] - 1;\n\n          case 6:\n            if (!(from < currentBlock)) {\n              _context.next = 18;\n              break;\n            }\n\n            filter.fromBlock = from;\n            filter.toBlock = to;\n            _context.next = 11;\n            return provider.getLogs(filter);\n\n          case 11:\n            result = _context.sent;\n            logs = logs.concat(result);\n            from = to + 1;\n            to = from + EVENT_BLOCK_INTERVAL[chainId] - 1;\n            to = to < currentBlock ? to : currentBlock;\n            _context.next = 6;\n            break;\n\n          case 18:\n            return _context.abrupt(\"return\", logs);\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getLogs(_x, _x2, _x3, _x4) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/union-stats/lib/logs.ts"],"names":["EVENT_START_BLOCK","EVENT_BLOCK_INTERVAL","getLogs","provider","chainId","filter","fromBlock","getBlockNumber","currentBlock","logs","from","to","toBlock","result","concat"],"mappings":";;AAAA,SAASA,iBAAT,EAA4BC,oBAA5B,QAAwD,qBAAxD;AAEA,OAAO,IAAMC,OAAO;AAAA,sEAAG,iBACrBC,QADqB,EAErBC,OAFqB,EAGrBC,MAHqB,EAIrBC,SAJqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAMMH,QAAQ,CAACI,cAAT,EANN;;AAAA;AAMfC,YAAAA,YANe;AAOjBC,YAAAA,IAPiB,GAOV,EAPU;AASjBC,YAAAA,IATiB,GASVJ,SAAS,IAAIN,iBAAiB,CAACI,OAAD,CATpB;AAUjBO,YAAAA,EAViB,GAUZD,IAAI,GAAGT,oBAAoB,CAACG,OAAD,CAA3B,GAAuC,CAV3B;;AAAA;AAAA,kBAYdM,IAAI,GAAGF,YAZO;AAAA;AAAA;AAAA;;AAanBH,YAAAA,MAAM,CAACC,SAAP,GAAmBI,IAAnB;AACAL,YAAAA,MAAM,CAACO,OAAP,GAAiBD,EAAjB;AAdmB;AAAA,mBAgBER,QAAQ,CAACD,OAAT,CAAiBG,MAAjB,CAhBF;;AAAA;AAgBbQ,YAAAA,MAhBa;AAiBnBJ,YAAAA,IAAI,GAAGA,IAAI,CAACK,MAAL,CAAYD,MAAZ,CAAP;AAEAH,YAAAA,IAAI,GAAGC,EAAE,GAAG,CAAZ;AACAA,YAAAA,EAAE,GAAGD,IAAI,GAAGT,oBAAoB,CAACG,OAAD,CAA3B,GAAuC,CAA5C;AACAO,YAAAA,EAAE,GAAGA,EAAE,GAAGH,YAAL,GAAoBG,EAApB,GAAyBH,YAA9B;AArBmB;AAAA;;AAAA;AAAA,6CAwBdC,IAxBc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPP,OAAO;AAAA;AAAA;AAAA,GAAb","sourcesContent":["import { EVENT_START_BLOCK, EVENT_BLOCK_INTERVAL } from \"constants/variables\";\n\nexport const getLogs = async (\n  provider: any,\n  chainId: number,\n  filter: any,\n  fromBlock?: number\n) => {\n  const currentBlock = await provider.getBlockNumber();\n  let logs = [];\n\n  let from = fromBlock || EVENT_START_BLOCK[chainId];\n  let to = from + EVENT_BLOCK_INTERVAL[chainId] - 1;\n\n  while (from < currentBlock) {\n    filter.fromBlock = from;\n    filter.toBlock = to;\n\n    const result = await provider.getLogs(filter);\n    logs = logs.concat(result);\n\n    from = to + 1;\n    to = from + EVENT_BLOCK_INTERVAL[chainId] - 1;\n    to = to < currentBlock ? to : currentBlock;\n  }\n\n  return logs;\n};\n"]},"metadata":{},"sourceType":"module"}