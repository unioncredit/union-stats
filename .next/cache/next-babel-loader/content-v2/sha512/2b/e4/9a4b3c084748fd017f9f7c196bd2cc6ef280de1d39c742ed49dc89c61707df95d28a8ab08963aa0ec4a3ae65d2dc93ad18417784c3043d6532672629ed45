{"ast":null,"code":"import useUserContract from \"hooks/contracts/useUserContract\";\nimport useDAIDecimals from \"hooks/useDAIDecimals\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport useSWR from \"swr\";\nimport useReadProvider from \"hooks/useReadProvider\";\n\nconst getTotalFrozenStake = userContract => async (_, decimals) => {\n  const totalFrozen = await userContract.totalFrozen();\n  return formatUnits(totalFrozen, decimals);\n};\n\nexport default function useTotalFrozenStake() {\n  const readProvider = useReadProvider();\n  const userContract = useUserContract(readProvider);\n  const {\n    data: decimals\n  } = useDAIDecimals();\n  const shouldFetch = !!userContract && !!decimals;\n  return useSWR(shouldFetch ? [\"totalFrozenStake\", decimals] : null, getTotalFrozenStake(userContract));\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/union-stats/hooks/stats/userManagerStats/useTotalFrozenStake.ts"],"names":["useUserContract","useDAIDecimals","formatUnits","useSWR","useReadProvider","getTotalFrozenStake","userContract","_","decimals","totalFrozen","useTotalFrozenStake","readProvider","data","shouldFetch"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,iCAA5B;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AACA,SAASC,WAAT,QAA4B,sBAA5B;AAGA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,eAAP,MAA4B,uBAA5B;;AAEA,MAAMC,mBAAmB,GACtBC,YAAD,IAA4B,OAAOC,CAAP,EAAeC,QAAf,KAAuC;AACjE,QAAMC,WAAsB,GAAG,MAAMH,YAAY,CAACG,WAAb,EAArC;AACA,SAAOP,WAAW,CAACO,WAAD,EAAcD,QAAd,CAAlB;AACD,CAJH;;AAMA,eAAe,SAASE,mBAAT,GAA+B;AAC5C,QAAMC,YAAY,GAAGP,eAAe,EAApC;AACA,QAAME,YAAsB,GAAGN,eAAe,CAACW,YAAD,CAA9C;AACA,QAAM;AAAEC,IAAAA,IAAI,EAAEJ;AAAR,MAAqBP,cAAc,EAAzC;AACA,QAAMY,WAAW,GAAG,CAAC,CAACP,YAAF,IAAkB,CAAC,CAACE,QAAxC;AACA,SAAOL,MAAM,CACXU,WAAW,GAAG,CAAC,kBAAD,EAAqBL,QAArB,CAAH,GAAoC,IADpC,EAEXH,mBAAmB,CAACC,YAAD,CAFR,CAAb;AAID","sourcesContent":["import useUserContract from \"hooks/contracts/useUserContract\";\nimport useDAIDecimals from \"hooks/useDAIDecimals\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport useSWR from \"swr\";\nimport useReadProvider from \"hooks/useReadProvider\";\n\nconst getTotalFrozenStake =\n  (userContract: Contract) => async (_: any, decimals: BigNumber) => {\n    const totalFrozen: BigNumber = await userContract.totalFrozen();\n    return formatUnits(totalFrozen, decimals);\n  };\n\nexport default function useTotalFrozenStake() {\n  const readProvider = useReadProvider();\n  const userContract: Contract = useUserContract(readProvider);\n  const { data: decimals } = useDAIDecimals();\n  const shouldFetch = !!userContract && !!decimals;\n  return useSWR(\n    shouldFetch ? [\"totalFrozenStake\", decimals] : null,\n    getTotalFrozenStake(userContract)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}