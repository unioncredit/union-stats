{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mathewstokes/Desktop/union/union-stats/union-stats/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mathewstokes/Desktop/union/union-stats/union-stats/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport useUserContract from \"hooks/contracts/useUserContract\";\nimport useDAIDecimals from \"hooks/useDAIDecimals\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport useSWR from \"swr\";\nimport useReadProvider from \"hooks/useReadProvider\";\n\nvar getTotalStakedDAI = function getTotalStakedDAI(userContract) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_, decimals) {\n      var totalStaked;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return userContract.totalStaked();\n\n            case 2:\n              totalStaked = _context.sent;\n              return _context.abrupt(\"return\", formatUnits(totalStaked, decimals));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\nexport default function useTotalStakedDAI() {\n  _s();\n\n  var readProvider = useReadProvider();\n  var userContract = useUserContract(readProvider);\n\n  var _useDAIDecimals = useDAIDecimals(),\n      decimals = _useDAIDecimals.data;\n\n  var shouldFetch = !!userContract && !!decimals;\n  return useSWR(shouldFetch ? [\"totalStakedDAI\", decimals] : null, getTotalStakedDAI(userContract));\n}\n\n_s(useTotalStakedDAI, \"QVywHl+tSrKX2bWFOczvG98jOIo=\", false, function () {\n  return [useReadProvider, useUserContract, useDAIDecimals, useSWR];\n});","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/union/union-stats/union-stats/hooks/stats/userManagerStats/useTotalStakedDAI.ts"],"names":["useUserContract","useDAIDecimals","formatUnits","useSWR","useReadProvider","getTotalStakedDAI","userContract","_","decimals","totalStaked","useTotalStakedDAI","readProvider","data","shouldFetch"],"mappings":";;;;;AAAA,OAAOA,eAAP,MAA4B,iCAA5B;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AACA,SAASC,WAAT,QAA4B,sBAA5B;AAGA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,eAAP,MAA4B,uBAA5B;;AAEA,IAAMC,iBAAiB,GACrB,SADIA,iBACJ,CAACC,YAAD;AAAA;AAAA,wEAA4B,iBAAOC,CAAP,EAAeC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACWF,YAAY,CAACG,WAAb,EADX;;AAAA;AACpBA,cAAAA,WADoB;AAAA,+CAEnBP,WAAW,CAACO,WAAD,EAAcD,QAAd,CAFQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA5B;;AAAA;AAAA;AAAA;AAAA;AAAA,CADF;;AAMA,eAAe,SAASE,iBAAT,GAA6B;AAAA;;AAC1C,MAAMC,YAAY,GAAGP,eAAe,EAApC;AACA,MAAME,YAAsB,GAAGN,eAAe,CAACW,YAAD,CAA9C;;AAF0C,wBAGfV,cAAc,EAHC;AAAA,MAG5BO,QAH4B,mBAGlCI,IAHkC;;AAI1C,MAAMC,WAAW,GAAG,CAAC,CAACP,YAAF,IAAkB,CAAC,CAACE,QAAxC;AACA,SAAOL,MAAM,CACXU,WAAW,GAAG,CAAC,gBAAD,EAAmBL,QAAnB,CAAH,GAAkC,IADlC,EAEXH,iBAAiB,CAACC,YAAD,CAFN,CAAb;AAID;;GATuBI,iB;UACDN,e,EACUJ,e,EACJC,c,EAEpBE,M","sourcesContent":["import useUserContract from \"hooks/contracts/useUserContract\";\nimport useDAIDecimals from \"hooks/useDAIDecimals\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport useSWR from \"swr\";\nimport useReadProvider from \"hooks/useReadProvider\";\n\nconst getTotalStakedDAI =\n  (userContract: Contract) => async (_: any, decimals: BigNumber) => {\n    const totalStaked: BigNumber = await userContract.totalStaked();\n    return formatUnits(totalStaked, decimals);\n  };\n\nexport default function useTotalStakedDAI() {\n  const readProvider = useReadProvider();\n  const userContract: Contract = useUserContract(readProvider);\n  const { data: decimals } = useDAIDecimals();\n  const shouldFetch = !!userContract && !!decimals;\n  return useSWR(\n    shouldFetch ? [\"totalStakedDAI\", decimals] : null,\n    getTotalStakedDAI(userContract)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}