{"ast":null,"code":"import { isAddress } from \"@ethersproject/address\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport useSWR from \"swr\";\nimport { roundDown } from \"util/numbers\";\nimport parseRes from \"util/parseRes\";\nimport USER_MANAGER_ABI from \"constants/abis/userManager.json\";\nimport useMarketRegistryContract from \"../contracts/useMarketRegistryContract\";\nimport useCurrentToken from \"../useCurrentToken\";\n\nconst getStakeData = marketRegistryContract => async (_, account, tokenAddress, library) => {\n  try {\n    const signer = library.getSigner();\n    const res = await marketRegistryContract.tokens(tokenAddress);\n    const userManagerAddress = res.userManager;\n    const userManagerContract = new Contract(userManagerAddress, USER_MANAGER_ABI, signer);\n    const totalStake = await userManagerContract.getStakerBalance(account);\n    const totalLocked = await userManagerContract.getTotalLockedStake(account);\n    const totalFrozen = await userManagerContract.getTotalFrozenAmount(account);\n    return {\n      totalStake: parseRes(totalStake),\n      utilizedStake: parseRes(totalLocked.sub(totalFrozen)),\n      withdrawableStake: roundDown(formatUnits(totalStake.sub(totalLocked), 18)),\n      defaultedStake: parseRes(totalFrozen)\n    };\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\nexport default function useStakeData() {\n  const {\n    account,\n    library\n  } = useWeb3React();\n  const curToken = useCurrentToken();\n  const marketRegistryContract = useMarketRegistryContract();\n  const shouldFetch = !!marketRegistryContract && typeof account === \"string\" && isAddress(curToken);\n  return useSWR(shouldFetch ? [\"StakeData\", account, curToken, library] : null, getStakeData(marketRegistryContract));\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/data/useStakeData.ts"],"names":["isAddress","Contract","formatUnits","useWeb3React","useSWR","roundDown","parseRes","USER_MANAGER_ABI","useMarketRegistryContract","useCurrentToken","getStakeData","marketRegistryContract","_","account","tokenAddress","library","signer","getSigner","res","tokens","userManagerAddress","userManager","userManagerContract","totalStake","getStakerBalance","totalLocked","getTotalLockedStake","totalFrozen","getTotalFrozenAmount","utilizedStake","sub","withdrawableStake","defaultedStake","error","console","useStakeData","curToken","shouldFetch"],"mappings":"AAAA,SAASA,SAAT,QAA0B,wBAA1B;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,OAAOC,yBAAP,MAAsC,wCAAtC;AACA,OAAOC,eAAP,MAA4B,oBAA5B;;AAEA,MAAMC,YAAY,GACfC,sBAAD,IACA,OAAOC,CAAP,EAAeC,OAAf,EAAgCC,YAAhC,EAAsDC,OAAtD,KAAkE;AAChE,MAAI;AACF,UAAMC,MAAM,GAAGD,OAAO,CAACE,SAAR,EAAf;AACA,UAAMC,GAAG,GAAG,MAAMP,sBAAsB,CAACQ,MAAvB,CAA8BL,YAA9B,CAAlB;AACA,UAAMM,kBAAkB,GAAGF,GAAG,CAACG,WAA/B;AACA,UAAMC,mBAAmB,GAAG,IAAIrB,QAAJ,CAC1BmB,kBAD0B,EAE1Bb,gBAF0B,EAG1BS,MAH0B,CAA5B;AAMA,UAAMO,UAAU,GAAG,MAAMD,mBAAmB,CAACE,gBAApB,CAAqCX,OAArC,CAAzB;AAEA,UAAMY,WAAW,GAAG,MAAMH,mBAAmB,CAACI,mBAApB,CACxBb,OADwB,CAA1B;AAIA,UAAMc,WAAW,GAAG,MAAML,mBAAmB,CAACM,oBAApB,CACxBf,OADwB,CAA1B;AAIA,WAAO;AACLU,MAAAA,UAAU,EAAEjB,QAAQ,CAACiB,UAAD,CADf;AAELM,MAAAA,aAAa,EAAEvB,QAAQ,CAACmB,WAAW,CAACK,GAAZ,CAAgBH,WAAhB,CAAD,CAFlB;AAGLI,MAAAA,iBAAiB,EAAE1B,SAAS,CAC1BH,WAAW,CAACqB,UAAU,CAACO,GAAX,CAAeL,WAAf,CAAD,EAA8B,EAA9B,CADe,CAHvB;AAMLO,MAAAA,cAAc,EAAE1B,QAAQ,CAACqB,WAAD;AANnB,KAAP;AAQD,GA5BD,CA4BE,OAAOM,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,UAAMA,KAAN;AACD;AACF,CAnCH;;AAqCA,eAAe,SAASE,YAAT,GAAwB;AACrC,QAAM;AAAEtB,IAAAA,OAAF;AAAWE,IAAAA;AAAX,MAAuBZ,YAAY,EAAzC;AACA,QAAMiC,QAAQ,GAAG3B,eAAe,EAAhC;AACA,QAAME,sBAAsB,GAAGH,yBAAyB,EAAxD;AAEA,QAAM6B,WAAW,GACf,CAAC,CAAC1B,sBAAF,IACA,OAAOE,OAAP,KAAmB,QADnB,IAEAb,SAAS,CAACoC,QAAD,CAHX;AAKA,SAAOhC,MAAM,CACXiC,WAAW,GAAG,CAAC,WAAD,EAAcxB,OAAd,EAAuBuB,QAAvB,EAAiCrB,OAAjC,CAAH,GAA+C,IAD/C,EAEXL,YAAY,CAACC,sBAAD,CAFD,CAAb;AAID","sourcesContent":["import { isAddress } from \"@ethersproject/address\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport useSWR from \"swr\";\nimport { roundDown } from \"util/numbers\";\nimport parseRes from \"util/parseRes\";\nimport USER_MANAGER_ABI from \"constants/abis/userManager.json\";\nimport useMarketRegistryContract from \"../contracts/useMarketRegistryContract\";\nimport useCurrentToken from \"../useCurrentToken\";\n\nconst getStakeData =\n  (marketRegistryContract: Contract) =>\n  async (_: any, account: string, tokenAddress: string, library) => {\n    try {\n      const signer = library.getSigner();\n      const res = await marketRegistryContract.tokens(tokenAddress);\n      const userManagerAddress = res.userManager;\n      const userManagerContract = new Contract(\n        userManagerAddress,\n        USER_MANAGER_ABI,\n        signer\n      );\n\n      const totalStake = await userManagerContract.getStakerBalance(account);\n\n      const totalLocked = await userManagerContract.getTotalLockedStake(\n        account\n      );\n\n      const totalFrozen = await userManagerContract.getTotalFrozenAmount(\n        account\n      );\n\n      return {\n        totalStake: parseRes(totalStake),\n        utilizedStake: parseRes(totalLocked.sub(totalFrozen)),\n        withdrawableStake: roundDown(\n          formatUnits(totalStake.sub(totalLocked), 18)\n        ),\n        defaultedStake: parseRes(totalFrozen),\n      };\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  };\n\nexport default function useStakeData() {\n  const { account, library } = useWeb3React();\n  const curToken = useCurrentToken();\n  const marketRegistryContract = useMarketRegistryContract();\n\n  const shouldFetch =\n    !!marketRegistryContract &&\n    typeof account === \"string\" &&\n    isAddress(curToken);\n\n  return useSWR(\n    shouldFetch ? [\"StakeData\", account, curToken, library] : null,\n    getStakeData(marketRegistryContract)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}