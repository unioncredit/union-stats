{"ast":null,"code":"import useSWR from \"swr\";\nimport useChainId from \"hooks/useChainId\";\nimport fetchUserTransactions from \"fetchers/fetchUserTransactions\";\nimport fetchUTokenTransactions from \"fetchers/fetchUTokenTransactions\";\nimport fetchRegisterTransactions from \"fetchers/fetchRegisterTransactions\";\n\nasync function fetchData(_, chainId, address) {\n  const registerTransactions = await fetchRegisterTransactions(chainId, address);\n  const utokenTransactions = await fetchUTokenTransactions(chainId, address);\n  const userTransactions = await fetchUserTransactions(chainId, address);\n  return [...registerTransactions, ...utokenTransactions, ...userTransactions].sort((a, b) => {\n    return Number(b.timestamp) - Number(a.timestamp);\n  });\n}\n\nexport default function useAddressHistory(address) {\n  const chainId = useChainId();\n  const shouldFetch = chainId;\n  return useSWR(shouldFetch ? [\"EventLogsData\", chainId, address] : null, fetchData, {\n    shouldRetryOnError: false,\n    refreshWhenHidden: false,\n    refreshWhenOffline: false,\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false\n  });\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/data/useAddressHistory.js"],"names":["useSWR","useChainId","fetchUserTransactions","fetchUTokenTransactions","fetchRegisterTransactions","fetchData","_","chainId","address","registerTransactions","utokenTransactions","userTransactions","sort","a","b","Number","timestamp","useAddressHistory","shouldFetch","shouldRetryOnError","refreshWhenHidden","refreshWhenOffline","revalidateOnFocus","revalidateOnReconnect"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,KAAnB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,qBAAP,MAAkC,gCAAlC;AACA,OAAOC,uBAAP,MAAoC,kCAApC;AACA,OAAOC,yBAAP,MAAsC,oCAAtC;;AAEA,eAAeC,SAAf,CAAyBC,CAAzB,EAA4BC,OAA5B,EAAqCC,OAArC,EAA8C;AAC5C,QAAMC,oBAAoB,GAAG,MAAML,yBAAyB,CAC1DG,OAD0D,EAE1DC,OAF0D,CAA5D;AAIA,QAAME,kBAAkB,GAAG,MAAMP,uBAAuB,CAACI,OAAD,EAAUC,OAAV,CAAxD;AACA,QAAMG,gBAAgB,GAAG,MAAMT,qBAAqB,CAACK,OAAD,EAAUC,OAAV,CAApD;AAEA,SAAO,CACL,GAAGC,oBADE,EAEL,GAAGC,kBAFE,EAGL,GAAGC,gBAHE,EAILC,IAJK,CAIA,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACf,WAAOC,MAAM,CAACD,CAAC,CAACE,SAAH,CAAN,GAAsBD,MAAM,CAACF,CAAC,CAACG,SAAH,CAAnC;AACD,GANM,CAAP;AAOD;;AAED,eAAe,SAASC,iBAAT,CAA2BT,OAA3B,EAAoC;AACjD,QAAMD,OAAO,GAAGN,UAAU,EAA1B;AAEA,QAAMiB,WAAW,GAAGX,OAApB;AAEA,SAAOP,MAAM,CACXkB,WAAW,GAAG,CAAC,eAAD,EAAkBX,OAAlB,EAA2BC,OAA3B,CAAH,GAAyC,IADzC,EAEXH,SAFW,EAGX;AACEc,IAAAA,kBAAkB,EAAE,KADtB;AAEEC,IAAAA,iBAAiB,EAAE,KAFrB;AAGEC,IAAAA,kBAAkB,EAAE,KAHtB;AAIEC,IAAAA,iBAAiB,EAAE,KAJrB;AAKEC,IAAAA,qBAAqB,EAAE;AALzB,GAHW,CAAb;AAWD","sourcesContent":["import useSWR from \"swr\";\nimport useChainId from \"hooks/useChainId\";\nimport fetchUserTransactions from \"fetchers/fetchUserTransactions\";\nimport fetchUTokenTransactions from \"fetchers/fetchUTokenTransactions\";\nimport fetchRegisterTransactions from \"fetchers/fetchRegisterTransactions\";\n\nasync function fetchData(_, chainId, address) {\n  const registerTransactions = await fetchRegisterTransactions(\n    chainId,\n    address\n  );\n  const utokenTransactions = await fetchUTokenTransactions(chainId, address);\n  const userTransactions = await fetchUserTransactions(chainId, address);\n\n  return [\n    ...registerTransactions,\n    ...utokenTransactions,\n    ...userTransactions,\n  ].sort((a, b) => {\n    return Number(b.timestamp) - Number(a.timestamp);\n  });\n}\n\nexport default function useAddressHistory(address) {\n  const chainId = useChainId();\n\n  const shouldFetch = chainId;\n\n  return useSWR(\n    shouldFetch ? [\"EventLogsData\", chainId, address] : null,\n    fetchData,\n    {\n      shouldRetryOnError: false,\n      refreshWhenHidden: false,\n      refreshWhenOffline: false,\n      revalidateOnFocus: false,\n      revalidateOnReconnect: false,\n    }\n  );\n}\n"]},"metadata":{},"sourceType":"module"}