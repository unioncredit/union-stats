{"ast":null,"code":"import { BigNumber } from \"@ethersproject/bignumber\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport useUserContract from \"hooks/contracts/useUserContract\";\nimport useUTokenContract from \"hooks/contracts/useUTokenContract\";\nimport useDAIDecimals from \"hooks/useDAIDecimals\";\nimport useSWR from \"swr\";\nimport { getLogs } from \"lib/logs\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport useChainId from \"hooks/useChainId\";\n\nconst getDefaultedAmount = (uTokenContract, userContract) => async (_, decimals, chainId, provider) => {\n  const eventFilter = uTokenContract.filters.LogBorrow();\n  const logList = await getLogs(provider, chainId, eventFilter);\n  const borrowerList = logList.map(log => {\n    const event = uTokenContract.interface.parseLog(log);\n    return event.args.account;\n  });\n  const uniqueBorrowerList = Array.from(new Set(borrowerList));\n  const overdueBorrowerList = [];\n  await Promise.all(uniqueBorrowerList.map(async borrower => {\n    const isOverdue = await uTokenContract.checkIsOverdue(borrower);\n\n    if (isOverdue) {\n      overdueBorrowerList.push(borrower);\n    }\n  }));\n  const overdueBSList = [];\n  await Promise.all(overdueBorrowerList.map(async borrower => {\n    const stakers = await userContract.getStakerAddresses(borrower);\n    stakers.forEach(staker => {\n      overdueBSList.push({\n        borrower,\n        staker\n      });\n    });\n  }));\n  const defaultedAmountList = await Promise.all(overdueBSList.map(async bs => {\n    return userContract.getLockedStake(bs.staker, bs.borrower);\n  }));\n  const totalDefaulted = defaultedAmountList.reduce((sum, num) => {\n    return sum.add(num);\n  }, BigNumber.from(0));\n  return formatUnits(totalDefaulted, decimals);\n};\n\nexport function useDefaultedAmount() {\n  const {\n    library\n  } = useWeb3React();\n  const uTokenContract = useUTokenContract();\n  const userContract = useUserContract();\n  const {\n    data: decimals\n  } = useDAIDecimals();\n  const chainId = useChainId();\n  const shouldFetch = !!uTokenContract && !!userContract && !!chainId && !!library;\n  return useSWR(shouldFetch ? [\"totalDefaultedAmount\", decimals, chainId, library] : null, getDefaultedAmount(uTokenContract, userContract));\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/stats/uTokenStats/useDefaultedAmount.ts"],"names":["BigNumber","formatUnits","useUserContract","useUTokenContract","useDAIDecimals","useSWR","getLogs","useWeb3React","useChainId","getDefaultedAmount","uTokenContract","userContract","_","decimals","chainId","provider","eventFilter","filters","LogBorrow","logList","borrowerList","map","log","event","interface","parseLog","args","account","uniqueBorrowerList","Array","from","Set","overdueBorrowerList","Promise","all","borrower","isOverdue","checkIsOverdue","push","overdueBSList","stakers","getStakerAddresses","forEach","staker","defaultedAmountList","bs","getLockedStake","totalDefaulted","reduce","sum","num","add","useDefaultedAmount","library","data","shouldFetch"],"mappings":"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","sourcesContent":["import { BigNumber } from \"@ethersproject/bignumber\";\nimport { Contract, EventFilter } from \"@ethersproject/contracts\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport useUserContract from \"hooks/contracts/useUserContract\";\nimport useUTokenContract from \"hooks/contracts/useUTokenContract\";\nimport useDAIDecimals from \"hooks/useDAIDecimals\";\nimport useSWR from \"swr\";\nimport { getLogs } from \"lib/logs\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport useChainId from \"hooks/useChainId\";\n\ndeclare type borrowerStakerPair = {\n  borrower: string;\n  staker: string;\n};\n\nconst getDefaultedAmount =\n  (uTokenContract: Contract, userContract: Contract) =>\n  async (_: any, decimals: BigNumber, chainId: number, provider: any) => {\n    const eventFilter: EventFilter = uTokenContract.filters.LogBorrow();\n    const logList = await getLogs(provider, chainId, eventFilter);\n\n    const borrowerList: Array<string> = logList.map((log) => {\n      const event = uTokenContract.interface.parseLog(log);\n      return event.args.account;\n    });\n\n    const uniqueBorrowerList: Array<string> = Array.from(new Set(borrowerList));\n\n    const overdueBorrowerList: Array<string> = [];\n    await Promise.all(\n      uniqueBorrowerList.map(async (borrower) => {\n        const isOverdue = await uTokenContract.checkIsOverdue(borrower);\n        if (isOverdue) {\n          overdueBorrowerList.push(borrower);\n        }\n      })\n    );\n\n    const overdueBSList: Array<borrowerStakerPair> = [];\n    await Promise.all(\n      overdueBorrowerList.map(async (borrower) => {\n        const stakers = await userContract.getStakerAddresses(borrower);\n        stakers.forEach((staker) => {\n          overdueBSList.push({ borrower, staker });\n        });\n      })\n    );\n\n    const defaultedAmountList: Array<BigNumber> = await Promise.all(\n      overdueBSList.map(async (bs) => {\n        return userContract.getLockedStake(bs.staker, bs.borrower);\n      })\n    );\n\n    const totalDefaulted = defaultedAmountList.reduce((sum, num) => {\n      return sum.add(num);\n    }, BigNumber.from(0));\n\n    return formatUnits(totalDefaulted, decimals);\n  };\n\nexport function useDefaultedAmount() {\n  const { library } = useWeb3React();\n  const uTokenContract: Contract = useUTokenContract();\n  const userContract: Contract = useUserContract();\n  const { data: decimals } = useDAIDecimals();\n  const chainId = useChainId();\n\n  const shouldFetch =\n    !!uTokenContract && !!userContract && !!chainId && !!library;\n\n  return useSWR(\n    shouldFetch ? [\"totalDefaultedAmount\", decimals, chainId, library] : null,\n    getDefaultedAmount(uTokenContract, userContract)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}