{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { formatUnits } from \"@ethersproject/units\";\nimport { BLOCKS_PER_YEAR } from \"constants/variables\";\nimport useAssetContract from \"hooks/contracts/useAssetContract\";\nimport useCurrentToken from \"hooks/useCurrentToken\";\nimport useSWR from \"swr\";\nimport useReadProvider from \"hooks/useReadProvider\";\nimport useChainId from \"hooks/useChainId\";\nimport useUserContract from \"hooks/contracts/useUserContract\";\nimport useUTokenContract from \"hooks/contracts/useUTokenContract\";\n\nvar getStatisticsData = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_, DAI, chainId, assetContract, userManagerContract, uTokenContract) {\n    var currentTotalStaked, loanableAmount, totalBorrowed, ratePreBlock;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return userManagerContract.totalStaked();\n\n          case 2:\n            currentTotalStaked = _context.sent;\n            _context.next = 5;\n            return assetContract.getLoanableAmount(DAI);\n\n          case 5:\n            loanableAmount = _context.sent;\n            _context.next = 8;\n            return uTokenContract.totalBorrows();\n\n          case 8:\n            totalBorrowed = _context.sent;\n            _context.next = 11;\n            return uTokenContract.borrowRatePerBlock();\n\n          case 11:\n            ratePreBlock = _context.sent;\n            return _context.abrupt(\"return\", {\n              lendingPoolBalance: parseFloat(formatUnits(loanableAmount, 18)),\n              totalStaked: parseFloat(formatUnits(currentTotalStaked, 18)),\n              outstandingLoans: parseFloat(formatUnits(totalBorrowed, 18)),\n              interestRate: parseFloat(formatUnits(ratePreBlock, 18)) * BLOCKS_PER_YEAR[chainId]\n            });\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getStatisticsData(_x, _x2, _x3, _x4, _x5, _x6) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default function useStatisticsData() {\n  _s();\n\n  var chainId = useChainId();\n  var readProvider = useReadProvider();\n  var DAI = useCurrentToken();\n  var assetContract = useAssetContract(readProvider);\n  var userManagerContract = useUserContract(readProvider);\n  var uTokenContract = useUTokenContract(readProvider);\n  var shouldFetch = !!assetContract && typeof chainId === \"number\" && typeof DAI === \"string\" && !!readProvider;\n  return useSWR(shouldFetch ? [\"StatisticsData\", DAI, chainId, assetContract, userManagerContract, uTokenContract] : null, getStatisticsData);\n}\n\n_s(useStatisticsData, \"LSJ+gqBMTL50+PfWBY2r43T2tsQ=\", false, function () {\n  return [useChainId, useReadProvider, useCurrentToken, useAssetContract, useUserContract, useUTokenContract, useSWR];\n});","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/governance/useStatisticsData.ts"],"names":["formatUnits","BLOCKS_PER_YEAR","useAssetContract","useCurrentToken","useSWR","useReadProvider","useChainId","useUserContract","useUTokenContract","getStatisticsData","_","DAI","chainId","assetContract","userManagerContract","uTokenContract","totalStaked","currentTotalStaked","getLoanableAmount","loanableAmount","totalBorrows","totalBorrowed","borrowRatePerBlock","ratePreBlock","lendingPoolBalance","parseFloat","outstandingLoans","interestRate","useStatisticsData","readProvider","shouldFetch"],"mappings":";;;;;AAEA,SAASA,WAAT,QAA4B,sBAA5B;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,OAAOC,gBAAP,MAA6B,kCAA7B;AAEA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,eAAP,MAA4B,iCAA5B;AACA,OAAOC,iBAAP,MAA8B,mCAA9B;;AAEA,IAAMC,iBAAiB;AAAA,sEAAG,iBACxBC,CADwB,EAExBC,GAFwB,EAGxBC,OAHwB,EAIxBC,aAJwB,EAKxBC,mBALwB,EAMxBC,cANwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAQoBD,mBAAmB,CAACE,WAApB,EARpB;;AAAA;AAQlBC,YAAAA,kBARkB;AAAA;AAAA,mBAUgBJ,aAAa,CAACK,iBAAd,CAAgCP,GAAhC,CAVhB;;AAAA;AAUlBQ,YAAAA,cAVkB;AAAA;AAAA,mBAYeJ,cAAc,CAACK,YAAf,EAZf;;AAAA;AAYlBC,YAAAA,aAZkB;AAAA;AAAA,mBAccN,cAAc,CAACO,kBAAf,EAdd;;AAAA;AAclBC,YAAAA,YAdkB;AAAA,6CAgBjB;AACLC,cAAAA,kBAAkB,EAAEC,UAAU,CAACzB,WAAW,CAACmB,cAAD,EAAiB,EAAjB,CAAZ,CADzB;AAELH,cAAAA,WAAW,EAAES,UAAU,CAACzB,WAAW,CAACiB,kBAAD,EAAqB,EAArB,CAAZ,CAFlB;AAGLS,cAAAA,gBAAgB,EAAED,UAAU,CAACzB,WAAW,CAACqB,aAAD,EAAgB,EAAhB,CAAZ,CAHvB;AAILM,cAAAA,YAAY,EACVF,UAAU,CAACzB,WAAW,CAACuB,YAAD,EAAe,EAAf,CAAZ,CAAV,GAA4CtB,eAAe,CAACW,OAAD;AALxD,aAhBiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjBH,iBAAiB;AAAA;AAAA;AAAA,GAAvB;;AAyBA,eAAe,SAASmB,iBAAT,GAA6B;AAAA;;AAC1C,MAAMhB,OAAO,GAAGN,UAAU,EAA1B;AACA,MAAMuB,YAAY,GAAGxB,eAAe,EAApC;AAEA,MAAMM,GAAG,GAAGR,eAAe,EAA3B;AAEA,MAAMU,aAAa,GAAGX,gBAAgB,CAAC2B,YAAD,CAAtC;AACA,MAAMf,mBAAmB,GAAGP,eAAe,CAACsB,YAAD,CAA3C;AACA,MAAMd,cAAc,GAAGP,iBAAiB,CAACqB,YAAD,CAAxC;AAEA,MAAMC,WAAW,GACf,CAAC,CAACjB,aAAF,IACA,OAAOD,OAAP,KAAmB,QADnB,IAEA,OAAOD,GAAP,KAAe,QAFf,IAGA,CAAC,CAACkB,YAJJ;AAMA,SAAOzB,MAAM,CACX0B,WAAW,GACP,CACE,gBADF,EAEEnB,GAFF,EAGEC,OAHF,EAIEC,aAJF,EAKEC,mBALF,EAMEC,cANF,CADO,GASP,IAVO,EAWXN,iBAXW,CAAb;AAaD;;GA7BuBmB,iB;UACNtB,U,EACKD,e,EAETF,e,EAEUD,gB,EACMK,e,EACLC,iB,EAQhBJ,M","sourcesContent":["import type { BigNumber } from \"@ethersproject/bignumber\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { BLOCKS_PER_YEAR } from \"constants/variables\";\nimport useAssetContract from \"hooks/contracts/useAssetContract\";\nimport useUnionContract from \"hooks/contracts/useUnionContract\";\nimport useCurrentToken from \"hooks/useCurrentToken\";\nimport useSWR from \"swr\";\nimport useReadProvider from \"hooks/useReadProvider\";\nimport useChainId from \"hooks/useChainId\";\nimport useUserContract from \"hooks/contracts/useUserContract\";\nimport useUTokenContract from \"hooks/contracts/useUTokenContract\";\n\nconst getStatisticsData = async (\n  _: any,\n  DAI: string,\n  chainId: number,\n  assetContract: Contract,\n  userManagerContract: Contract,\n  uTokenContract: Contract\n) => {\n  const currentTotalStaked: BigNumber = await userManagerContract.totalStaked();\n\n  const loanableAmount: BigNumber = await assetContract.getLoanableAmount(DAI);\n\n  const totalBorrowed: BigNumber = await uTokenContract.totalBorrows();\n\n  const ratePreBlock: BigNumber = await uTokenContract.borrowRatePerBlock();\n\n  return {\n    lendingPoolBalance: parseFloat(formatUnits(loanableAmount, 18)),\n    totalStaked: parseFloat(formatUnits(currentTotalStaked, 18)),\n    outstandingLoans: parseFloat(formatUnits(totalBorrowed, 18)),\n    interestRate:\n      parseFloat(formatUnits(ratePreBlock, 18)) * BLOCKS_PER_YEAR[chainId],\n  };\n};\n\nexport default function useStatisticsData() {\n  const chainId = useChainId();\n  const readProvider = useReadProvider();\n\n  const DAI = useCurrentToken();\n\n  const assetContract = useAssetContract(readProvider);\n  const userManagerContract = useUserContract(readProvider);\n  const uTokenContract = useUTokenContract(readProvider);\n\n  const shouldFetch =\n    !!assetContract &&\n    typeof chainId === \"number\" &&\n    typeof DAI === \"string\" &&\n    !!readProvider;\n\n  return useSWR(\n    shouldFetch\n      ? [\n          \"StatisticsData\",\n          DAI,\n          chainId,\n          assetContract,\n          userManagerContract,\n          uTokenContract,\n        ]\n      : null,\n    getStatisticsData\n  );\n}\n"]},"metadata":{},"sourceType":"module"}