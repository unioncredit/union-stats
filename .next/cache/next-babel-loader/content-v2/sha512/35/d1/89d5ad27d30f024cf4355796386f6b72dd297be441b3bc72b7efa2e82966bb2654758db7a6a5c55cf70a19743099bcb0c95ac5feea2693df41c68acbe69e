{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { Contract } from \"@ethersproject/contracts\";\nimport { parseUnits } from \"@ethersproject/units\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport U_TOKENT_ABI from \"constants/abis/uToken.json\";\nimport useERC20Contract from \"hooks/contracts/useERC20Contract\";\nimport useMarketRegistryContract from \"hooks/contracts/useMarketRegistryContract\";\nimport useCurrentToken from \"hooks/useCurrentToken\";\nimport { useCallback } from \"react\";\nimport { makeTxWithGasEstimate } from \"../../util/gasEstimation\";\nimport { APPROVE_DAI_REPAY_SIGNATURE_KEY } from \"constants/app\";\nimport usePermits from \"hooks/usePermits\";\nexport default function useRepay() {\n  _s();\n\n  var _useWeb3React = useWeb3React(),\n      library = _useWeb3React.library,\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId;\n\n  var DAI = useCurrentToken();\n  var marketRegistryContract = useMarketRegistryContract();\n  var DAIContract = useERC20Contract(DAI);\n\n  var _usePermits = usePermits(),\n      getPermit = _usePermits.getPermit;\n\n  var permit = getPermit(APPROVE_DAI_REPAY_SIGNATURE_KEY);\n  return useCallback( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(amount) {\n      var res, uTokenAddress, uTokenContract, repayAmount, allowance;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return marketRegistryContract.tokens(DAI);\n\n            case 2:\n              res = _context.sent;\n              uTokenAddress = res.uToken;\n              uTokenContract = new Contract(uTokenAddress, U_TOKENT_ABI, library.getSigner());\n              repayAmount = parseUnits(String(amount), 18); // if we have a valid permit use that to stake\n\n              if (!permit) {\n                _context.next = 12;\n                break;\n              }\n\n              if (!(chainId == 1)) {\n                _context.next = 11;\n                break;\n              }\n\n              return _context.abrupt(\"return\", makeTxWithGasEstimate(uTokenContract, \"repayBorrowWithPermit\", [account, repayAmount.toString(), permit.nonce, permit.expiry, permit.v, permit.r, permit.s]));\n\n            case 11:\n              return _context.abrupt(\"return\", makeTxWithGasEstimate(uTokenContract, \"repayBorrowWithERC20Permit\", [account, repayAmount.toString(), permit.deadline, permit.v, permit.r, permit.s]));\n\n            case 12:\n              _context.next = 14;\n              return DAIContract.allowance(account, uTokenAddress);\n\n            case 14:\n              allowance = _context.sent;\n\n              if (!allowance.lt(repayAmount)) {\n                _context.next = 17;\n                break;\n              }\n\n              throw new Error(\"Allowance not enough\");\n\n            case 17:\n              return _context.abrupt(\"return\", makeTxWithGasEstimate(uTokenContract, \"repayBorrow\", [repayAmount]));\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [account, DAI, marketRegistryContract, DAIContract, permit]);\n}\n\n_s(useRepay, \"bFIqT4mt8G0IA603ofXSTZ1Vt/Y=\", false, function () {\n  return [useWeb3React, useCurrentToken, useMarketRegistryContract, useERC20Contract, usePermits];\n});","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/payables/useRepay.ts"],"names":["Contract","parseUnits","useWeb3React","U_TOKENT_ABI","useERC20Contract","useMarketRegistryContract","useCurrentToken","useCallback","makeTxWithGasEstimate","APPROVE_DAI_REPAY_SIGNATURE_KEY","usePermits","useRepay","library","account","chainId","DAI","marketRegistryContract","DAIContract","getPermit","permit","amount","tokens","res","uTokenAddress","uToken","uTokenContract","getSigner","repayAmount","String","toString","nonce","expiry","v","r","s","deadline","allowance","lt","Error"],"mappings":"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","sourcesContent":["import { Contract } from \"@ethersproject/contracts\";\nimport type { TransactionResponse } from \"@ethersproject/providers\";\nimport { parseUnits } from \"@ethersproject/units\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport U_TOKENT_ABI from \"constants/abis/uToken.json\";\nimport useERC20Contract from \"hooks/contracts/useERC20Contract\";\nimport useMarketRegistryContract from \"hooks/contracts/useMarketRegistryContract\";\nimport useCurrentToken from \"hooks/useCurrentToken\";\nimport { useCallback } from \"react\";\nimport { makeTxWithGasEstimate } from \"../../util/gasEstimation\";\nimport { APPROVE_DAI_REPAY_SIGNATURE_KEY } from \"constants/app\";\nimport usePermits from \"hooks/usePermits\";\n\nexport default function useRepay() {\n  const { library, account, chainId } = useWeb3React();\n  const DAI = useCurrentToken();\n  const marketRegistryContract = useMarketRegistryContract();\n  const DAIContract = useERC20Contract(DAI);\n  const { getPermit } = usePermits();\n\n  const permit = getPermit(APPROVE_DAI_REPAY_SIGNATURE_KEY);\n\n  return useCallback(\n    async (amount: number | string): Promise<TransactionResponse> => {\n      const res = await marketRegistryContract.tokens(DAI);\n      const uTokenAddress = res.uToken;\n\n      const uTokenContract = new Contract(\n        uTokenAddress,\n        U_TOKENT_ABI,\n        library.getSigner()\n      );\n\n      const repayAmount = parseUnits(String(amount), 18);\n\n      // if we have a valid permit use that to stake\n      if (permit) {\n        if (chainId == 1) {\n          return makeTxWithGasEstimate(\n            uTokenContract,\n            \"repayBorrowWithPermit\",\n            [\n              account,\n              repayAmount.toString(),\n              permit.nonce,\n              permit.expiry,\n              permit.v,\n              permit.r,\n              permit.s,\n            ]\n          );\n        } else {\n          return makeTxWithGasEstimate(\n            uTokenContract,\n            \"repayBorrowWithERC20Permit\",\n            [\n              account,\n              repayAmount.toString(),\n              permit.deadline,\n              permit.v,\n              permit.r,\n              permit.s,\n            ]\n          );\n        }\n      }\n\n      const allowance = await DAIContract.allowance(account, uTokenAddress);\n      if (allowance.lt(repayAmount)) {\n        throw new Error(\"Allowance not enough\");\n      }\n\n      return makeTxWithGasEstimate(uTokenContract, \"repayBorrow\", [\n        repayAmount,\n      ]);\n    },\n    [account, DAI, marketRegistryContract, DAIContract, permit]\n  );\n}\n"]},"metadata":{},"sourceType":"module"}