{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { InjectedConnector } from \"@web3-react/injected-connector\";\nimport { NetworkConnector } from \"@web3-react/network-connector\";\nconst POLLING_INTERVAL = 12000;\nexport const RPC_URLS = {\n  1: `https://mainnet.infura.io/v3/${process.env.NEXT_PUBLIC_INFURA_KEY}`,\n  4: `https://rinkeby.infura.io/v3/${process.env.NEXT_PUBLIC_INFURA_KEY}`,\n  42: `https://kovan.infura.io/v3/${process.env.NEXT_PUBLIC_INFURA_KEY}`,\n  137: `https://polygon-mainnet.infura.io/v3/${process.env.NEXT_PUBLIC_INFURA_KEY}`,\n  42161: \"https://arb1.arbitrum.io/rpc\",\n  421611: \"https://rinkeby.arbitrum.io/rpc\"\n};\nexport const networkImages = {\n  1: \"/images/ethereum.png\",\n  4: \"/images/rinkeby.png\",\n  42: \"/images/kovan.png\",\n  137: \"/images/polygon.png\",\n  42161: \"/images/arbitrum.png\",\n  421611: \"/images/arbitrum.png\"\n};\nconst networkAppUrlsDev = {\n  1: \"http://app.test:3000\",\n  42: \"http://kovan.test:3000\",\n  137: \"http://polygon.test:3000\",\n  42161: \"http://arbitrum.test:3000\",\n  421611: \"http://arbitrum-testnet.test:3000\"\n};\nconst networkAppUrlsProd = {\n  1: \"https://app.union.finance\",\n  42: \"https://kovan.union.finance\",\n  137: \"https://polygon.union.finance\",\n  42161: \"https://arbitrum.union.finance\",\n  421611: \"https://arbitrum-testnet.union.finance\"\n};\nexport const networkAppUrls = true ? networkAppUrlsDev : networkAppUrlsProd;\nconst allNetworks = {\n  1: RPC_URLS[1],\n  4: RPC_URLS[4],\n  42: RPC_URLS[42],\n  137: RPC_URLS[137],\n  42161: RPC_URLS[42161],\n  421611: RPC_URLS[421611]\n};\nexport const networks = true ? allNetworks : (() => {\n  const filteredNetworks = Object.keys(allNetworks).reduce((acc, key) => {\n    const host = window.location.host;\n    const chainId = Object.keys(allNetworks).find(chainId => {\n      var _networkAppUrls$chain;\n\n      return (_networkAppUrls$chain = networkAppUrls[chainId]) === null || _networkAppUrls$chain === void 0 ? void 0 : _networkAppUrls$chain.includes(host);\n    });\n\n    if (chainId && (chainId.toString() === \"1\" || chainId.toString() === key.toString())) {\n      return _objectSpread({\n        [key]: allNetworks[key]\n      }, acc);\n    }\n\n    return acc;\n  }, {});\n  return Object.keys(filteredNetworks).length > 0 ? filteredNetworks : allNetworks;\n})();\nexport const injected = new InjectedConnector({\n  supportedChainIds: Object.keys(networks).map(Number)\n});\nexport const network = new NetworkConnector({\n  urls: networks,\n  defaultChainId: 1\n});","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/union-stats/lib/connectors.js"],"names":["InjectedConnector","NetworkConnector","POLLING_INTERVAL","RPC_URLS","process","env","NEXT_PUBLIC_INFURA_KEY","networkImages","networkAppUrlsDev","networkAppUrlsProd","networkAppUrls","allNetworks","networks","filteredNetworks","Object","keys","reduce","acc","key","host","window","location","chainId","find","includes","toString","length","injected","supportedChainIds","map","Number","network","urls","defaultChainId"],"mappings":";;;;;;AAAA,SAASA,iBAAT,QAAkC,gCAAlC;AACA,SAASC,gBAAT,QAAiC,+BAAjC;AAEA,MAAMC,gBAAgB,GAAG,KAAzB;AAEA,OAAO,MAAMC,QAAQ,GAAG;AACtB,KAAI,gCAA+BC,OAAO,CAACC,GAAR,CAAYC,sBAAuB,EADhD;AAEtB,KAAI,gCAA+BF,OAAO,CAACC,GAAR,CAAYC,sBAAuB,EAFhD;AAGtB,MAAK,8BAA6BF,OAAO,CAACC,GAAR,CAAYC,sBAAuB,EAH/C;AAItB,OAAM,wCAAuCF,OAAO,CAACC,GAAR,CAAYC,sBAAuB,EAJ1D;AAKtB,SAAO,8BALe;AAMtB,UAAQ;AANc,CAAjB;AASP,OAAO,MAAMC,aAAa,GAAG;AAC3B,KAAG,sBADwB;AAE3B,KAAG,qBAFwB;AAG3B,MAAI,mBAHuB;AAI3B,OAAK,qBAJsB;AAK3B,SAAO,sBALoB;AAM3B,UAAQ;AANmB,CAAtB;AASP,MAAMC,iBAAiB,GAAG;AACxB,KAAG,sBADqB;AAExB,MAAI,wBAFoB;AAGxB,OAAK,0BAHmB;AAIxB,SAAO,2BAJiB;AAKxB,UAAQ;AALgB,CAA1B;AAQA,MAAMC,kBAAkB,GAAG;AACzB,KAAG,2BADsB;AAEzB,MAAI,6BAFqB;AAGzB,OAAK,+BAHoB;AAIzB,SAAO,gCAJkB;AAKzB,UAAQ;AALiB,CAA3B;AAQA,OAAO,MAAMC,cAAc,GACzB,OACIF,iBADJ,GAEIC,kBAHC;AAKP,MAAME,WAAW,GAAG;AAClB,KAAGR,QAAQ,CAAC,CAAD,CADO;AAElB,KAAGA,QAAQ,CAAC,CAAD,CAFO;AAGlB,MAAIA,QAAQ,CAAC,EAAD,CAHM;AAIlB,OAAKA,QAAQ,CAAC,GAAD,CAJK;AAKlB,SAAOA,QAAQ,CAAC,KAAD,CALG;AAMlB,UAAQA,QAAQ,CAAC,MAAD;AANE,CAApB;AASA,OAAO,MAAMS,QAAQ,GACnB,OACID,WADJ,GAEI,CAAC,MAAM;AACL,QAAME,gBAAgB,GAAGC,MAAM,CAACC,IAAP,CAAYJ,WAAZ,EAAyBK,MAAzB,CAAgC,CAACC,GAAD,EAAMC,GAAN,KAAc;AACrE,UAAMC,IAAI,GAAGC,MAAM,CAACC,QAAP,CAAgBF,IAA7B;AACA,UAAMG,OAAO,GAAGR,MAAM,CAACC,IAAP,CAAYJ,WAAZ,EAAyBY,IAAzB,CAA+BD,OAAD,IAAa;AAAA;;AACzD,sCAAOZ,cAAc,CAACY,OAAD,CAArB,0DAAO,sBAAyBE,QAAzB,CAAkCL,IAAlC,CAAP;AACD,KAFe,CAAhB;;AAIA,QACEG,OAAO,KACNA,OAAO,CAACG,QAAR,OAAuB,GAAvB,IACCH,OAAO,CAACG,QAAR,OAAuBP,GAAG,CAACO,QAAJ,EAFlB,CADT,EAIE;AACA;AAAS,SAACP,GAAD,GAAOP,WAAW,CAACO,GAAD;AAA3B,SAAqCD,GAArC;AACD;;AAED,WAAOA,GAAP;AACD,GAfwB,EAetB,EAfsB,CAAzB;AAiBA,SAAOH,MAAM,CAACC,IAAP,CAAYF,gBAAZ,EAA8Ba,MAA9B,GAAuC,CAAvC,GACHb,gBADG,GAEHF,WAFJ;AAGD,CArBD,GAHC;AA0BP,OAAO,MAAMgB,QAAQ,GAAG,IAAI3B,iBAAJ,CAAsB;AAC5C4B,EAAAA,iBAAiB,EAAEd,MAAM,CAACC,IAAP,CAAYH,QAAZ,EAAsBiB,GAAtB,CAA0BC,MAA1B;AADyB,CAAtB,CAAjB;AAIP,OAAO,MAAMC,OAAO,GAAG,IAAI9B,gBAAJ,CAAqB;AAC1C+B,EAAAA,IAAI,EAAEpB,QADoC;AAE1CqB,EAAAA,cAAc,EAAE;AAF0B,CAArB,CAAhB","sourcesContent":["import { InjectedConnector } from \"@web3-react/injected-connector\";\nimport { NetworkConnector } from \"@web3-react/network-connector\";\n\nconst POLLING_INTERVAL = 12000;\n\nexport const RPC_URLS = {\n  1: `https://mainnet.infura.io/v3/${process.env.NEXT_PUBLIC_INFURA_KEY}`,\n  4: `https://rinkeby.infura.io/v3/${process.env.NEXT_PUBLIC_INFURA_KEY}`,\n  42: `https://kovan.infura.io/v3/${process.env.NEXT_PUBLIC_INFURA_KEY}`,\n  137: `https://polygon-mainnet.infura.io/v3/${process.env.NEXT_PUBLIC_INFURA_KEY}`,\n  42161: \"https://arb1.arbitrum.io/rpc\",\n  421611: \"https://rinkeby.arbitrum.io/rpc\",\n};\n\nexport const networkImages = {\n  1: \"/images/ethereum.png\",\n  4: \"/images/rinkeby.png\",\n  42: \"/images/kovan.png\",\n  137: \"/images/polygon.png\",\n  42161: \"/images/arbitrum.png\",\n  421611: \"/images/arbitrum.png\",\n};\n\nconst networkAppUrlsDev = {\n  1: \"http://app.test:3000\",\n  42: \"http://kovan.test:3000\",\n  137: \"http://polygon.test:3000\",\n  42161: \"http://arbitrum.test:3000\",\n  421611: \"http://arbitrum-testnet.test:3000\",\n};\n\nconst networkAppUrlsProd = {\n  1: \"https://app.union.finance\",\n  42: \"https://kovan.union.finance\",\n  137: \"https://polygon.union.finance\",\n  42161: \"https://arbitrum.union.finance\",\n  421611: \"https://arbitrum-testnet.union.finance\",\n};\n\nexport const networkAppUrls =\n  process.env.NODE_ENV === \"development\"\n    ? networkAppUrlsDev\n    : networkAppUrlsProd;\n\nconst allNetworks = {\n  1: RPC_URLS[1],\n  4: RPC_URLS[4],\n  42: RPC_URLS[42],\n  137: RPC_URLS[137],\n  42161: RPC_URLS[42161],\n  421611: RPC_URLS[421611],\n};\n\nexport const networks =\n  typeof window === \"undefined\"\n    ? allNetworks\n    : (() => {\n        const filteredNetworks = Object.keys(allNetworks).reduce((acc, key) => {\n          const host = window.location.host;\n          const chainId = Object.keys(allNetworks).find((chainId) => {\n            return networkAppUrls[chainId]?.includes(host);\n          });\n\n          if (\n            chainId &&\n            (chainId.toString() === \"1\" ||\n              chainId.toString() === key.toString())\n          ) {\n            return { [key]: allNetworks[key], ...acc };\n          }\n\n          return acc;\n        }, {});\n\n        return Object.keys(filteredNetworks).length > 0\n          ? filteredNetworks\n          : allNetworks;\n      })();\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: Object.keys(networks).map(Number),\n});\n\nexport const network = new NetworkConnector({\n  urls: networks,\n  defaultChainId: 1,\n});"]},"metadata":{},"sourceType":"module"}