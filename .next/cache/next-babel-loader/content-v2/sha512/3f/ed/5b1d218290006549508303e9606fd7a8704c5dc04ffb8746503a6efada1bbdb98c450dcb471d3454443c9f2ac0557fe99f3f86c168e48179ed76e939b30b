{"ast":null,"code":"import { useEffect, useState, useMemo } from \"react\";\nexport default function usePagination(data = [], pageSize = 8) {\n  const {\n    0: page,\n    1: setPage\n  } = useState(1);\n  const maxPages = Math.ceil(data.length / pageSize);\n\n  const next = () => {\n    setPage(n => n + 1 >= maxPages ? maxPages : n + 1);\n  };\n\n  const prev = () => {\n    setPage(n => n - 1 <= 0 ? 0 : n - 1);\n  };\n\n  const pageData = useMemo(() => {\n    const start = (page - 1) * pageSize;\n    return data.slice(start, start + pageSize); // react be like this data is the same so stringified it\n    // because the upstream memos seems to be correct so fk\n  }, [pageSize, page, JSON.stringify(data)]);\n  useEffect(() => {\n    if (data.length > 0) {\n      setPage(1);\n    }\n  }, [data.length]);\n  return {\n    page,\n    data: pageData,\n    next,\n    prev,\n    maxPages,\n    pageSize,\n    setPage: n => setPage(Number(n))\n  };\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/union/union-stats/union-stats/hooks/usePagination.js"],"names":["useEffect","useState","useMemo","usePagination","data","pageSize","page","setPage","maxPages","Math","ceil","length","next","n","prev","pageData","start","slice","JSON","stringify","Number"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,OAA9B,QAA6C,OAA7C;AAEA,eAAe,SAASC,aAAT,CAAuBC,IAAI,GAAG,EAA9B,EAAkCC,QAAQ,GAAG,CAA7C,EAAgD;AAC7D,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBN,QAAQ,CAAC,CAAD,CAAhC;AAEA,QAAMO,QAAQ,GAAGC,IAAI,CAACC,IAAL,CAAUN,IAAI,CAACO,MAAL,GAAcN,QAAxB,CAAjB;;AAEA,QAAMO,IAAI,GAAG,MAAM;AACjBL,IAAAA,OAAO,CAAEM,CAAD,IAAQA,CAAC,GAAG,CAAJ,IAASL,QAAT,GAAoBA,QAApB,GAA+BK,CAAC,GAAG,CAA5C,CAAP;AACD,GAFD;;AAIA,QAAMC,IAAI,GAAG,MAAM;AACjBP,IAAAA,OAAO,CAAEM,CAAD,IAAQA,CAAC,GAAG,CAAJ,IAAS,CAAT,GAAa,CAAb,GAAiBA,CAAC,GAAG,CAA9B,CAAP;AACD,GAFD;;AAIA,QAAME,QAAQ,GAAGb,OAAO,CAAC,MAAM;AAC7B,UAAMc,KAAK,GAAG,CAACV,IAAI,GAAG,CAAR,IAAaD,QAA3B;AACA,WAAOD,IAAI,CAACa,KAAL,CAAWD,KAAX,EAAkBA,KAAK,GAAGX,QAA1B,CAAP,CAF6B,CAG7B;AACA;AACD,GALuB,EAKrB,CAACA,QAAD,EAAWC,IAAX,EAAiBY,IAAI,CAACC,SAAL,CAAef,IAAf,CAAjB,CALqB,CAAxB;AAOAJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,IAAI,CAACO,MAAL,GAAc,CAAlB,EAAqB;AACnBJ,MAAAA,OAAO,CAAC,CAAD,CAAP;AACD;AACF,GAJQ,EAIN,CAACH,IAAI,CAACO,MAAN,CAJM,CAAT;AAMA,SAAO;AACLL,IAAAA,IADK;AAELF,IAAAA,IAAI,EAAEW,QAFD;AAGLH,IAAAA,IAHK;AAILE,IAAAA,IAJK;AAKLN,IAAAA,QALK;AAMLH,IAAAA,QANK;AAOLE,IAAAA,OAAO,EAAGM,CAAD,IAAON,OAAO,CAACa,MAAM,CAACP,CAAD,CAAP;AAPlB,GAAP;AASD","sourcesContent":["import { useEffect, useState, useMemo } from \"react\";\n\nexport default function usePagination(data = [], pageSize = 8) {\n  const [page, setPage] = useState(1);\n\n  const maxPages = Math.ceil(data.length / pageSize);\n\n  const next = () => {\n    setPage((n) => (n + 1 >= maxPages ? maxPages : n + 1));\n  };\n\n  const prev = () => {\n    setPage((n) => (n - 1 <= 0 ? 0 : n - 1));\n  };\n\n  const pageData = useMemo(() => {\n    const start = (page - 1) * pageSize;\n    return data.slice(start, start + pageSize);\n    // react be like this data is the same so stringified it\n    // because the upstream memos seems to be correct so fk\n  }, [pageSize, page, JSON.stringify(data)]);\n\n  useEffect(() => {\n    if (data.length > 0) {\n      setPage(1);\n    }\n  }, [data.length]);\n\n  return {\n    page,\n    data: pageData,\n    next,\n    prev,\n    maxPages,\n    pageSize,\n    setPage: (n) => setPage(Number(n)),\n  };\n}\n"]},"metadata":{},"sourceType":"module"}