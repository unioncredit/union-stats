{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mathewstokes/Desktop/union-stats/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mathewstokes/Desktop/union-stats/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport useComptrollerContract from \"hooks/contracts/useComptrollerContract\";\nimport useUserContract from \"hooks/contracts/useUserContract\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport useSWR from \"swr\";\nimport useReadProvider from \"hooks/useReadProvider\";\nvar offsetPower = 18;\nvar offset = BigNumber.from(10).pow(offsetPower);\n\nvar getUnionPerDAIStaked = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_, comptroller, userContract) {\n    var totalStaked, totalFrozen, effectiveTotalStake, ipb;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return userContract.totalStaked();\n\n          case 2:\n            totalStaked = _context.sent;\n            _context.next = 5;\n            return userContract.totalFrozen();\n\n          case 5:\n            totalFrozen = _context.sent;\n            effectiveTotalStake = totalStaked.sub(totalFrozen);\n            _context.next = 9;\n            return comptroller.inflationPerBlock(effectiveTotalStake);\n\n          case 9:\n            ipb = _context.sent;\n            return _context.abrupt(\"return\", formatUnits(ipb.mul(offset).div(effectiveTotalStake), offsetPower));\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getUnionPerDAIStaked(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default function useUnionPerDAIStaked() {\n  _s();\n\n  var readProvider = useReadProvider();\n  var comptroller = useComptrollerContract(readProvider);\n  var userContract = useUserContract(readProvider);\n  var shouldFetch = !!comptroller && !!userContract;\n  return useSWR(shouldFetch ? [\"unionPerDAIStaked\", comptroller, userContract] : null, getUnionPerDAIStaked);\n}\n\n_s(useUnionPerDAIStaked, \"JfDR4UF1jZdFKltPmeNFWV3j9Mg=\", false, function () {\n  return [useReadProvider, useComptrollerContract, useUserContract, useSWR];\n});","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/union-stats/hooks/stats/unionTokenStats/useUnionPerDAIStaked.ts"],"names":["BigNumber","useComptrollerContract","useUserContract","formatUnits","useSWR","useReadProvider","offsetPower","offset","from","pow","getUnionPerDAIStaked","_","comptroller","userContract","totalStaked","totalFrozen","effectiveTotalStake","sub","inflationPerBlock","ipb","mul","div","useUnionPerDAIStaked","readProvider","shouldFetch"],"mappings":";;;;;AAAA,SAASA,SAAT,QAA0B,0BAA1B;AAEA,OAAOC,sBAAP,MAAmC,wCAAnC;AACA,OAAOC,eAAP,MAA4B,iCAA5B;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AAEA,IAAMC,WAAW,GAAG,EAApB;AACA,IAAMC,MAAM,GAAGP,SAAS,CAACQ,IAAV,CAAe,EAAf,EAAmBC,GAAnB,CAAuBH,WAAvB,CAAf;;AAEA,IAAMI,oBAAoB;AAAA,sEAAG,iBAC3BC,CAD2B,EAE3BC,WAF2B,EAG3BC,YAH2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAKUA,YAAY,CAACC,WAAb,EALV;;AAAA;AAKrBA,YAAAA,WALqB;AAAA;AAAA,mBAMUD,YAAY,CAACE,WAAb,EANV;;AAAA;AAMrBA,YAAAA,WANqB;AAOrBC,YAAAA,mBAPqB,GAOYF,WAAW,CAACG,GAAZ,CAAgBF,WAAhB,CAPZ;AAAA;AAAA,mBAQTH,WAAW,CAACM,iBAAZ,CAA8BF,mBAA9B,CARS;;AAAA;AAQrBG,YAAAA,GARqB;AAAA,6CAUpBhB,WAAW,CAACgB,GAAG,CAACC,GAAJ,CAAQb,MAAR,EAAgBc,GAAhB,CAAoBL,mBAApB,CAAD,EAA2CV,WAA3C,CAVS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAApBI,oBAAoB;AAAA;AAAA;AAAA,GAA1B;;AAaA,eAAe,SAASY,oBAAT,GAAgC;AAAA;;AAC7C,MAAMC,YAAY,GAAGlB,eAAe,EAApC;AACA,MAAMO,WAAqB,GAAGX,sBAAsB,CAACsB,YAAD,CAApD;AACA,MAAMV,YAAsB,GAAGX,eAAe,CAACqB,YAAD,CAA9C;AAEA,MAAMC,WAAW,GAAG,CAAC,CAACZ,WAAF,IAAiB,CAAC,CAACC,YAAvC;AACA,SAAOT,MAAM,CACXoB,WAAW,GAAG,CAAC,mBAAD,EAAsBZ,WAAtB,EAAmCC,YAAnC,CAAH,GAAsD,IADtD,EAEXH,oBAFW,CAAb;AAID;;GAVuBY,oB;UACDjB,e,EACSJ,sB,EACCC,e,EAGxBE,M","sourcesContent":["import { BigNumber } from \"@ethersproject/bignumber\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport useComptrollerContract from \"hooks/contracts/useComptrollerContract\";\nimport useUserContract from \"hooks/contracts/useUserContract\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport useSWR from \"swr\";\nimport useReadProvider from \"hooks/useReadProvider\";\n\nconst offsetPower = 18;\nconst offset = BigNumber.from(10).pow(offsetPower);\n\nconst getUnionPerDAIStaked = async (\n  _: any,\n  comptroller: Contract,\n  userContract: Contract\n) => {\n  const totalStaked: BigNumber = await userContract.totalStaked();\n  const totalFrozen: BigNumber = await userContract.totalFrozen();\n  const effectiveTotalStake: BigNumber = totalStaked.sub(totalFrozen);\n  const ipb = await comptroller.inflationPerBlock(effectiveTotalStake);\n\n  return formatUnits(ipb.mul(offset).div(effectiveTotalStake), offsetPower);\n};\n\nexport default function useUnionPerDAIStaked() {\n  const readProvider = useReadProvider();\n  const comptroller: Contract = useComptrollerContract(readProvider);\n  const userContract: Contract = useUserContract(readProvider);\n\n  const shouldFetch = !!comptroller && !!userContract;\n  return useSWR(\n    shouldFetch ? [\"unionPerDAIStaked\", comptroller, userContract] : null,\n    getUnionPerDAIStaked\n  );\n}\n"]},"metadata":{},"sourceType":"module"}