{"ast":null,"code":"import { Contract } from \"@ethersproject/contracts\";\nimport { parseUnits } from \"@ethersproject/units\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport useERC20Contract from \"hooks/contracts/useERC20Contract\";\nimport useCurrentToken from \"hooks/useCurrentToken\";\nimport { useCallback } from \"react\";\nimport USER_MANAGER_ABI from \"constants/abis/userManager.json\";\nimport useMarketRegistryContract from \"../contracts/useMarketRegistryContract\";\nimport { makeTxWithGasEstimate } from \"../../util/gasEstimation\";\nimport usePermits from \"hooks/usePermits\";\nimport { APPROVE_DAI_DEPOSIT_SIGNATURE_KEY } from \"constants/app\";\nexport default function useStakeDeposit() {\n  const {\n    account,\n    chainId,\n    library\n  } = useWeb3React();\n  const marketRegistryContract = useMarketRegistryContract();\n  const DAI = useCurrentToken();\n  const DAIContract = useERC20Contract(DAI);\n  const {\n    getPermit\n  } = usePermits();\n  const permit = getPermit(APPROVE_DAI_DEPOSIT_SIGNATURE_KEY);\n  return useCallback(async amount => {\n    const signer = library.getSigner();\n    const res = await marketRegistryContract.tokens(DAI);\n    const userManagerAddress = res.userManager;\n    const userManagerContract = new Contract(userManagerAddress, USER_MANAGER_ABI, signer);\n    const stakeAmount = parseUnits(String(amount), 18); // if we have a valid permit use that to stake\n\n    if (permit) {\n      if (chainId == 1) {\n        return makeTxWithGasEstimate(userManagerContract, \"stakeWithPermit\", [stakeAmount.toString(), permit.nonce, permit.expiry, permit.v, permit.r, permit.s]);\n      } else {\n        return makeTxWithGasEstimate(userManagerContract, \"stakeWithERC20Permit\", [stakeAmount.toString(), permit.deadline, permit.v, permit.r, permit.s]);\n      }\n    }\n\n    const allowance = await DAIContract.allowance(account, userManagerAddress);\n\n    if (allowance.lt(stakeAmount)) {\n      throw new Error(\"Allowance not enough\");\n    }\n\n    return makeTxWithGasEstimate(userManagerContract, \"stake\", [stakeAmount]);\n  }, [account, chainId, DAI, DAIContract, marketRegistryContract, permit]);\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/payables/useStakeDeposit.ts"],"names":["Contract","parseUnits","useWeb3React","useERC20Contract","useCurrentToken","useCallback","USER_MANAGER_ABI","useMarketRegistryContract","makeTxWithGasEstimate","usePermits","APPROVE_DAI_DEPOSIT_SIGNATURE_KEY","useStakeDeposit","account","chainId","library","marketRegistryContract","DAI","DAIContract","getPermit","permit","amount","signer","getSigner","res","tokens","userManagerAddress","userManager","userManagerContract","stakeAmount","String","toString","nonce","expiry","v","r","s","deadline","allowance","lt","Error"],"mappings":"AAAA,SAASA,QAAT,QAAyB,0BAAzB;AAEA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,gBAAP,MAA6B,kCAA7B;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,OAAOC,yBAAP,MAAsC,wCAAtC;AACA,SAASC,qBAAT,QAAsC,0BAAtC;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAASC,iCAAT,QAAkD,eAAlD;AAEA,eAAe,SAASC,eAAT,GAA2B;AACxC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA;AAApB,MAAgCZ,YAAY,EAAlD;AACA,QAAMa,sBAAsB,GAAGR,yBAAyB,EAAxD;AACA,QAAMS,GAAG,GAAGZ,eAAe,EAA3B;AACA,QAAMa,WAAW,GAAGd,gBAAgB,CAACa,GAAD,CAApC;AACA,QAAM;AAAEE,IAAAA;AAAF,MAAgBT,UAAU,EAAhC;AAEA,QAAMU,MAAM,GAAGD,SAAS,CAACR,iCAAD,CAAxB;AAEA,SAAOL,WAAW,CAChB,MAAOe,MAAP,IAAiE;AAC/D,UAAMC,MAAM,GAAGP,OAAO,CAACQ,SAAR,EAAf;AACA,UAAMC,GAAG,GAAG,MAAMR,sBAAsB,CAACS,MAAvB,CAA8BR,GAA9B,CAAlB;AACA,UAAMS,kBAAkB,GAAGF,GAAG,CAACG,WAA/B;AACA,UAAMC,mBAAmB,GAAG,IAAI3B,QAAJ,CAC1ByB,kBAD0B,EAE1BnB,gBAF0B,EAG1Be,MAH0B,CAA5B;AAKA,UAAMO,WAAW,GAAG3B,UAAU,CAAC4B,MAAM,CAACT,MAAD,CAAP,EAAiB,EAAjB,CAA9B,CAT+D,CAW/D;;AACA,QAAID,MAAJ,EAAY;AACV,UAAIN,OAAO,IAAI,CAAf,EAAkB;AAChB,eAAOL,qBAAqB,CAACmB,mBAAD,EAAsB,iBAAtB,EAAyC,CACnEC,WAAW,CAACE,QAAZ,EADmE,EAEnEX,MAAM,CAACY,KAF4D,EAGnEZ,MAAM,CAACa,MAH4D,EAInEb,MAAM,CAACc,CAJ4D,EAKnEd,MAAM,CAACe,CAL4D,EAMnEf,MAAM,CAACgB,CAN4D,CAAzC,CAA5B;AAQD,OATD,MASO;AACL,eAAO3B,qBAAqB,CAC1BmB,mBAD0B,EAE1B,sBAF0B,EAG1B,CACEC,WAAW,CAACE,QAAZ,EADF,EAEEX,MAAM,CAACiB,QAFT,EAGEjB,MAAM,CAACc,CAHT,EAIEd,MAAM,CAACe,CAJT,EAKEf,MAAM,CAACgB,CALT,CAH0B,CAA5B;AAWD;AACF;;AAED,UAAME,SAAS,GAAG,MAAMpB,WAAW,CAACoB,SAAZ,CACtBzB,OADsB,EAEtBa,kBAFsB,CAAxB;;AAKA,QAAIY,SAAS,CAACC,EAAV,CAAaV,WAAb,CAAJ,EAA+B;AAC7B,YAAM,IAAIW,KAAJ,CAAU,sBAAV,CAAN;AACD;;AAED,WAAO/B,qBAAqB,CAACmB,mBAAD,EAAsB,OAAtB,EAA+B,CAACC,WAAD,CAA/B,CAA5B;AACD,GAhDe,EAiDhB,CAAChB,OAAD,EAAUC,OAAV,EAAmBG,GAAnB,EAAwBC,WAAxB,EAAqCF,sBAArC,EAA6DI,MAA7D,CAjDgB,CAAlB;AAmDD","sourcesContent":["import { Contract } from \"@ethersproject/contracts\";\nimport type { TransactionResponse } from \"@ethersproject/providers\";\nimport { parseUnits } from \"@ethersproject/units\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport useERC20Contract from \"hooks/contracts/useERC20Contract\";\nimport useCurrentToken from \"hooks/useCurrentToken\";\nimport { useCallback } from \"react\";\nimport USER_MANAGER_ABI from \"constants/abis/userManager.json\";\nimport useMarketRegistryContract from \"../contracts/useMarketRegistryContract\";\nimport { makeTxWithGasEstimate } from \"../../util/gasEstimation\";\nimport usePermits from \"hooks/usePermits\";\nimport { APPROVE_DAI_DEPOSIT_SIGNATURE_KEY } from \"constants/app\";\n\nexport default function useStakeDeposit() {\n  const { account, chainId, library } = useWeb3React();\n  const marketRegistryContract = useMarketRegistryContract();\n  const DAI = useCurrentToken();\n  const DAIContract = useERC20Contract(DAI);\n  const { getPermit } = usePermits();\n\n  const permit = getPermit(APPROVE_DAI_DEPOSIT_SIGNATURE_KEY);\n\n  return useCallback(\n    async (amount: number | string): Promise<TransactionResponse> => {\n      const signer = library.getSigner();\n      const res = await marketRegistryContract.tokens(DAI);\n      const userManagerAddress = res.userManager;\n      const userManagerContract = new Contract(\n        userManagerAddress,\n        USER_MANAGER_ABI,\n        signer\n      );\n      const stakeAmount = parseUnits(String(amount), 18);\n\n      // if we have a valid permit use that to stake\n      if (permit) {\n        if (chainId == 1) {\n          return makeTxWithGasEstimate(userManagerContract, \"stakeWithPermit\", [\n            stakeAmount.toString(),\n            permit.nonce,\n            permit.expiry,\n            permit.v,\n            permit.r,\n            permit.s,\n          ]);\n        } else {\n          return makeTxWithGasEstimate(\n            userManagerContract,\n            \"stakeWithERC20Permit\",\n            [\n              stakeAmount.toString(),\n              permit.deadline,\n              permit.v,\n              permit.r,\n              permit.s,\n            ]\n          );\n        }\n      }\n\n      const allowance = await DAIContract.allowance(\n        account,\n        userManagerAddress\n      );\n\n      if (allowance.lt(stakeAmount)) {\n        throw new Error(\"Allowance not enough\");\n      }\n\n      return makeTxWithGasEstimate(userManagerContract, \"stake\", [stakeAmount]);\n    },\n    [account, chainId, DAI, DAIContract, marketRegistryContract, permit]\n  );\n}\n"]},"metadata":{},"sourceType":"module"}