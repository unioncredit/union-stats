{"ast":null,"code":"import usePureTokenAdapterContract from \"hooks/contracts/usePureTokenAdapterContract\";\nimport useDAIDecimals from \"hooks/useDAIDecimals\";\nimport useChainId from \"hooks/useChainId\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { TOKENS } from \"constants/variables\";\nimport useSWR from \"swr\";\nimport useReadProvider from \"hooks/useReadProvider\";\n\nconst getDAIInPureAdapter = pureAdapter => async (_, decimals, daiAddress) => {\n  const daiInPureAdapter = await pureAdapter.getSupplyView(daiAddress);\n  return formatUnits(daiInPureAdapter, decimals);\n};\n\nexport default function useDAIInPureAdapter() {\n  const readProvider = useReadProvider();\n  const pureAdapter = usePureTokenAdapterContract(readProvider);\n  const {\n    data: decimals\n  } = useDAIDecimals();\n  const chainId = useChainId();\n  const shouldFetch = !!pureAdapter && chainId && TOKENS[chainId] && TOKENS[chainId].DAI;\n  return useSWR(shouldFetch ? [\"daiInPureAdapter\", decimals, TOKENS[chainId].DAI] : null, getDAIInPureAdapter(pureAdapter));\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/union/union-stats/union-stats/hooks/stats/assetManagerStats/useDAIInPureAdapter.ts"],"names":["usePureTokenAdapterContract","useDAIDecimals","useChainId","formatUnits","TOKENS","useSWR","useReadProvider","getDAIInPureAdapter","pureAdapter","_","decimals","daiAddress","daiInPureAdapter","getSupplyView","useDAIInPureAdapter","readProvider","data","chainId","shouldFetch","DAI"],"mappings":"AAAA,OAAOA,2BAAP,MAAwC,6CAAxC;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AAGA,SAASC,MAAT,QAAuB,qBAAvB;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,eAAP,MAA4B,uBAA5B;;AAEA,MAAMC,mBAAmB,GACtBC,WAAD,IACA,OAAOC,CAAP,EAAeC,QAAf,EAAoCC,UAApC,KAA2D;AACzD,QAAMC,gBAA2B,GAAG,MAAMJ,WAAW,CAACK,aAAZ,CACxCF,UADwC,CAA1C;AAGA,SAAOR,WAAW,CAACS,gBAAD,EAAmBF,QAAnB,CAAlB;AACD,CAPH;;AASA,eAAe,SAASI,mBAAT,GAA+B;AAC5C,QAAMC,YAAY,GAAGT,eAAe,EAApC;AACA,QAAME,WAAqB,GAAGR,2BAA2B,CAACe,YAAD,CAAzD;AACA,QAAM;AAAEC,IAAAA,IAAI,EAAEN;AAAR,MAAqBT,cAAc,EAAzC;AACA,QAAMgB,OAAO,GAAGf,UAAU,EAA1B;AAEA,QAAMgB,WAAW,GACf,CAAC,CAACV,WAAF,IAAiBS,OAAjB,IAA4Bb,MAAM,CAACa,OAAD,CAAlC,IAA+Cb,MAAM,CAACa,OAAD,CAAN,CAAgBE,GADjE;AAEA,SAAOd,MAAM,CACXa,WAAW,GAAG,CAAC,kBAAD,EAAqBR,QAArB,EAA+BN,MAAM,CAACa,OAAD,CAAN,CAAgBE,GAA/C,CAAH,GAAyD,IADzD,EAEXZ,mBAAmB,CAACC,WAAD,CAFR,CAAb;AAID","sourcesContent":["import usePureTokenAdapterContract from \"hooks/contracts/usePureTokenAdapterContract\";\nimport useDAIDecimals from \"hooks/useDAIDecimals\";\nimport useChainId from \"hooks/useChainId\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { TOKENS } from \"constants/variables\";\nimport useSWR from \"swr\";\nimport useReadProvider from \"hooks/useReadProvider\";\n\nconst getDAIInPureAdapter =\n  (pureAdapter: Contract) =>\n  async (_: any, decimals: BigNumber, daiAddress: String) => {\n    const daiInPureAdapter: BigNumber = await pureAdapter.getSupplyView(\n      daiAddress\n    );\n    return formatUnits(daiInPureAdapter, decimals);\n  };\n\nexport default function useDAIInPureAdapter() {\n  const readProvider = useReadProvider();\n  const pureAdapter: Contract = usePureTokenAdapterContract(readProvider);\n  const { data: decimals } = useDAIDecimals();\n  const chainId = useChainId();\n\n  const shouldFetch =\n    !!pureAdapter && chainId && TOKENS[chainId] && TOKENS[chainId].DAI;\n  return useSWR(\n    shouldFetch ? [\"daiInPureAdapter\", decimals, TOKENS[chainId].DAI] : null,\n    getDAIInPureAdapter(pureAdapter)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}