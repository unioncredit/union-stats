{"ast":null,"code":"import { parseUnits } from \"@ethersproject/units\";\nimport useCurrentToken from \"hooks/useCurrentToken\";\nimport { useCallback } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport USER_MANAGER_ABI from \"constants/abis/userManager.json\";\nimport useMarketRegistryContract from \"../contracts/useMarketRegistryContract\";\nexport default function useAdjustTrust() {\n  const tokenAddress = useCurrentToken();\n  const {\n    library\n  } = useWeb3React();\n  const marketRegistryContract = useMarketRegistryContract();\n  return useCallback(async (memberAddress, amount) => {\n    const trustAmount = parseUnits(String(amount), 18);\n    let gasLimit, userManagerContract;\n\n    try {\n      const signer = library.getSigner();\n      const res = await marketRegistryContract.tokens(tokenAddress);\n      const userManagerAddress = res.userManager;\n      userManagerContract = new Contract(userManagerAddress, USER_MANAGER_ABI, signer);\n      gasLimit = await userManagerContract.estimateGas.updateTrust(memberAddress, trustAmount.toString());\n    } catch (err) {\n      gasLimit = 300000;\n    }\n\n    return userManagerContract.updateTrust(memberAddress, trustAmount.toString(), {\n      gasLimit\n    });\n  }, [library, marketRegistryContract, tokenAddress]);\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/payables/useAdjustTrust.ts"],"names":["parseUnits","useCurrentToken","useCallback","useWeb3React","Contract","USER_MANAGER_ABI","useMarketRegistryContract","useAdjustTrust","tokenAddress","library","marketRegistryContract","memberAddress","amount","trustAmount","String","gasLimit","userManagerContract","signer","getSigner","res","tokens","userManagerAddress","userManager","estimateGas","updateTrust","toString","err"],"mappings":"AACA,SAASA,UAAT,QAA2B,sBAA3B;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,OAAOC,yBAAP,MAAsC,wCAAtC;AAEA,eAAe,SAASC,cAAT,GAA0B;AACvC,QAAMC,YAAY,GAAGP,eAAe,EAApC;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAcN,YAAY,EAAhC;AACA,QAAMO,sBAAsB,GAAGJ,yBAAyB,EAAxD;AAEA,SAAOJ,WAAW,CAChB,OACES,aADF,EAEEC,MAFF,KAGmC;AACjC,UAAMC,WAAW,GAAGb,UAAU,CAACc,MAAM,CAACF,MAAD,CAAP,EAAiB,EAAjB,CAA9B;AAEA,QAAIG,QAAJ,EAAmBC,mBAAnB;;AACA,QAAI;AACF,YAAMC,MAAM,GAAGR,OAAO,CAACS,SAAR,EAAf;AACA,YAAMC,GAAG,GAAG,MAAMT,sBAAsB,CAACU,MAAvB,CAA8BZ,YAA9B,CAAlB;AACA,YAAMa,kBAAkB,GAAGF,GAAG,CAACG,WAA/B;AACAN,MAAAA,mBAAmB,GAAG,IAAIZ,QAAJ,CACpBiB,kBADoB,EAEpBhB,gBAFoB,EAGpBY,MAHoB,CAAtB;AAMAF,MAAAA,QAAQ,GAAG,MAAMC,mBAAmB,CAACO,WAApB,CAAgCC,WAAhC,CACfb,aADe,EAEfE,WAAW,CAACY,QAAZ,EAFe,CAAjB;AAID,KAdD,CAcE,OAAOC,GAAP,EAAY;AACZX,MAAAA,QAAQ,GAAG,MAAX;AACD;;AAED,WAAOC,mBAAmB,CAACQ,WAApB,CACLb,aADK,EAELE,WAAW,CAACY,QAAZ,EAFK,EAGL;AACEV,MAAAA;AADF,KAHK,CAAP;AAOD,GAjCe,EAkChB,CAACN,OAAD,EAAUC,sBAAV,EAAkCF,YAAlC,CAlCgB,CAAlB;AAoCD","sourcesContent":["import type { TransactionResponse } from \"@ethersproject/providers\";\nimport { parseUnits } from \"@ethersproject/units\";\nimport useCurrentToken from \"hooks/useCurrentToken\";\nimport { useCallback } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport USER_MANAGER_ABI from \"constants/abis/userManager.json\";\nimport useMarketRegistryContract from \"../contracts/useMarketRegistryContract\";\n\nexport default function useAdjustTrust() {\n  const tokenAddress = useCurrentToken();\n  const { library } = useWeb3React();\n  const marketRegistryContract = useMarketRegistryContract();\n\n  return useCallback(\n    async (\n      memberAddress: string,\n      amount: number | string\n    ): Promise<TransactionResponse> => {\n      const trustAmount = parseUnits(String(amount), 18);\n\n      let gasLimit: any, userManagerContract: Contract;\n      try {\n        const signer = library.getSigner();\n        const res = await marketRegistryContract.tokens(tokenAddress);\n        const userManagerAddress = res.userManager;\n        userManagerContract = new Contract(\n          userManagerAddress,\n          USER_MANAGER_ABI,\n          signer\n        );\n\n        gasLimit = await userManagerContract.estimateGas.updateTrust(\n          memberAddress,\n          trustAmount.toString()\n        );\n      } catch (err) {\n        gasLimit = 300000;\n      }\n\n      return userManagerContract.updateTrust(\n        memberAddress,\n        trustAmount.toString(),\n        {\n          gasLimit,\n        }\n      );\n    },\n    [library, marketRegistryContract, tokenAddress]\n  );\n}\n"]},"metadata":{},"sourceType":"module"}