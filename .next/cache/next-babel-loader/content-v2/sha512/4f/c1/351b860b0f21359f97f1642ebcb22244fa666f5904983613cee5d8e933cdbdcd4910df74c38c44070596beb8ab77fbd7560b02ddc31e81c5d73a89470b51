{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/mathewstokes/Desktop/stats-app/components-ui/UnwrapButton.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useState } from \"react\";\nimport { Button } from \"@unioncredit/ui\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { formatEther } from \"@ethersproject/units\";\nimport handleTxError from \"util/handleTxError\";\nimport activityLabels from \"util/activityLabels\";\nimport { addToast, FLAVORS } from \"hooks/useToast\";\nimport { useAddActivity } from \"hooks/data/useActivity\";\nimport useUnwrapUnion from \"hooks/payables/useUnwrapUnion\";\nimport useUnionSymbol from \"hooks/useUnionSymbol\";\nimport format from \"util/formatValue\";\nimport { TOKENS } from \"constants/variables\";\nimport isHash from \"util/isHash\";\nimport getReceipt from \"util/getReceipt\";\nimport useTokenBalance from \"hooks/data/useTokenBalance\";\nexport const UnwrapButton = (_ref) => {\n  var _TOKENS$chainId;\n\n  let {\n    onComplete\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"onComplete\"]);\n\n  const unwrap = useUnwrapUnion();\n  const addActivity = useAddActivity();\n  const {\n    library,\n    chainId\n  } = useWeb3React();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    data: unionSymbol\n  } = useUnionSymbol();\n  const {\n    data: balance\n  } = useTokenBalance((_TOKENS$chainId = TOKENS[chainId]) === null || _TOKENS$chainId === void 0 ? void 0 : _TOKENS$chainId.WRAPPED_UNION);\n  const displayBalance = format(formatEther(balance), 4);\n\n  const handleUnwrap = async () => {\n    if (balance !== null && balance !== void 0 && balance.lte(\"0\")) {\n      addToast(FLAVORS.ERROR(\"No tokens to unwrap\"));\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const {\n        hash\n      } = await unwrap(balance);\n      await getReceipt(hash, library, {\n        pending: `Unwrapping ${displayBalance} ${unionSymbol}`,\n        success: `Unwrapped ${displayBalance} ${unionSymbol}`\n      });\n      addActivity(activityLabels.unwrap({\n        balance,\n        hash\n      }));\n      setLoading(false);\n\n      if (typeof onComplete === \"function\") {\n        await onComplete();\n      }\n    } catch (err) {\n      setLoading(false);\n      const hash = isHash(err.message) && err.message;\n      addActivity(activityLabels.unwrap({\n        balance,\n        hash\n      }, true));\n      handleTxError(err, `Failed to unwrap ${unionSymbol}`);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Button, _objectSpread(_objectSpread({}, props), {}, {\n    onClick: handleUnwrap,\n    loading: loading\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 10\n  }, this);\n};","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/components-ui/UnwrapButton.js"],"names":["useState","Button","useWeb3React","formatEther","handleTxError","activityLabels","addToast","FLAVORS","useAddActivity","useUnwrapUnion","useUnionSymbol","format","TOKENS","isHash","getReceipt","useTokenBalance","UnwrapButton","onComplete","props","unwrap","addActivity","library","chainId","loading","setLoading","data","unionSymbol","balance","WRAPPED_UNION","displayBalance","handleUnwrap","lte","ERROR","hash","pending","success","err","message"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { Button } from \"@unioncredit/ui\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { formatEther } from \"@ethersproject/units\";\n\nimport handleTxError from \"util/handleTxError\";\nimport activityLabels from \"util/activityLabels\";\nimport { addToast, FLAVORS } from \"hooks/useToast\";\nimport { useAddActivity } from \"hooks/data/useActivity\";\nimport useUnwrapUnion from \"hooks/payables/useUnwrapUnion\";\nimport useUnionSymbol from \"hooks/useUnionSymbol\";\nimport format from \"util/formatValue\";\nimport { TOKENS } from \"constants/variables\";\nimport isHash from \"util/isHash\";\nimport getReceipt from \"util/getReceipt\";\nimport useTokenBalance from \"hooks/data/useTokenBalance\";\n\nexport const UnwrapButton = ({ onComplete, ...props }) => {\n  const unwrap = useUnwrapUnion();\n  const addActivity = useAddActivity();\n  const { library, chainId } = useWeb3React();\n  const [loading, setLoading] = useState(false);\n  const { data: unionSymbol } = useUnionSymbol();\n  const { data: balance } = useTokenBalance(TOKENS[chainId]?.WRAPPED_UNION);\n\n  const displayBalance = format(formatEther(balance), 4);\n\n  const handleUnwrap = async () => {\n    if (balance?.lte(\"0\")) {\n      addToast(FLAVORS.ERROR(\"No tokens to unwrap\"));\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const { hash } = await unwrap(balance);\n      await getReceipt(hash, library, {\n        pending: `Unwrapping ${displayBalance} ${unionSymbol}`,\n        success: `Unwrapped ${displayBalance} ${unionSymbol}`,\n      });\n      addActivity(activityLabels.unwrap({ balance, hash }));\n      setLoading(false);\n      if (typeof onComplete === \"function\") {\n        await onComplete();\n      }\n    } catch (err) {\n      setLoading(false);\n      const hash = isHash(err.message) && err.message;\n      addActivity(activityLabels.unwrap({ balance, hash }, true));\n      handleTxError(err, `Failed to unwrap ${unionSymbol}`);\n    }\n  };\n\n  return <Button {...props} onClick={handleUnwrap} loading={loading} />;\n};\n"]},"metadata":{},"sourceType":"module"}