{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport useSWR from \"swr\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { MaxUint256 } from \"@ethersproject/constants\";\nimport { useCallback } from \"react\";\nimport useERC20Contract from \"hooks/contracts/useERC20Contract\";\nimport usePermits from \"hooks/usePermits\";\nimport getReceipt from \"util/getReceipt\";\nimport { useAddActivity } from \"hooks/data/useActivity\";\nimport activityLabels from \"util/activityLabels\";\nimport truncateAddress from \"util/truncateAddress\";\nimport handleTxError from \"util/handleTxError\";\nimport isHash from \"util/isHash\";\n\nconst getAllowance = (_, contract, account, spender) => {\n  return contract.allowance(account, spender);\n};\n\nexport default function useAllowance(tokenAddress, spender, signatureKey) {\n  const {\n    signPermit\n  } = usePermits();\n  const addActivity = useAddActivity();\n  const {\n    account,\n    chainId,\n    library\n  } = useWeb3React();\n  const contract = useERC20Contract(tokenAddress);\n  const shouldFetch = !!contract && typeof account === \"string\" && typeof chainId === \"number\";\n  const resp = useSWR(shouldFetch ? [\"Allowance\", contract, account, spender] : null, getAllowance);\n\n  const approve = async () => {\n    try {\n      const {\n        hash\n      } = await contract.approve(spender, MaxUint256);\n      await getReceipt(hash, library, {\n        pending: \"Approving\",\n        success: \"Approved\"\n      });\n      addActivity(activityLabels.claim({\n        hash,\n        token: truncateAddress(tokenAddress)\n      }));\n    } catch (err) {\n      const hash = isHash(err.message) && err.message;\n      addActivity(activityLabels.claim({\n        hash,\n        token: truncateAddress(tokenAddress)\n      }), true);\n      handleTxError(err, \"Failed to approve\");\n    }\n  };\n\n  const approveWithSignature = useCallback(async (amount, permitType) => {\n    await signPermit(signatureKey, tokenAddress, spender, amount, permitType);\n  }, []);\n  return _objectSpread(_objectSpread({}, resp), {}, {\n    approve,\n    approveWithSignature\n  });\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/useAllowance.js"],"names":["useSWR","useWeb3React","MaxUint256","useCallback","useERC20Contract","usePermits","getReceipt","useAddActivity","activityLabels","truncateAddress","handleTxError","isHash","getAllowance","_","contract","account","spender","allowance","useAllowance","tokenAddress","signatureKey","signPermit","addActivity","chainId","library","shouldFetch","resp","approve","hash","pending","success","claim","token","err","message","approveWithSignature","amount","permitType"],"mappings":";;;;;;AAAA,OAAOA,MAAP,MAAmB,KAAnB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AAEA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,OAAOC,gBAAP,MAA6B,kCAA7B;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,SAASC,cAAT,QAA+B,wBAA/B;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AACA,OAAOC,eAAP,MAA4B,sBAA5B;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,MAAP,MAAmB,aAAnB;;AAEA,MAAMC,YAAY,GAAG,CAACC,CAAD,EAAIC,QAAJ,EAAcC,OAAd,EAAuBC,OAAvB,KAAmC;AACtD,SAAOF,QAAQ,CAACG,SAAT,CAAmBF,OAAnB,EAA4BC,OAA5B,CAAP;AACD,CAFD;;AAIA,eAAe,SAASE,YAAT,CAAsBC,YAAtB,EAAoCH,OAApC,EAA6CI,YAA7C,EAA2D;AACxE,QAAM;AAAEC,IAAAA;AAAF,MAAiBhB,UAAU,EAAjC;AACA,QAAMiB,WAAW,GAAGf,cAAc,EAAlC;AACA,QAAM;AAAEQ,IAAAA,OAAF;AAAWQ,IAAAA,OAAX;AAAoBC,IAAAA;AAApB,MAAgCvB,YAAY,EAAlD;AAEA,QAAMa,QAAQ,GAAGV,gBAAgB,CAACe,YAAD,CAAjC;AAEA,QAAMM,WAAW,GACf,CAAC,CAACX,QAAF,IAAc,OAAOC,OAAP,KAAmB,QAAjC,IAA6C,OAAOQ,OAAP,KAAmB,QADlE;AAGA,QAAMG,IAAI,GAAG1B,MAAM,CACjByB,WAAW,GAAG,CAAC,WAAD,EAAcX,QAAd,EAAwBC,OAAxB,EAAiCC,OAAjC,CAAH,GAA+C,IADzC,EAEjBJ,YAFiB,CAAnB;;AAKA,QAAMe,OAAO,GAAG,YAAY;AAC1B,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMd,QAAQ,CAACa,OAAT,CAAiBX,OAAjB,EAA0Bd,UAA1B,CAAvB;AACA,YAAMI,UAAU,CAACsB,IAAD,EAAOJ,OAAP,EAAgB;AAC9BK,QAAAA,OAAO,EAAE,WADqB;AAE9BC,QAAAA,OAAO,EAAE;AAFqB,OAAhB,CAAhB;AAIAR,MAAAA,WAAW,CACTd,cAAc,CAACuB,KAAf,CAAqB;AAAEH,QAAAA,IAAF;AAAQI,QAAAA,KAAK,EAAEvB,eAAe,CAACU,YAAD;AAA9B,OAArB,CADS,CAAX;AAGD,KATD,CASE,OAAOc,GAAP,EAAY;AACZ,YAAML,IAAI,GAAGjB,MAAM,CAACsB,GAAG,CAACC,OAAL,CAAN,IAAuBD,GAAG,CAACC,OAAxC;AACAZ,MAAAA,WAAW,CACTd,cAAc,CAACuB,KAAf,CAAqB;AAAEH,QAAAA,IAAF;AAAQI,QAAAA,KAAK,EAAEvB,eAAe,CAACU,YAAD;AAA9B,OAArB,CADS,EAET,IAFS,CAAX;AAIAT,MAAAA,aAAa,CAACuB,GAAD,EAAM,mBAAN,CAAb;AACD;AACF,GAlBD;;AAoBA,QAAME,oBAAoB,GAAGhC,WAAW,CAAC,OAAOiC,MAAP,EAAeC,UAAf,KAA8B;AACrE,UAAMhB,UAAU,CAACD,YAAD,EAAeD,YAAf,EAA6BH,OAA7B,EAAsCoB,MAAtC,EAA8CC,UAA9C,CAAhB;AACD,GAFuC,EAErC,EAFqC,CAAxC;AAIA,yCAAYX,IAAZ;AAAkBC,IAAAA,OAAlB;AAA2BQ,IAAAA;AAA3B;AACD","sourcesContent":["import useSWR from \"swr\";\nimport { useWeb3React } from \"@web3-react/core\";\n\nimport { MaxUint256 } from \"@ethersproject/constants\";\nimport { useCallback } from \"react\";\nimport useERC20Contract from \"hooks/contracts/useERC20Contract\";\nimport usePermits from \"hooks/usePermits\";\nimport getReceipt from \"util/getReceipt\";\nimport { useAddActivity } from \"hooks/data/useActivity\";\nimport activityLabels from \"util/activityLabels\";\nimport truncateAddress from \"util/truncateAddress\";\nimport handleTxError from \"util/handleTxError\";\nimport isHash from \"util/isHash\";\n\nconst getAllowance = (_, contract, account, spender) => {\n  return contract.allowance(account, spender);\n};\n\nexport default function useAllowance(tokenAddress, spender, signatureKey) {\n  const { signPermit } = usePermits();\n  const addActivity = useAddActivity();\n  const { account, chainId, library } = useWeb3React();\n\n  const contract = useERC20Contract(tokenAddress);\n\n  const shouldFetch =\n    !!contract && typeof account === \"string\" && typeof chainId === \"number\";\n\n  const resp = useSWR(\n    shouldFetch ? [\"Allowance\", contract, account, spender] : null,\n    getAllowance\n  );\n\n  const approve = async () => {\n    try {\n      const { hash } = await contract.approve(spender, MaxUint256);\n      await getReceipt(hash, library, {\n        pending: \"Approving\",\n        success: \"Approved\",\n      });\n      addActivity(\n        activityLabels.claim({ hash, token: truncateAddress(tokenAddress) })\n      );\n    } catch (err) {\n      const hash = isHash(err.message) && err.message;\n      addActivity(\n        activityLabels.claim({ hash, token: truncateAddress(tokenAddress) }),\n        true\n      );\n      handleTxError(err, \"Failed to approve\");\n    }\n  };\n\n  const approveWithSignature = useCallback(async (amount, permitType) => {\n    await signPermit(signatureKey, tokenAddress, spender, amount, permitType);\n  }, []);\n\n  return { ...resp, approve, approveWithSignature };\n}\n"]},"metadata":{},"sourceType":"module"}