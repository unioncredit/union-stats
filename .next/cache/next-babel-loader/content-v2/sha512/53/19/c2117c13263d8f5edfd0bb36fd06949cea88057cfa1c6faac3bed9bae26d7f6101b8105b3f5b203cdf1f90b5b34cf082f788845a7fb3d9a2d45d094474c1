{"ast":null,"code":"import { useEffect } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { injected } from \"lib/connectors\";\nexport default function useInactiveListener(suppress = false) {\n  const {\n    active,\n    error,\n    activate\n  } = useWeb3React();\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleConnect = () => {\n        activate(injected);\n      };\n\n      const handleChainChanged = () => {\n        activate(injected);\n      };\n\n      const handleAccountsChanged = accounts => {\n        if (accounts.length > 0) {\n          activate(injected);\n        }\n      };\n\n      const handleNetworkChanged = () => {\n        activate(injected);\n      };\n\n      ethereum.on(\"connect\", handleConnect);\n      ethereum.on(\"chainChanged\", handleChainChanged);\n      ethereum.on(\"accountsChanged\", handleAccountsChanged);\n      ethereum.on(\"networkChanged\", handleNetworkChanged);\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener(\"connect\", handleConnect);\n          ethereum.removeListener(\"chainChanged\", handleChainChanged);\n          ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n          ethereum.removeListener(\"networkChanged\", handleNetworkChanged);\n        }\n      };\n    }\n  }, [active, error, suppress, activate]);\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/useInactiveListener.js"],"names":["useEffect","useWeb3React","injected","useInactiveListener","suppress","active","error","activate","ethereum","window","on","handleConnect","handleChainChanged","handleAccountsChanged","accounts","length","handleNetworkChanged","removeListener"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,eAAe,SAASC,mBAAT,CAA6BC,QAAQ,GAAG,KAAxC,EAA+C;AAC5D,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,MAA8BN,YAAY,EAAhD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AAAEQ,MAAAA;AAAF,QAAeC,MAArB;;AACA,QAAID,QAAQ,IAAIA,QAAQ,CAACE,EAArB,IAA2B,CAACL,MAA5B,IAAsC,CAACC,KAAvC,IAAgD,CAACF,QAArD,EAA+D;AAC7D,YAAMO,aAAa,GAAG,MAAM;AAC1BJ,QAAAA,QAAQ,CAACL,QAAD,CAAR;AACD,OAFD;;AAGA,YAAMU,kBAAkB,GAAG,MAAM;AAC/BL,QAAAA,QAAQ,CAACL,QAAD,CAAR;AACD,OAFD;;AAGA,YAAMW,qBAAqB,GAAIC,QAAD,IAAc;AAC1C,YAAIA,QAAQ,CAACC,MAAT,GAAkB,CAAtB,EAAyB;AACvBR,UAAAA,QAAQ,CAACL,QAAD,CAAR;AACD;AACF,OAJD;;AAKA,YAAMc,oBAAoB,GAAG,MAAM;AACjCT,QAAAA,QAAQ,CAACL,QAAD,CAAR;AACD,OAFD;;AAIAM,MAAAA,QAAQ,CAACE,EAAT,CAAY,SAAZ,EAAuBC,aAAvB;AACAH,MAAAA,QAAQ,CAACE,EAAT,CAAY,cAAZ,EAA4BE,kBAA5B;AACAJ,MAAAA,QAAQ,CAACE,EAAT,CAAY,iBAAZ,EAA+BG,qBAA/B;AACAL,MAAAA,QAAQ,CAACE,EAAT,CAAY,gBAAZ,EAA8BM,oBAA9B;AAEA,aAAO,MAAM;AACX,YAAIR,QAAQ,CAACS,cAAb,EAA6B;AAC3BT,UAAAA,QAAQ,CAACS,cAAT,CAAwB,SAAxB,EAAmCN,aAAnC;AACAH,UAAAA,QAAQ,CAACS,cAAT,CAAwB,cAAxB,EAAwCL,kBAAxC;AACAJ,UAAAA,QAAQ,CAACS,cAAT,CAAwB,iBAAxB,EAA2CJ,qBAA3C;AACAL,UAAAA,QAAQ,CAACS,cAAT,CAAwB,gBAAxB,EAA0CD,oBAA1C;AACD;AACF,OAPD;AAQD;AACF,GAhCQ,EAgCN,CAACX,MAAD,EAASC,KAAT,EAAgBF,QAAhB,EAA0BG,QAA1B,CAhCM,CAAT;AAiCD","sourcesContent":["import { useEffect } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { injected } from \"lib/connectors\";\n\nexport default function useInactiveListener(suppress = false) {\n  const { active, error, activate } = useWeb3React();\n\n  useEffect(() => {\n    const { ethereum } = window;\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleConnect = () => {\n        activate(injected);\n      };\n      const handleChainChanged = () => {\n        activate(injected);\n      };\n      const handleAccountsChanged = (accounts) => {\n        if (accounts.length > 0) {\n          activate(injected);\n        }\n      };\n      const handleNetworkChanged = () => {\n        activate(injected);\n      };\n\n      ethereum.on(\"connect\", handleConnect);\n      ethereum.on(\"chainChanged\", handleChainChanged);\n      ethereum.on(\"accountsChanged\", handleAccountsChanged);\n      ethereum.on(\"networkChanged\", handleNetworkChanged);\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener(\"connect\", handleConnect);\n          ethereum.removeListener(\"chainChanged\", handleChainChanged);\n          ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n          ethereum.removeListener(\"networkChanged\", handleNetworkChanged);\n        }\n      };\n    }\n  }, [active, error, suppress, activate]);\n}\n"]},"metadata":{},"sourceType":"module"}