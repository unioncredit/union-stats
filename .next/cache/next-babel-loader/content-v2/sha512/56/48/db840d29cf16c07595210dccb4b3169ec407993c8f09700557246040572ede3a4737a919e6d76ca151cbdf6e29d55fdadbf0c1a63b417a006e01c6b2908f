{"ast":null,"code":"import { BigNumber } from \"@ethersproject/bignumber\";\nimport useComptrollerContract from \"hooks/contracts/useComptrollerContract\";\nimport useUnionDecimals from \"hooks/useUnionDecimals\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport useSWR from \"swr\";\nimport { BLOCK_SPEED } from \"constants/variables\";\nimport useReadProvider from \"hooks/useReadProvider\";\nimport { getLogs } from \"lib/logs\";\nimport useChainId from \"hooks/useChainId\"; // Calculates average reward distributed per block in past week\n// avg = total_reward_per_week / total_blocks_per_week\n// not reasonable to assume we will ever pull this in any sort of timely manner.\n\nconst getAverageInflationPerBlock = comptroller => async (_, decimals, provider, chainId) => {\n  const blocknumber = await provider.getBlockNumber();\n  const blockSpeed = BLOCK_SPEED[chainId];\n  const weekInBlocks = 60 * 60 * 24 * 7 / blockSpeed;\n  const fromBlock = blocknumber - weekInBlocks;\n  const eventFilter = comptroller.filters.LogWithdrawRewards();\n  const rewardLogs = await getLogs(provider, chainId, eventFilter, fromBlock);\n  const totalReward = rewardLogs.reduce((sum, log) => {\n    const event = comptroller.interface.parseLog(log);\n    return sum.add(event.args.amount);\n  }, BigNumber.from(0));\n  const rewardPerBlock = totalReward.div(weekInBlocks);\n  return formatUnits(rewardPerBlock, decimals);\n};\n\nexport default function useAverageInflationPerBlock() {\n  const chainId = useChainId();\n  const readProvider = useReadProvider();\n  const comptroller = useComptrollerContract(readProvider);\n  const {\n    data: decimals\n  } = useUnionDecimals();\n  const shouldFetch = !!comptroller && !!decimals && !!readProvider && !!chainId;\n  return useSWR(shouldFetch ? [\"averageInflationPerBlock\", decimals, readProvider, chainId] : null, getAverageInflationPerBlock(comptroller));\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/union-stats/hooks/stats/unionTokenStats/useAverageInflationPerBlock.ts"],"names":["BigNumber","useComptrollerContract","useUnionDecimals","formatUnits","useSWR","BLOCK_SPEED","useReadProvider","getLogs","useChainId","getAverageInflationPerBlock","comptroller","_","decimals","provider","chainId","blocknumber","getBlockNumber","blockSpeed","weekInBlocks","fromBlock","eventFilter","filters","LogWithdrawRewards","rewardLogs","totalReward","reduce","sum","log","event","interface","parseLog","add","args","amount","from","rewardPerBlock","div","useAverageInflationPerBlock","readProvider","data","shouldFetch"],"mappings":"AAAA,SAASA,SAAT,QAA0B,0BAA1B;AAEA,OAAOC,sBAAP,MAAmC,wCAAnC;AACA,OAAOC,gBAAP,MAA6B,wBAA7B;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,SAASC,OAAT,QAAwB,UAAxB;AACA,OAAOC,UAAP,MAAuB,kBAAvB,C,CAEA;AACA;AACA;;AACA,MAAMC,2BAA2B,GAC9BC,WAAD,IACA,OAAOC,CAAP,EAAeC,QAAf,EAAoCC,QAApC,EAAmDC,OAAnD,KAAuE;AACrE,QAAMC,WAAW,GAAG,MAAMF,QAAQ,CAACG,cAAT,EAA1B;AACA,QAAMC,UAAU,GAAGZ,WAAW,CAACS,OAAD,CAA9B;AACA,QAAMI,YAAY,GAAI,KAAK,EAAL,GAAU,EAAV,GAAe,CAAhB,GAAqBD,UAA1C;AACA,QAAME,SAAS,GAAGJ,WAAW,GAAGG,YAAhC;AAEA,QAAME,WAAwB,GAAGV,WAAW,CAACW,OAAZ,CAAoBC,kBAApB,EAAjC;AACA,QAAMC,UAAU,GAAG,MAAMhB,OAAO,CAACM,QAAD,EAAWC,OAAX,EAAoBM,WAApB,EAAiCD,SAAjC,CAAhC;AAEA,QAAMK,WAAW,GAAGD,UAAU,CAACE,MAAX,CAAkB,CAACC,GAAD,EAAiBC,GAAjB,KAA8B;AAClE,UAAMC,KAAK,GAAGlB,WAAW,CAACmB,SAAZ,CAAsBC,QAAtB,CAA+BH,GAA/B,CAAd;AACA,WAAOD,GAAG,CAACK,GAAJ,CAAQH,KAAK,CAACI,IAAN,CAAWC,MAAnB,CAAP;AACD,GAHmB,EAGjBjC,SAAS,CAACkC,IAAV,CAAe,CAAf,CAHiB,CAApB;AAKA,QAAMC,cAAc,GAAGX,WAAW,CAACY,GAAZ,CAAgBlB,YAAhB,CAAvB;AAEA,SAAOf,WAAW,CAACgC,cAAD,EAAiBvB,QAAjB,CAAlB;AACD,CAnBH;;AAqBA,eAAe,SAASyB,2BAAT,GAAuC;AACpD,QAAMvB,OAAO,GAAGN,UAAU,EAA1B;AACA,QAAM8B,YAAY,GAAGhC,eAAe,EAApC;AACA,QAAMI,WAAqB,GAAGT,sBAAsB,CAACqC,YAAD,CAApD;AACA,QAAM;AAAEC,IAAAA,IAAI,EAAE3B;AAAR,MAAqBV,gBAAgB,EAA3C;AAEA,QAAMsC,WAAW,GACf,CAAC,CAAC9B,WAAF,IAAiB,CAAC,CAACE,QAAnB,IAA+B,CAAC,CAAC0B,YAAjC,IAAiD,CAAC,CAACxB,OADrD;AAGA,SAAOV,MAAM,CACXoC,WAAW,GACP,CAAC,0BAAD,EAA6B5B,QAA7B,EAAuC0B,YAAvC,EAAqDxB,OAArD,CADO,GAEP,IAHO,EAIXL,2BAA2B,CAACC,WAAD,CAJhB,CAAb;AAMD","sourcesContent":["import { BigNumber } from \"@ethersproject/bignumber\";\nimport { Contract, EventFilter } from \"@ethersproject/contracts\";\nimport useComptrollerContract from \"hooks/contracts/useComptrollerContract\";\nimport useUnionDecimals from \"hooks/useUnionDecimals\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport useSWR from \"swr\";\nimport { BLOCK_SPEED } from \"constants/variables\";\nimport useReadProvider from \"hooks/useReadProvider\";\nimport { getLogs } from \"lib/logs\";\nimport useChainId from \"hooks/useChainId\";\n\n// Calculates average reward distributed per block in past week\n// avg = total_reward_per_week / total_blocks_per_week\n// not reasonable to assume we will ever pull this in any sort of timely manner.\nconst getAverageInflationPerBlock =\n  (comptroller: Contract) =>\n  async (_: any, decimals: BigNumber, provider: any, chainId: number) => {\n    const blocknumber = await provider.getBlockNumber();\n    const blockSpeed = BLOCK_SPEED[chainId];\n    const weekInBlocks = (60 * 60 * 24 * 7) / blockSpeed;\n    const fromBlock = blocknumber - weekInBlocks;\n\n    const eventFilter: EventFilter = comptroller.filters.LogWithdrawRewards();\n    const rewardLogs = await getLogs(provider, chainId, eventFilter, fromBlock);\n\n    const totalReward = rewardLogs.reduce((sum: BigNumber, log: any) => {\n      const event = comptroller.interface.parseLog(log);\n      return sum.add(event.args.amount);\n    }, BigNumber.from(0));\n\n    const rewardPerBlock = totalReward.div(weekInBlocks);\n\n    return formatUnits(rewardPerBlock, decimals);\n  };\n\nexport default function useAverageInflationPerBlock() {\n  const chainId = useChainId();\n  const readProvider = useReadProvider();\n  const comptroller: Contract = useComptrollerContract(readProvider);\n  const { data: decimals } = useUnionDecimals();\n\n  const shouldFetch =\n    !!comptroller && !!decimals && !!readProvider && !!chainId;\n\n  return useSWR(\n    shouldFetch\n      ? [\"averageInflationPerBlock\", decimals, readProvider, chainId]\n      : null,\n    getAverageInflationPerBlock(comptroller)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}