{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query (\\n    $first: Int, \\n    $memberApplicationsFilter: MemberApplication_filter,\\n  ) {\\n    \", \": memberApplications(first: $first, where: $memberApplicationsFilter) {\\n      applicant\\n      timestamp\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { request, gql } from \"graphql-request\";\nimport { GRAPHQL_URLS } from \"constants/variables\";\nimport { TransactionTypes } from \"constants/app\";\nvar query = gql(_templateObject(), TransactionTypes.REGISTER);\nexport default function fetchUserTransactions(_x, _x2) {\n  return _fetchUserTransactions.apply(this, arguments);\n}\n\nfunction _fetchUserTransactions() {\n  _fetchUserTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(chainId, account) {\n    var variables, resp, flattened, sorted;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            variables = {\n              first: 100,\n              memberApplicationsFilter: {\n                applicant: account\n              }\n            };\n            _context.next = 3;\n            return request(GRAPHQL_URLS[chainId].user, query, variables);\n\n          case 3:\n            resp = _context.sent;\n            flattened = Object.keys(resp).reduce(function (acc, key) {\n              var parsed = resp[key].map(function (item) {\n                return _objectSpread(_objectSpread({}, item), {}, {\n                  type: key\n                });\n              });\n              return [].concat(_toConsumableArray(acc), _toConsumableArray(parsed));\n            }, []);\n            sorted = flattened.sort(function (a, b) {\n              return Number(b.timestamp) - Number(a.timestamp);\n            });\n            return _context.abrupt(\"return\", sorted);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchUserTransactions.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/fetchers/fetchRegisterTransactions.js"],"names":["request","gql","GRAPHQL_URLS","TransactionTypes","query","REGISTER","fetchUserTransactions","chainId","account","variables","first","memberApplicationsFilter","applicant","user","resp","flattened","Object","keys","reduce","acc","key","parsed","map","item","type","sorted","sort","a","b","Number","timestamp"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,SAASA,OAAT,EAAkBC,GAAlB,QAA6B,iBAA7B;AACA,SAASC,YAAT,QAA6B,qBAA7B;AAEA,SAASC,gBAAT,QAAiC,eAAjC;AAEA,IAAMC,KAAK,GAAGH,GAAH,oBAKLE,gBAAgB,CAACE,QALZ,CAAX;AAYA,wBAA8BC,qBAA9B;AAAA;AAAA;;;oFAAe,iBAAqCC,OAArC,EAA8CC,OAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,YAAAA,SADO,GACK;AAChBC,cAAAA,KAAK,EAAE,GADS;AAEhBC,cAAAA,wBAAwB,EAAE;AACxBC,gBAAAA,SAAS,EAAEJ;AADa;AAFV,aADL;AAAA;AAAA,mBAQMR,OAAO,CAACE,YAAY,CAACK,OAAD,CAAZ,CAAsBM,IAAvB,EAA6BT,KAA7B,EAAoCK,SAApC,CARb;;AAAA;AAQPK,YAAAA,IARO;AAUPC,YAAAA,SAVO,GAUKC,MAAM,CAACC,IAAP,CAAYH,IAAZ,EAAkBI,MAAlB,CAAyB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACvD,kBAAMC,MAAM,GAAGP,IAAI,CAACM,GAAD,CAAJ,CAAUE,GAAV,CAAc,UAACC,IAAD;AAAA,uDACxBA,IADwB;AAE3BC,kBAAAA,IAAI,EAAEJ;AAFqB;AAAA,eAAd,CAAf;AAKA,kDAAWD,GAAX,sBAAmBE,MAAnB;AACD,aAPiB,EAOf,EAPe,CAVL;AAmBPI,YAAAA,MAnBO,GAmBEV,SAAS,CAACW,IAAV,CAAe,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACtC,qBAAOC,MAAM,CAACD,CAAC,CAACE,SAAH,CAAN,GAAsBD,MAAM,CAACF,CAAC,CAACG,SAAH,CAAnC;AACD,aAFc,CAnBF;AAAA,6CAuBNL,MAvBM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { request, gql } from \"graphql-request\";\nimport { GRAPHQL_URLS } from \"constants/variables\";\n\nimport { TransactionTypes } from \"constants/app\";\n\nconst query = gql`\n  query (\n    $first: Int, \n    $memberApplicationsFilter: MemberApplication_filter,\n  ) {\n    ${TransactionTypes.REGISTER}: memberApplications(first: $first, where: $memberApplicationsFilter) {\n      applicant\n      timestamp\n    }\n  }\n`;\n\nexport default async function fetchUserTransactions(chainId, account) {\n  const variables = {\n    first: 100,\n    memberApplicationsFilter: {\n      applicant: account,\n    },\n  };\n\n  const resp = await request(GRAPHQL_URLS[chainId].user, query, variables);\n\n  const flattened = Object.keys(resp).reduce((acc, key) => {\n    const parsed = resp[key].map((item) => ({\n      ...item,\n      type: key,\n    }));\n\n    return [...acc, ...parsed];\n  }, []);\n\n  const sorted = flattened.sort((a, b) => {\n    return Number(b.timestamp) - Number(a.timestamp);\n  });\n\n  return sorted;\n}\n"]},"metadata":{},"sourceType":"module"}