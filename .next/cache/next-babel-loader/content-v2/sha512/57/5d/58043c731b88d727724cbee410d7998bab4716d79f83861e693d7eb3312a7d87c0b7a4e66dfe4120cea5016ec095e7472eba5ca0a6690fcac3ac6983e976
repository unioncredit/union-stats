{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { newRidgeState } from \"react-ridge-state\";\nconst initialState = {};\nexport const modalState = newRidgeState(initialState);\nexport const closeAllModals = () => modalState.set(initialState);\nexport function useModals() {\n  const updateModal = (modal, open) => {\n    modalState.set(x => _objectSpread(_objectSpread({}, x), {}, {\n      [modal]: open\n    }));\n  };\n\n  const toggleModal = modal => {\n    modalState.set(x => _objectSpread(_objectSpread({}, x), {}, {\n      [modal]: !x[modal]\n    }));\n  };\n\n  const openModal = modal => updateModal(modal, true);\n\n  const closeModal = modal => updateModal(modal, false);\n\n  return {\n    toggleModal,\n    openModal,\n    closeModal\n  };\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/useModals.js"],"names":["newRidgeState","initialState","modalState","closeAllModals","set","useModals","updateModal","modal","open","x","toggleModal","openModal","closeModal"],"mappings":";;;;;;AAAA,SAASA,aAAT,QAA8B,mBAA9B;AAEA,MAAMC,YAAY,GAAG,EAArB;AAEA,OAAO,MAAMC,UAAU,GAAGF,aAAa,CAACC,YAAD,CAAhC;AAEP,OAAO,MAAME,cAAc,GAAG,MAAMD,UAAU,CAACE,GAAX,CAAeH,YAAf,CAA7B;AAEP,OAAO,SAASI,SAAT,GAAqB;AAC1B,QAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACnCN,IAAAA,UAAU,CAACE,GAAX,CAAgBK,CAAD,oCAAaA,CAAb;AAAgB,OAACF,KAAD,GAASC;AAAzB,MAAf;AACD,GAFD;;AAIA,QAAME,WAAW,GAAIH,KAAD,IAAW;AAC7BL,IAAAA,UAAU,CAACE,GAAX,CAAgBK,CAAD,oCAAaA,CAAb;AAAgB,OAACF,KAAD,GAAS,CAACE,CAAC,CAACF,KAAD;AAA3B,MAAf;AACD,GAFD;;AAIA,QAAMI,SAAS,GAAIJ,KAAD,IAAWD,WAAW,CAACC,KAAD,EAAQ,IAAR,CAAxC;;AAEA,QAAMK,UAAU,GAAIL,KAAD,IAAWD,WAAW,CAACC,KAAD,EAAQ,KAAR,CAAzC;;AAEA,SAAO;AAAEG,IAAAA,WAAF;AAAeC,IAAAA,SAAf;AAA0BC,IAAAA;AAA1B,GAAP;AACD","sourcesContent":["import { newRidgeState } from \"react-ridge-state\";\n\nconst initialState = {};\n\nexport const modalState = newRidgeState(initialState);\n\nexport const closeAllModals = () => modalState.set(initialState);\n\nexport function useModals() {\n  const updateModal = (modal, open) => {\n    modalState.set((x) => ({ ...x, [modal]: open }));\n  };\n\n  const toggleModal = (modal) => {\n    modalState.set((x) => ({ ...x, [modal]: !x[modal] }));\n  };\n\n  const openModal = (modal) => updateModal(modal, true);\n\n  const closeModal = (modal) => updateModal(modal, false);\n\n  return { toggleModal, openModal, closeModal };\n}\n"]},"metadata":{},"sourceType":"module"}