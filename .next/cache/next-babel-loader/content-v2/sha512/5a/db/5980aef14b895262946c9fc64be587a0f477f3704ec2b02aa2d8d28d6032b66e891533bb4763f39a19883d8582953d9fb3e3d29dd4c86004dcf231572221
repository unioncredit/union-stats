{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/mathewstokes/Desktop/stats-app/components-ui/modals/PaymentModal.js\";\nimport { ModalOverlay, Box, Input, Stat, Button, ButtonRow, Grid, Label, Card, Badge, Control, Collapse } from \"@unioncredit/ui\";\nimport { useEffect, useState } from \"react\";\nimport { Modal, Dai } from \"components-ui\";\nimport { useForm } from \"react-hook-form\";\nimport { useModal } from \"hooks/useModal\";\nimport { REPAY_MARGIN } from \"constants/variables\";\nimport { roundDown, roundUp } from \"util/numbers\";\nimport errorMessages from \"util/errorMessages\";\nimport useCurrentToken from \"hooks/useCurrentToken\";\nimport useTokenBalance from \"hooks/data/useTokenBalance\";\nimport handleTxError from \"util/handleTxError\";\nimport getReceipt from \"util/getReceipt\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport useRepay from \"hooks/payables/useRepay\";\nimport { useAddActivity } from \"hooks/data/useActivity\";\nimport activityLabels from \"util/activityLabels\";\nimport isHash from \"util/isHash\";\nimport format from \"util/formatValue\";\nimport useUnionContract from \"hooks/contracts/useUTokenContract\";\nimport { Approval } from \"components-ui\";\nimport { APPROVE_DAI_REPAY_SIGNATURE_KEY } from \"constants/app\";\nimport usePermits from \"hooks/usePermits\";\nexport const PAYMENT_MODAL = \"payment-modal\";\nexport const usePaymentModal = () => useModal(PAYMENT_MODAL);\nconst PaymentType = {\n  MIN: \"min\",\n  MAX: \"max\",\n  CUSTOM: \"custom\"\n};\nexport function PaymentModal({\n  balanceOwed,\n  interest,\n  onComplete\n}) {\n  var _errors$amount;\n\n  const {\n    0: paymentType,\n    1: setPaymentType\n  } = useState(PaymentType.MIN);\n  const addActivity = useAddActivity();\n  const {\n    library\n  } = useWeb3React();\n  const {\n    close\n  } = usePaymentModal();\n  const curToken = useCurrentToken(\"DAI\");\n  const repay = useRepay();\n  const utoken = useUnionContract();\n  const {\n    removePermit\n  } = usePermits();\n  const {\n    reset,\n    errors,\n    formState,\n    register,\n    watch,\n    setValue,\n    handleSubmit\n  } = useForm({\n    mode: \"onChange\",\n    reValidateMode: \"onChange\"\n  });\n  const {\n    data: daiBalance = 0.0\n  } = useTokenBalance(curToken);\n  const flooredDaiBalance = roundDown(daiBalance);\n  const {\n    isDirty,\n    isSubmitting\n  } = formState;\n  const watchAmount = watch(\"amount\", 0);\n  const amount = Number(watchAmount || 0);\n  const calculateBalanceOwed = balanceOwed > 0 ? balanceOwed : 0;\n  const calculateMaxValue = flooredDaiBalance <= calculateBalanceOwed ? flooredDaiBalance : calculateBalanceOwed;\n  const newBalanceOwed = calculateBalanceOwed - amount;\n\n  const handleSelectOption = option => {\n    setPaymentType(option.paymentType);\n\n    if (option.value) {\n      setValue(\"amount\", option.value, {\n        shouldDirty: true,\n        shouldValidate: true\n      });\n    } else {\n      reset();\n    }\n  };\n\n  const validate = async val => {\n    if (!val) return errorMessages.required;\n    if (Number(val) > flooredDaiBalance) return errorMessages.notEnoughBalanceDAI;\n    if (Number(val) < 0.01) return errorMessages.minValuePointZeroOne;\n    return true;\n  };\n\n  const handlePayment = async values => {\n    const amountToRepay = Number(values.amount) === calculateMaxValue ? Number(values.amount * REPAY_MARGIN) > flooredDaiBalance ? flooredDaiBalance : Number(values.amount * REPAY_MARGIN) : Number(values.amount);\n\n    try {\n      const {\n        hash\n      } = await repay(amountToRepay);\n      await getReceipt(hash, library, {\n        pending: `Paying back ${amountToRepay} DAI`,\n        success: `Paid back ${amountToRepay} DAI`\n      });\n      addActivity(activityLabels.repay({\n        amount: amountToRepay,\n        hash\n      }));\n      if (typeof onComplete === \"function\") await onComplete();\n      removePermit(APPROVE_DAI_REPAY_SIGNATURE_KEY);\n      close();\n    } catch (err) {\n      const hash = isHash(err.message) && err.message;\n      addActivity(activityLabels.repay({\n        amount: amountToRepay,\n        hash\n      }, true));\n      handleTxError(err, `Failed to pay back ${amountToRepay} DAI`);\n    }\n  };\n\n  useEffect(() => {\n    if (interest) {\n      setValue(\"amount\", roundUp(interest), {\n        shouldDirty: true,\n        shouldValidate: true\n      });\n    }\n  }, [interest]);\n  const options = [{\n    title: \"Pay minimum due\",\n    content: \"Make the payment required to cover the interest due on your loan\",\n    value: roundUp(interest),\n    paymentType: PaymentType.MIN\n  }, {\n    title: calculateMaxValue >= calculateBalanceOwed ? \"Pay-off entire loan\" : \"Pay maximum DAI available\",\n    content: calculateMaxValue >= calculateBalanceOwed ? \"Make a payment to pay-off your current balance owed in its entirety\" : \"Make a payment with the maximum amount of DAI available in your connected wallet\",\n    value: calculateMaxValue,\n    paymentType: PaymentType.MAX\n  }];\n  const isCustomSelected = paymentType === PaymentType.CUSTOM;\n  return /*#__PURE__*/_jsxDEV(ModalOverlay, {\n    onClick: close,\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      title: \"Make a payment\",\n      onClose: close,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(handlePayment),\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          children: /*#__PURE__*/_jsxDEV(Grid.Row, {\n            children: /*#__PURE__*/_jsxDEV(Grid.Col, {\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(Stat, {\n                mb: \"16px\",\n                align: \"center\",\n                size: \"medium\",\n                label: \"Balance owed\",\n                value: /*#__PURE__*/_jsxDEV(Dai, {\n                  value: calculateBalanceOwed\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 171,\n                  columnNumber: 26\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), options.map(option => {\n          const selected = option.paymentType === paymentType;\n          return /*#__PURE__*/_jsxDEV(Card, {\n            variant: selected ? \"blue\" : \"primary\",\n            bordered: selected,\n            packed: true,\n            mt: \"8px\",\n            children: /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                justify: \"space-between\",\n                children: [/*#__PURE__*/_jsxDEV(Box, {\n                  direction: \"vertical\",\n                  children: [/*#__PURE__*/_jsxDEV(Control, {\n                    onClick: () => handleSelectOption(option),\n                    label: option.title,\n                    type: \"radio\",\n                    checked: selected\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 191,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n                    active: selected,\n                    children: /*#__PURE__*/_jsxDEV(Label, {\n                      as: \"p\",\n                      mt: \"4px\",\n                      mb: 0,\n                      children: option.content\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 198,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 197,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 190,\n                  columnNumber: 21\n                }, this), option.value && /*#__PURE__*/_jsxDEV(Badge, {\n                  ml: \"8px\",\n                  color: selected ? \"blue\" : \"grey\",\n                  label: /*#__PURE__*/_jsxDEV(Dai, {\n                    value: option.value\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 207,\n                    columnNumber: 32\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 204,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 17\n            }, this)\n          }, option.paymentType, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 15\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(Card, {\n          packed: true,\n          mt: \"8px\",\n          variant: isCustomSelected ? \"blue\" : \"primary\",\n          children: /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              align: \"center\",\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                direction: \"vertical\",\n                fluid: true,\n                children: [/*#__PURE__*/_jsxDEV(Control, {\n                  checked: isCustomSelected,\n                  type: \"radio\",\n                  label: \"Custom payment amount\",\n                  onClick: () => handleSelectOption({\n                    paymentType: PaymentType.CUSTOM\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 220,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n                  active: isCustomSelected,\n                  children: /*#__PURE__*/_jsxDEV(Box, {\n                    fluid: true,\n                    mt: \"12px\",\n                    children: /*#__PURE__*/_jsxDEV(Input, {\n                      type: \"number\",\n                      ref: register({\n                        validate\n                      }),\n                      name: \"amount\",\n                      suffix: /*#__PURE__*/_jsxDEV(Dai, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 234,\n                        columnNumber: 33\n                      }, this),\n                      placeholder: \"0.0\",\n                      error: ((_errors$amount = errors.amount) === null || _errors$amount === void 0 ? void 0 : _errors$amount.message) || false\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 230,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 229,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 228,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          justify: \"space-between\",\n          mt: \"24px\",\n          mb: \"18px\",\n          children: [/*#__PURE__*/_jsxDEV(Label, {\n            as: \"p\",\n            grey: 400,\n            children: \"New balance owed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Label, {\n            as: \"p\",\n            grey: 400,\n            m: 0,\n            children: [format(newBalanceOwed), \" DAI\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ButtonRow, {\n          fluid: true,\n          children: /*#__PURE__*/_jsxDEV(Approval, {\n            label: \"Approve DAI for Loan Payments\",\n            amount: amount,\n            tokenAddress: curToken,\n            spender: utoken.address,\n            signatureKey: APPROVE_DAI_REPAY_SIGNATURE_KEY,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              fluid: true,\n              fontSize: \"large\",\n              disabled: !isDirty,\n              loading: isSubmitting,\n              label: `Repay ${amount} DAI`,\n              onClick: handleSubmit(handlePayment)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/components-ui/modals/PaymentModal.js"],"names":["ModalOverlay","Box","Input","Stat","Button","ButtonRow","Grid","Label","Card","Badge","Control","Collapse","useEffect","useState","Modal","Dai","useForm","useModal","REPAY_MARGIN","roundDown","roundUp","errorMessages","useCurrentToken","useTokenBalance","handleTxError","getReceipt","useWeb3React","useRepay","useAddActivity","activityLabels","isHash","format","useUnionContract","Approval","APPROVE_DAI_REPAY_SIGNATURE_KEY","usePermits","PAYMENT_MODAL","usePaymentModal","PaymentType","MIN","MAX","CUSTOM","PaymentModal","balanceOwed","interest","onComplete","paymentType","setPaymentType","addActivity","library","close","curToken","repay","utoken","removePermit","reset","errors","formState","register","watch","setValue","handleSubmit","mode","reValidateMode","data","daiBalance","flooredDaiBalance","isDirty","isSubmitting","watchAmount","amount","Number","calculateBalanceOwed","calculateMaxValue","newBalanceOwed","handleSelectOption","option","value","shouldDirty","shouldValidate","validate","val","required","notEnoughBalanceDAI","minValuePointZeroOne","handlePayment","values","amountToRepay","hash","pending","success","err","message","options","title","content","isCustomSelected","map","selected","address"],"mappings":"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","sourcesContent":["import {\n  ModalOverlay,\n  Box,\n  Input,\n  Stat,\n  Button,\n  ButtonRow,\n  Grid,\n  Label,\n  Card,\n  Badge,\n  Control,\n  Collapse,\n} from \"@unioncredit/ui\";\nimport { useEffect, useState } from \"react\";\nimport { Modal, Dai } from \"components-ui\";\nimport { useForm } from \"react-hook-form\";\nimport { useModal } from \"hooks/useModal\";\nimport { REPAY_MARGIN } from \"constants/variables\";\nimport { roundDown, roundUp } from \"util/numbers\";\nimport errorMessages from \"util/errorMessages\";\nimport useCurrentToken from \"hooks/useCurrentToken\";\nimport useTokenBalance from \"hooks/data/useTokenBalance\";\nimport handleTxError from \"util/handleTxError\";\nimport getReceipt from \"util/getReceipt\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport useRepay from \"hooks/payables/useRepay\";\nimport { useAddActivity } from \"hooks/data/useActivity\";\nimport activityLabels from \"util/activityLabels\";\nimport isHash from \"util/isHash\";\nimport format from \"util/formatValue\";\nimport useUnionContract from \"hooks/contracts/useUTokenContract\";\nimport { Approval } from \"components-ui\";\nimport { APPROVE_DAI_REPAY_SIGNATURE_KEY } from \"constants/app\";\nimport usePermits from \"hooks/usePermits\";\n\nexport const PAYMENT_MODAL = \"payment-modal\";\n\nexport const usePaymentModal = () => useModal(PAYMENT_MODAL);\n\nconst PaymentType = {\n  MIN: \"min\",\n  MAX: \"max\",\n  CUSTOM: \"custom\",\n};\n\nexport function PaymentModal({ balanceOwed, interest, onComplete }) {\n  const [paymentType, setPaymentType] = useState(PaymentType.MIN);\n  const addActivity = useAddActivity();\n  const { library } = useWeb3React();\n  const { close } = usePaymentModal();\n  const curToken = useCurrentToken(\"DAI\");\n  const repay = useRepay();\n  const utoken = useUnionContract();\n  const { removePermit } = usePermits();\n\n  const { reset, errors, formState, register, watch, setValue, handleSubmit } =\n    useForm({\n      mode: \"onChange\",\n      reValidateMode: \"onChange\",\n    });\n\n  const { data: daiBalance = 0.0 } = useTokenBalance(curToken);\n  const flooredDaiBalance = roundDown(daiBalance);\n\n  const { isDirty, isSubmitting } = formState;\n\n  const watchAmount = watch(\"amount\", 0);\n  const amount = Number(watchAmount || 0);\n\n  const calculateBalanceOwed = balanceOwed > 0 ? balanceOwed : 0;\n\n  const calculateMaxValue =\n    flooredDaiBalance <= calculateBalanceOwed\n      ? flooredDaiBalance\n      : calculateBalanceOwed;\n\n  const newBalanceOwed = calculateBalanceOwed - amount;\n\n  const handleSelectOption = (option) => {\n    setPaymentType(option.paymentType);\n    if (option.value) {\n      setValue(\"amount\", option.value, {\n        shouldDirty: true,\n        shouldValidate: true,\n      });\n    } else {\n      reset();\n    }\n  };\n\n  const validate = async (val) => {\n    if (!val) return errorMessages.required;\n    if (Number(val) > flooredDaiBalance)\n      return errorMessages.notEnoughBalanceDAI;\n    if (Number(val) < 0.01) return errorMessages.minValuePointZeroOne;\n\n    return true;\n  };\n\n  const handlePayment = async (values) => {\n    const amountToRepay =\n      Number(values.amount) === calculateMaxValue\n        ? Number(values.amount * REPAY_MARGIN) > flooredDaiBalance\n          ? flooredDaiBalance\n          : Number(values.amount * REPAY_MARGIN)\n        : Number(values.amount);\n\n    try {\n      const { hash } = await repay(amountToRepay);\n      await getReceipt(hash, library, {\n        pending: `Paying back ${amountToRepay} DAI`,\n        success: `Paid back ${amountToRepay} DAI`,\n      });\n      addActivity(activityLabels.repay({ amount: amountToRepay, hash }));\n      if (typeof onComplete === \"function\") await onComplete();\n      removePermit(APPROVE_DAI_REPAY_SIGNATURE_KEY);\n      close();\n    } catch (err) {\n      const hash = isHash(err.message) && err.message;\n      addActivity(activityLabels.repay({ amount: amountToRepay, hash }, true));\n      handleTxError(err, `Failed to pay back ${amountToRepay} DAI`);\n    }\n  };\n\n  useEffect(() => {\n    if (interest) {\n      setValue(\"amount\", roundUp(interest), {\n        shouldDirty: true,\n        shouldValidate: true,\n      });\n    }\n  }, [interest]);\n\n  const options = [\n    {\n      title: \"Pay minimum due\",\n      content:\n        \"Make the payment required to cover the interest due on your loan\",\n      value: roundUp(interest),\n      paymentType: PaymentType.MIN,\n    },\n    {\n      title:\n        calculateMaxValue >= calculateBalanceOwed\n          ? \"Pay-off entire loan\"\n          : \"Pay maximum DAI available\",\n      content:\n        calculateMaxValue >= calculateBalanceOwed\n          ? \"Make a payment to pay-off your current balance owed in its entirety\"\n          : \"Make a payment with the maximum amount of DAI available in your connected wallet\",\n      value: calculateMaxValue,\n      paymentType: PaymentType.MAX,\n    },\n  ];\n\n  const isCustomSelected = paymentType === PaymentType.CUSTOM;\n\n  return (\n    <ModalOverlay onClick={close}>\n      <Modal title=\"Make a payment\" onClose={close}>\n        <form onSubmit={handleSubmit(handlePayment)}>\n          <Grid>\n            <Grid.Row>\n              <Grid.Col xs={12}>\n                <Stat\n                  mb=\"16px\"\n                  align=\"center\"\n                  size=\"medium\"\n                  label=\"Balance owed\"\n                  value={<Dai value={calculateBalanceOwed} />}\n                />\n              </Grid.Col>\n            </Grid.Row>\n          </Grid>\n\n          {options.map((option) => {\n            const selected = option.paymentType === paymentType;\n\n            return (\n              <Card\n                key={option.paymentType}\n                variant={selected ? \"blue\" : \"primary\"}\n                bordered={selected}\n                packed\n                mt=\"8px\"\n              >\n                <Card.Body>\n                  <Box justify=\"space-between\">\n                    <Box direction=\"vertical\">\n                      <Control\n                        onClick={() => handleSelectOption(option)}\n                        label={option.title}\n                        type=\"radio\"\n                        checked={selected}\n                      />\n                      <Collapse active={selected}>\n                        <Label as=\"p\" mt=\"4px\" mb={0}>\n                          {option.content}\n                        </Label>\n                      </Collapse>\n                    </Box>\n                    {option.value && (\n                      <Badge\n                        ml=\"8px\"\n                        color={selected ? \"blue\" : \"grey\"}\n                        label={<Dai value={option.value} />}\n                      />\n                    )}\n                  </Box>\n                </Card.Body>\n              </Card>\n            );\n          })}\n\n          <Card packed mt=\"8px\" variant={isCustomSelected ? \"blue\" : \"primary\"}>\n            <Card.Body>\n              <Box align=\"center\">\n                <Box direction=\"vertical\" fluid>\n                  <Control\n                    checked={isCustomSelected}\n                    type=\"radio\"\n                    label=\"Custom payment amount\"\n                    onClick={() =>\n                      handleSelectOption({ paymentType: PaymentType.CUSTOM })\n                    }\n                  />\n                  <Collapse active={isCustomSelected}>\n                    <Box fluid mt=\"12px\">\n                      <Input\n                        type=\"number\"\n                        ref={register({ validate })}\n                        name=\"amount\"\n                        suffix={<Dai />}\n                        placeholder=\"0.0\"\n                        error={errors.amount?.message || false}\n                      />\n                    </Box>\n                  </Collapse>\n                </Box>\n              </Box>\n            </Card.Body>\n          </Card>\n\n          <Box justify=\"space-between\" mt=\"24px\" mb=\"18px\">\n            <Label as=\"p\" grey={400}>\n              New balance owed\n            </Label>\n            <Label as=\"p\" grey={400} m={0}>\n              {format(newBalanceOwed)} DAI\n            </Label>\n          </Box>\n          <ButtonRow fluid>\n            <Approval\n              label=\"Approve DAI for Loan Payments\"\n              amount={amount}\n              tokenAddress={curToken}\n              spender={utoken.address}\n              signatureKey={APPROVE_DAI_REPAY_SIGNATURE_KEY}\n            >\n              <Button\n                fluid\n                fontSize=\"large\"\n                disabled={!isDirty}\n                loading={isSubmitting}\n                label={`Repay ${amount} DAI`}\n                onClick={handleSubmit(handlePayment)}\n              />\n            </Approval>\n          </ButtonRow>\n        </form>\n      </Modal>\n    </ModalOverlay>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}