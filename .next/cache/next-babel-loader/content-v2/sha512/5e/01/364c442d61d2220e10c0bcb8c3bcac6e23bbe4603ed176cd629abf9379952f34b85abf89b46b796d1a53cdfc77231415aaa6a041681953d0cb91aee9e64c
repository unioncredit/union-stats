{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport useSWR from \"swr\";\nimport useChainId from \"hooks/useChainId\";\nimport fetchGovernanceProposals from \"fetchers/fetchGovernanceProposals\";\n\nvar fetchData = function fetchData(_, chainId) {\n  return fetchGovernanceProposals(chainId);\n};\n\nexport function useDataFromEventLogs() {\n  _s();\n\n  var chainId = useChainId();\n  var shouldFetch = chainId;\n  return useSWR(shouldFetch ? [\"EventLogsData\", chainId] : null, fetchData, {\n    shouldRetryOnError: false,\n    refreshWhenHidden: false,\n    refreshWhenOffline: false,\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false\n  });\n}\n\n_s(useDataFromEventLogs, \"uZ58AYHOyJ44AvP6Y10ANwGzLxg=\", false, function () {\n  return [useChainId, useSWR];\n});","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/governance/useDataFromEventLogs.js"],"names":["useSWR","useChainId","fetchGovernanceProposals","fetchData","_","chainId","useDataFromEventLogs","shouldFetch","shouldRetryOnError","refreshWhenHidden","refreshWhenOffline","revalidateOnFocus","revalidateOnReconnect"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,KAAnB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,wBAAP,MAAqC,mCAArC;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,CAAD,EAAIC,OAAJ,EAAgB;AAChC,SAAOH,wBAAwB,CAACG,OAAD,CAA/B;AACD,CAFD;;AAIA,OAAO,SAASC,oBAAT,GAAgC;AAAA;;AACrC,MAAMD,OAAO,GAAGJ,UAAU,EAA1B;AAEA,MAAMM,WAAW,GAAGF,OAApB;AAEA,SAAOL,MAAM,CAACO,WAAW,GAAG,CAAC,eAAD,EAAkBF,OAAlB,CAAH,GAAgC,IAA5C,EAAkDF,SAAlD,EAA6D;AACxEK,IAAAA,kBAAkB,EAAE,KADoD;AAExEC,IAAAA,iBAAiB,EAAE,KAFqD;AAGxEC,IAAAA,kBAAkB,EAAE,KAHoD;AAIxEC,IAAAA,iBAAiB,EAAE,KAJqD;AAKxEC,IAAAA,qBAAqB,EAAE;AALiD,GAA7D,CAAb;AAOD;;GAZeN,oB;UACEL,U,EAITD,M","sourcesContent":["import useSWR from \"swr\";\nimport useChainId from \"hooks/useChainId\";\nimport fetchGovernanceProposals from \"fetchers/fetchGovernanceProposals\";\n\nconst fetchData = (_, chainId) => {\n  return fetchGovernanceProposals(chainId);\n};\n\nexport function useDataFromEventLogs() {\n  const chainId = useChainId();\n\n  const shouldFetch = chainId;\n\n  return useSWR(shouldFetch ? [\"EventLogsData\", chainId] : null, fetchData, {\n    shouldRetryOnError: false,\n    refreshWhenHidden: false,\n    refreshWhenOffline: false,\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}