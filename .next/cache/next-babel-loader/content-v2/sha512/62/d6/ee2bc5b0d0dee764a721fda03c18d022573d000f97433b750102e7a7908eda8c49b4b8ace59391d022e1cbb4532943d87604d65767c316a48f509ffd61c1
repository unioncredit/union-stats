{"ast":null,"code":"/**\n * @name roundUp\n * @param {String|Number} number\n */\nexport var roundUp = function roundUp(number) {\n  return Number(Math.ceil(Number(number) * 100) / 100);\n};\n/**\n * @name roundDown\n * @param {String|Number} number\n */\n\nexport var roundDown = function roundDown(number) {\n  return Number(Math.floor(number * 100) / 100);\n};\n/**\n * @name toPercent\n * @param {String|Number} number\n * @param {Number} digits\n */\n\nexport var toPercent = function toPercent(number) {\n  var digits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return Number(number).toLocaleString(undefined, {\n    style: \"percent\",\n    maximumFractionDigits: digits,\n    minimumFractionDigits: digits\n  });\n};","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/util/numbers.js"],"names":["roundUp","number","Number","Math","ceil","roundDown","floor","toPercent","digits","toLocaleString","undefined","style","maximumFractionDigits","minimumFractionDigits"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAACC,MAAD;AAAA,SACrBC,MAAM,CAACC,IAAI,CAACC,IAAL,CAAUF,MAAM,CAACD,MAAD,CAAN,GAAiB,GAA3B,IAAkC,GAAnC,CADe;AAAA,CAAhB;AAGP;AACA;AACA;AACA;;AACA,OAAO,IAAMI,SAAS,GAAG,SAAZA,SAAY,CAACJ,MAAD;AAAA,SAAYC,MAAM,CAACC,IAAI,CAACG,KAAL,CAAWL,MAAM,GAAG,GAApB,IAA2B,GAA5B,CAAlB;AAAA,CAAlB;AAEP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMM,SAAS,GAAG,SAAZA,SAAY,CAACN,MAAD;AAAA,MAASO,MAAT,uEAAkB,CAAlB;AAAA,SACvBN,MAAM,CAACD,MAAD,CAAN,CAAeQ,cAAf,CAA8BC,SAA9B,EAAyC;AACvCC,IAAAA,KAAK,EAAE,SADgC;AAEvCC,IAAAA,qBAAqB,EAAEJ,MAFgB;AAGvCK,IAAAA,qBAAqB,EAAEL;AAHgB,GAAzC,CADuB;AAAA,CAAlB","sourcesContent":["/**\n * @name roundUp\n * @param {String|Number} number\n */\nexport const roundUp = (number) =>\n  Number(Math.ceil(Number(number) * 100) / 100);\n\n/**\n * @name roundDown\n * @param {String|Number} number\n */\nexport const roundDown = (number) => Number(Math.floor(number * 100) / 100);\n\n/**\n * @name toPercent\n * @param {String|Number} number\n * @param {Number} digits\n */\nexport const toPercent = (number, digits = 0) =>\n  Number(number).toLocaleString(undefined, {\n    style: \"percent\",\n    maximumFractionDigits: digits,\n    minimumFractionDigits: digits,\n  });\n"]},"metadata":{},"sourceType":"module"}