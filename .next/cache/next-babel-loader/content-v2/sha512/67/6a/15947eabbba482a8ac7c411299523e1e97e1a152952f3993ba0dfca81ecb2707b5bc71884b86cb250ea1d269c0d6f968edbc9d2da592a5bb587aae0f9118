{"ast":null,"code":"import useCompoundAdapterContract from \"hooks/contracts/useCompoundAdapterContract\";\nimport useDAIDecimals from \"hooks/useDAIDecimals\";\nimport useChainId from \"hooks/useChainId\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { TOKENS } from \"constants/variables\";\nimport useSWR from \"swr\";\nimport useReadProvider from \"hooks/useReadProvider\";\n\nconst getCompoundCeiling = compoundAdapter => async (_, decimals, daiAddress) => {\n  const compoundCeiling = await compoundAdapter.ceilingMap(daiAddress);\n  return formatUnits(compoundCeiling, decimals);\n};\n\nexport default function useCompoundCeiling() {\n  const readProvider = useReadProvider();\n  const compoundAdapter = useCompoundAdapterContract(readProvider);\n  const {\n    data: decimals\n  } = useDAIDecimals();\n  const chainId = useChainId();\n  const shouldFetch = !!compoundAdapter && !!chainId && !!TOKENS[chainId] && !!TOKENS[chainId].DAI;\n  return useSWR(shouldFetch ? [\"compoundCeiling\", decimals, TOKENS[chainId].DAI] : null, getCompoundCeiling(compoundAdapter));\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/stats/assetManagerStats/useCompoundCeiling.ts"],"names":["useCompoundAdapterContract","useDAIDecimals","useChainId","formatUnits","TOKENS","useSWR","useReadProvider","getCompoundCeiling","compoundAdapter","_","decimals","daiAddress","compoundCeiling","ceilingMap","useCompoundCeiling","readProvider","data","chainId","shouldFetch","DAI"],"mappings":"AAAA,OAAOA,0BAAP,MAAuC,4CAAvC;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AAGA,SAASC,MAAT,QAAuB,qBAAvB;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,eAAP,MAA4B,uBAA5B;;AAEA,MAAMC,kBAAkB,GACrBC,eAAD,IACA,OAAOC,CAAP,EAAeC,QAAf,EAAoCC,UAApC,KAA2D;AACzD,QAAMC,eAA0B,GAAG,MAAMJ,eAAe,CAACK,UAAhB,CACvCF,UADuC,CAAzC;AAGA,SAAOR,WAAW,CAACS,eAAD,EAAkBF,QAAlB,CAAlB;AACD,CAPH;;AASA,eAAe,SAASI,kBAAT,GAA8B;AAC3C,QAAMC,YAAY,GAAGT,eAAe,EAApC;AACA,QAAME,eAAyB,GAAGR,0BAA0B,CAACe,YAAD,CAA5D;AACA,QAAM;AAAEC,IAAAA,IAAI,EAAEN;AAAR,MAAqBT,cAAc,EAAzC;AACA,QAAMgB,OAAO,GAAGf,UAAU,EAA1B;AAEA,QAAMgB,WAAW,GACf,CAAC,CAACV,eAAF,IACA,CAAC,CAACS,OADF,IAEA,CAAC,CAACb,MAAM,CAACa,OAAD,CAFR,IAGA,CAAC,CAACb,MAAM,CAACa,OAAD,CAAN,CAAgBE,GAJpB;AAMA,SAAOd,MAAM,CACXa,WAAW,GAAG,CAAC,iBAAD,EAAoBR,QAApB,EAA8BN,MAAM,CAACa,OAAD,CAAN,CAAgBE,GAA9C,CAAH,GAAwD,IADxD,EAEXZ,kBAAkB,CAACC,eAAD,CAFP,CAAb;AAID","sourcesContent":["import useCompoundAdapterContract from \"hooks/contracts/useCompoundAdapterContract\";\nimport useDAIDecimals from \"hooks/useDAIDecimals\";\nimport useChainId from \"hooks/useChainId\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { TOKENS } from \"constants/variables\";\nimport useSWR from \"swr\";\nimport useReadProvider from \"hooks/useReadProvider\";\n\nconst getCompoundCeiling =\n  (compoundAdapter: Contract) =>\n  async (_: any, decimals: BigNumber, daiAddress: String) => {\n    const compoundCeiling: BigNumber = await compoundAdapter.ceilingMap(\n      daiAddress\n    );\n    return formatUnits(compoundCeiling, decimals);\n  };\n\nexport default function useCompoundCeiling() {\n  const readProvider = useReadProvider();\n  const compoundAdapter: Contract = useCompoundAdapterContract(readProvider);\n  const { data: decimals } = useDAIDecimals();\n  const chainId = useChainId();\n\n  const shouldFetch =\n    !!compoundAdapter &&\n    !!chainId &&\n    !!TOKENS[chainId] &&\n    !!TOKENS[chainId].DAI;\n\n  return useSWR(\n    shouldFetch ? [\"compoundCeiling\", decimals, TOKENS[chainId].DAI] : null,\n    getCompoundCeiling(compoundAdapter)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}