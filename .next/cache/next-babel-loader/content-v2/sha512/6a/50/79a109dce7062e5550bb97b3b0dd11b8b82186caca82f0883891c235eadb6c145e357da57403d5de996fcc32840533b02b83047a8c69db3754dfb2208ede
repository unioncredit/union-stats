{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"/Users/mathewstokes/Desktop/stats-app/components-ui/modals/StakeModal.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { newRidgeState } from \"react-ridge-state\";\nimport { ModalOverlay, Grid, Stat, ToggleMenu } from \"@unioncredit/ui\";\nimport { Modal, DepositInput, WithdrawInput } from \"components-ui\";\nimport { useModal } from \"hooks/useModal\";\nimport { useCallback } from \"react\";\nimport useRewardsData from \"hooks/data/useRewardsData\";\nimport useStakeData from \"hooks/data/useStakeData\";\nimport format from \"util/formatValue\";\nimport useCurrentToken from \"hooks/useCurrentToken\";\nimport useTokenBalance from \"hooks/data/useTokenBalance\";\nimport { Dai } from \"components-ui/Dai\";\nexport var StakeType = {\n  STAKE: \"stake\",\n  UNSTAKE: \"unstake\"\n};\nvar toggleMenuOptions = [{\n  id: StakeType.STAKE,\n  label: \"Stake\"\n}, {\n  id: StakeType.UNSTAKE,\n  label: \"Unstake\"\n}];\nexport var STAKE_MODAL = \"stake-modal\";\nexport var modalStakeType = newRidgeState(\"deposit\");\nexport var useStakeModal = function useStakeModal() {\n  _s();\n\n  var type = modalStakeType.useValue();\n\n  var _useModal = useModal(STAKE_MODAL),\n      open = _useModal.open,\n      props = _objectWithoutProperties(_useModal, [\"open\"]);\n\n  var handleOpenModal = useCallback(function (stakeType) {\n    modalStakeType.set(stakeType);\n    open();\n  }, [open]);\n\n  var setType = function setType(type) {\n    modalStakeType.set(type);\n  };\n\n  return _objectSpread(_objectSpread({}, props), {}, {\n    open: handleOpenModal,\n    type: type,\n    setType: setType\n  });\n};\n\n_s(useStakeModal, \"B7Qc/IF1W+TcwNIa49BiUMeJCOA=\", false, function () {\n  return [modalStakeType.useValue, useModal];\n});\n\nexport function StakeModal() {\n  _s2();\n\n  var _useStakeModal = useStakeModal(),\n      close = _useStakeModal.close,\n      type = _useStakeModal.type,\n      setType = _useStakeModal.setType;\n\n  var UNION = useCurrentToken(\"UNION\");\n\n  var _useTokenBalance = useTokenBalance(UNION),\n      updateUnionBalance = _useTokenBalance.mutate;\n\n  var _useStakeData = useStakeData(),\n      stakeData = _useStakeData.data,\n      updateStakeData = _useStakeData.mutate;\n\n  var _useRewardsData = useRewardsData(),\n      updateRewardsData = _useRewardsData.mutate;\n\n  var _ref = !!stakeData && stakeData,\n      _ref$totalStake = _ref.totalStake,\n      totalStake = _ref$totalStake === void 0 ? 0.0 : _ref$totalStake,\n      _ref$withdrawableStak = _ref.withdrawableStake,\n      withdrawableStake = _ref$withdrawableStak === void 0 ? 0.0 : _ref$withdrawableStak;\n\n  var onComplete = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return updateUnionBalance();\n\n            case 2:\n              _context.next = 4;\n              return updateStakeData();\n\n            case 4:\n              _context.next = 6;\n              return updateRewardsData();\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onComplete() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var onToggleChange = function onToggleChange(item) {\n    setType(item.id);\n  };\n\n  var initialActiveIndex = toggleMenuOptions.findIndex(function (_ref3) {\n    var id = _ref3.id;\n    return id === type;\n  });\n  return /*#__PURE__*/_jsxDEV(ModalOverlay, {\n    onClick: close,\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      title: \"Stake or Unstake DAI\",\n      onClose: close,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        children: /*#__PURE__*/_jsxDEV(Grid.Row, {\n          children: [/*#__PURE__*/_jsxDEV(Grid.Col, {\n            children: /*#__PURE__*/_jsxDEV(Stat, {\n              size: \"medium\",\n              mb: \"24px\",\n              align: \"center\",\n              label: \"Dai Staked\",\n              value: /*#__PURE__*/_jsxDEV(Dai, {\n                value: format(totalStake, 4)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 24\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid.Col, {\n            children: /*#__PURE__*/_jsxDEV(Stat, {\n              size: \"medium\",\n              mb: \"24px\",\n              align: \"center\",\n              label: \"Withdrawable\",\n              value: /*#__PURE__*/_jsxDEV(Dai, {\n                value: format(withdrawableStake, 4)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 24\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ToggleMenu, {\n        fluid: true,\n        onChange: onToggleChange,\n        items: toggleMenuOptions,\n        initialActive: initialActiveIndex\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), type === StakeType.STAKE ? /*#__PURE__*/_jsxDEV(DepositInput, _objectSpread({}, {\n        totalStake: totalStake,\n        onComplete: onComplete\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(WithdrawInput, _objectSpread({}, {\n        withdrawableStake: withdrawableStake,\n        totalStake: totalStake,\n        onComplete: onComplete\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(StakeModal, \"u/5B4qZOyMZIgqn9OrumRY6g3tE=\", false, function () {\n  return [useStakeModal, useCurrentToken, useTokenBalance, useStakeData, useRewardsData];\n});\n\n_c = StakeModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"StakeModal\");","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/components-ui/modals/StakeModal.js"],"names":["newRidgeState","ModalOverlay","Grid","Stat","ToggleMenu","Modal","DepositInput","WithdrawInput","useModal","useCallback","useRewardsData","useStakeData","format","useCurrentToken","useTokenBalance","Dai","StakeType","STAKE","UNSTAKE","toggleMenuOptions","id","label","STAKE_MODAL","modalStakeType","useStakeModal","type","useValue","open","props","handleOpenModal","stakeType","set","setType","StakeModal","close","UNION","updateUnionBalance","mutate","stakeData","data","updateStakeData","updateRewardsData","totalStake","withdrawableStake","onComplete","onToggleChange","item","initialActiveIndex","findIndex"],"mappings":"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","sourcesContent":["import { newRidgeState } from \"react-ridge-state\";\nimport { ModalOverlay, Grid, Stat, ToggleMenu } from \"@unioncredit/ui\";\nimport { Modal, DepositInput, WithdrawInput } from \"components-ui\";\nimport { useModal } from \"hooks/useModal\";\nimport { useCallback } from \"react\";\n\nimport useRewardsData from \"hooks/data/useRewardsData\";\nimport useStakeData from \"hooks/data/useStakeData\";\nimport format from \"util/formatValue\";\nimport useCurrentToken from \"hooks/useCurrentToken\";\nimport useTokenBalance from \"hooks/data/useTokenBalance\";\nimport { Dai } from \"components-ui/Dai\";\n\nexport const StakeType = {\n  STAKE: \"stake\",\n  UNSTAKE: \"unstake\",\n};\n\nconst toggleMenuOptions = [\n  { id: StakeType.STAKE, label: \"Stake\" },\n  { id: StakeType.UNSTAKE, label: \"Unstake\" },\n];\n\nexport const STAKE_MODAL = \"stake-modal\";\n\nexport const modalStakeType = newRidgeState(\"deposit\");\n\nexport const useStakeModal = () => {\n  const type = modalStakeType.useValue();\n  const { open, ...props } = useModal(STAKE_MODAL);\n\n  const handleOpenModal = useCallback(\n    (stakeType) => {\n      modalStakeType.set(stakeType);\n      open();\n    },\n    [open]\n  );\n\n  const setType = (type) => {\n    modalStakeType.set(type);\n  };\n\n  return { ...props, open: handleOpenModal, type, setType };\n};\n\nexport function StakeModal() {\n  const { close, type, setType } = useStakeModal();\n\n  const UNION = useCurrentToken(\"UNION\");\n  const { mutate: updateUnionBalance } = useTokenBalance(UNION);\n  const { data: stakeData, mutate: updateStakeData } = useStakeData();\n  const { mutate: updateRewardsData } = useRewardsData();\n\n  const { totalStake = 0.0, withdrawableStake = 0.0 } =\n    !!stakeData && stakeData;\n\n  const onComplete = async () => {\n    await updateUnionBalance();\n    await updateStakeData();\n    await updateRewardsData();\n  };\n\n  const onToggleChange = (item) => {\n    setType(item.id);\n  };\n\n  const initialActiveIndex = toggleMenuOptions.findIndex(\n    ({ id }) => id === type\n  );\n\n  return (\n    <ModalOverlay onClick={close}>\n      <Modal title=\"Stake or Unstake DAI\" onClose={close}>\n        <Grid>\n          <Grid.Row>\n            <Grid.Col>\n              <Stat\n                size=\"medium\"\n                mb=\"24px\"\n                align=\"center\"\n                label=\"Dai Staked\"\n                value={<Dai value={format(totalStake, 4)} />}\n              />\n            </Grid.Col>\n            <Grid.Col>\n              <Stat\n                size=\"medium\"\n                mb=\"24px\"\n                align=\"center\"\n                label=\"Withdrawable\"\n                value={<Dai value={format(withdrawableStake, 4)} />}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Grid>\n        <ToggleMenu\n          fluid\n          onChange={onToggleChange}\n          items={toggleMenuOptions}\n          initialActive={initialActiveIndex}\n        />\n        {type === StakeType.STAKE ? (\n          <DepositInput {...{ totalStake, onComplete }} />\n        ) : (\n          <WithdrawInput {...{ withdrawableStake, totalStake, onComplete }} />\n        )}\n      </Modal>\n    </ModalOverlay>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}