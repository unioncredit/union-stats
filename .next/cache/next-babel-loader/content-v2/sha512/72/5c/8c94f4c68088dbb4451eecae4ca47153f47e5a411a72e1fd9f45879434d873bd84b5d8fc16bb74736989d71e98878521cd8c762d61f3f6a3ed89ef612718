{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query ($first: Int, $account: Bytes) {\\n      \", \": borrows(first: $first, where: { account: $account }) {\\n        account\\n        amount\\n        fee\\n        timestamp\\n      }\\n      \", \": repays(first: $first, where: { account: $account }) {\\n        account\\n        amount\\n        timestamp\\n      }\\n    }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { request, gql } from \"graphql-request\";\nimport { GRAPHQL_URLS } from \"constants/variables\";\nimport { TransactionTypes } from \"constants/app\";\nimport { formatEther } from \"@ethersproject/units\";\nexport default function fetchUTokenTransactions(_x, _x2) {\n  return _fetchUTokenTransactions.apply(this, arguments);\n}\n\nfunction _fetchUTokenTransactions() {\n  _fetchUTokenTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(chainId, address) {\n    var query, variables, resp, flattened, sorted;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            query = gql(_templateObject(), TransactionTypes.BORROW, TransactionTypes.REPAY);\n            variables = {\n              first: 100,\n              account: address\n            };\n            _context.next = 4;\n            return request(GRAPHQL_URLS[chainId].utoken, query, variables);\n\n          case 4:\n            resp = _context.sent;\n            flattened = Object.keys(resp).reduce(function (acc, key) {\n              var parsed = resp[key].map(function (item) {\n                if (item.amount) {\n                  item.amount = formatEther(item.amount);\n                }\n\n                return _objectSpread(_objectSpread({}, item), {}, {\n                  address: item.account,\n                  type: key\n                });\n              });\n              return [].concat(_toConsumableArray(acc), _toConsumableArray(parsed));\n            }, []);\n            sorted = flattened.sort(function (a, b) {\n              return Number(b.timestamp) - Number(a.timestamp);\n            });\n            return _context.abrupt(\"return\", sorted);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchUTokenTransactions.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/fetchers/fetchUTokenTransactions.js"],"names":["request","gql","GRAPHQL_URLS","TransactionTypes","formatEther","fetchUTokenTransactions","chainId","address","query","BORROW","REPAY","variables","first","account","utoken","resp","flattened","Object","keys","reduce","acc","key","parsed","map","item","amount","type","sorted","sort","a","b","Number","timestamp"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,SAASA,OAAT,EAAkBC,GAAlB,QAA6B,iBAA7B;AACA,SAASC,YAAT,QAA6B,qBAA7B;AAEA,SAASC,gBAAT,QAAiC,eAAjC;AACA,SAASC,WAAT,QAA4B,sBAA5B;AAEA,wBAA8BC,uBAA9B;AAAA;AAAA;;;sFAAe,iBAAuCC,OAAvC,EAAgDC,OAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,YAAAA,KADO,GACCP,GADD,oBAGPE,gBAAgB,CAACM,MAHV,EASPN,gBAAgB,CAACO,KATV;AAiBPC,YAAAA,SAjBO,GAiBK;AAChBC,cAAAA,KAAK,EAAE,GADS;AAEhBC,cAAAA,OAAO,EAAEN;AAFO,aAjBL;AAAA;AAAA,mBAsBMP,OAAO,CAACE,YAAY,CAACI,OAAD,CAAZ,CAAsBQ,MAAvB,EAA+BN,KAA/B,EAAsCG,SAAtC,CAtBb;;AAAA;AAsBPI,YAAAA,IAtBO;AAwBPC,YAAAA,SAxBO,GAwBKC,MAAM,CAACC,IAAP,CAAYH,IAAZ,EAAkBI,MAAlB,CAAyB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACvD,kBAAMC,MAAM,GAAGP,IAAI,CAACM,GAAD,CAAJ,CAAUE,GAAV,CAAc,UAACC,IAAD,EAAU;AACrC,oBAAIA,IAAI,CAACC,MAAT,EAAiB;AACfD,kBAAAA,IAAI,CAACC,MAAL,GAAcrB,WAAW,CAACoB,IAAI,CAACC,MAAN,CAAzB;AACD;;AAED,uDACKD,IADL;AAEEjB,kBAAAA,OAAO,EAAEiB,IAAI,CAACX,OAFhB;AAGEa,kBAAAA,IAAI,EAAEL;AAHR;AAKD,eAVc,CAAf;AAYA,kDAAWD,GAAX,sBAAmBE,MAAnB;AACD,aAdiB,EAcf,EAde,CAxBL;AAwCPK,YAAAA,MAxCO,GAwCEX,SAAS,CAACY,IAAV,CAAe,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACtC,qBAAOC,MAAM,CAACD,CAAC,CAACE,SAAH,CAAN,GAAsBD,MAAM,CAACF,CAAC,CAACG,SAAH,CAAnC;AACD,aAFc,CAxCF;AAAA,6CA4CNL,MA5CM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { request, gql } from \"graphql-request\";\nimport { GRAPHQL_URLS } from \"constants/variables\";\n\nimport { TransactionTypes } from \"constants/app\";\nimport { formatEther } from \"@ethersproject/units\";\n\nexport default async function fetchUTokenTransactions(chainId, address) {\n  const query = gql`\n    query ($first: Int, $account: Bytes) {\n      ${TransactionTypes.BORROW}: borrows(first: $first, where: { account: $account }) {\n        account\n        amount\n        fee\n        timestamp\n      }\n      ${TransactionTypes.REPAY}: repays(first: $first, where: { account: $account }) {\n        account\n        amount\n        timestamp\n      }\n    }\n  `;\n\n  const variables = {\n    first: 100,\n    account: address,\n  };\n\n  const resp = await request(GRAPHQL_URLS[chainId].utoken, query, variables);\n\n  const flattened = Object.keys(resp).reduce((acc, key) => {\n    const parsed = resp[key].map((item) => {\n      if (item.amount) {\n        item.amount = formatEther(item.amount);\n      }\n\n      return {\n        ...item,\n        address: item.account,\n        type: key,\n      };\n    });\n\n    return [...acc, ...parsed];\n  }, []);\n\n  const sorted = flattened.sort((a, b) => {\n    return Number(b.timestamp) - Number(a.timestamp);\n  });\n\n  return sorted;\n}\n"]},"metadata":{},"sourceType":"module"}