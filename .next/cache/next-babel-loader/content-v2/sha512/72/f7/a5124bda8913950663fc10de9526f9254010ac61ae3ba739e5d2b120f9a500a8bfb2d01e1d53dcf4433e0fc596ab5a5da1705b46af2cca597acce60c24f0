{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { request, gql } from \"graphql-request\";\nimport { GRAPHQL_URLS } from \"constants/variables\";\nimport { TransactionTypes } from \"constants/app\";\nconst query = gql`\n  query (\n    $first: Int, \n    $memberApplicationsFilter: MemberApplication_filter,\n  ) {\n    ${TransactionTypes.REGISTER}: memberApplications(first: $first, where: $memberApplicationsFilter) {\n      applicant\n      timestamp\n    }\n  }\n`;\nexport default async function fetchUserTransactions(chainId, account) {\n  const variables = {\n    first: 100,\n    memberApplicationsFilter: {\n      applicant: account\n    }\n  };\n  const resp = await request(GRAPHQL_URLS[chainId].user, query, variables);\n  const flattened = Object.keys(resp).reduce((acc, key) => {\n    const parsed = resp[key].map(item => _objectSpread(_objectSpread({}, item), {}, {\n      type: key\n    }));\n    return [...acc, ...parsed];\n  }, []);\n  const sorted = flattened.sort((a, b) => {\n    return Number(b.timestamp) - Number(a.timestamp);\n  });\n  return sorted;\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/fetchers/fetchRegisterTransactions.js"],"names":["request","gql","GRAPHQL_URLS","TransactionTypes","query","REGISTER","fetchUserTransactions","chainId","account","variables","first","memberApplicationsFilter","applicant","resp","user","flattened","Object","keys","reduce","acc","key","parsed","map","item","type","sorted","sort","a","b","Number","timestamp"],"mappings":";;;;;;AAAA,SAASA,OAAT,EAAkBC,GAAlB,QAA6B,iBAA7B;AACA,SAASC,YAAT,QAA6B,qBAA7B;AAEA,SAASC,gBAAT,QAAiC,eAAjC;AAEA,MAAMC,KAAK,GAAGH,GAAI;AAClB;AACA;AACA;AACA;AACA,MAAME,gBAAgB,CAACE,QAAS;AAChC;AACA;AACA;AACA;AACA,CAVA;AAYA,eAAe,eAAeC,qBAAf,CAAqCC,OAArC,EAA8CC,OAA9C,EAAuD;AACpE,QAAMC,SAAS,GAAG;AAChBC,IAAAA,KAAK,EAAE,GADS;AAEhBC,IAAAA,wBAAwB,EAAE;AACxBC,MAAAA,SAAS,EAAEJ;AADa;AAFV,GAAlB;AAOA,QAAMK,IAAI,GAAG,MAAMb,OAAO,CAACE,YAAY,CAACK,OAAD,CAAZ,CAAsBO,IAAvB,EAA6BV,KAA7B,EAAoCK,SAApC,CAA1B;AAEA,QAAMM,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYJ,IAAZ,EAAkBK,MAAlB,CAAyB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACvD,UAAMC,MAAM,GAAGR,IAAI,CAACO,GAAD,CAAJ,CAAUE,GAAV,CAAeC,IAAD,oCACxBA,IADwB;AAE3BC,MAAAA,IAAI,EAAEJ;AAFqB,MAAd,CAAf;AAKA,WAAO,CAAC,GAAGD,GAAJ,EAAS,GAAGE,MAAZ,CAAP;AACD,GAPiB,EAOf,EAPe,CAAlB;AASA,QAAMI,MAAM,GAAGV,SAAS,CAACW,IAAV,CAAe,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACtC,WAAOC,MAAM,CAACD,CAAC,CAACE,SAAH,CAAN,GAAsBD,MAAM,CAACF,CAAC,CAACG,SAAH,CAAnC;AACD,GAFc,CAAf;AAIA,SAAOL,MAAP;AACD","sourcesContent":["import { request, gql } from \"graphql-request\";\nimport { GRAPHQL_URLS } from \"constants/variables\";\n\nimport { TransactionTypes } from \"constants/app\";\n\nconst query = gql`\n  query (\n    $first: Int, \n    $memberApplicationsFilter: MemberApplication_filter,\n  ) {\n    ${TransactionTypes.REGISTER}: memberApplications(first: $first, where: $memberApplicationsFilter) {\n      applicant\n      timestamp\n    }\n  }\n`;\n\nexport default async function fetchUserTransactions(chainId, account) {\n  const variables = {\n    first: 100,\n    memberApplicationsFilter: {\n      applicant: account,\n    },\n  };\n\n  const resp = await request(GRAPHQL_URLS[chainId].user, query, variables);\n\n  const flattened = Object.keys(resp).reduce((acc, key) => {\n    const parsed = resp[key].map((item) => ({\n      ...item,\n      type: key,\n    }));\n\n    return [...acc, ...parsed];\n  }, []);\n\n  const sorted = flattened.sort((a, b) => {\n    return Number(b.timestamp) - Number(a.timestamp);\n  });\n\n  return sorted;\n}\n"]},"metadata":{},"sourceType":"module"}