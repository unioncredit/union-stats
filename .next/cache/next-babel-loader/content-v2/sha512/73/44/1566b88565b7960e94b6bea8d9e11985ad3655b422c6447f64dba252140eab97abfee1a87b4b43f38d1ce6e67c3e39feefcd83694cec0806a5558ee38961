{"ast":null,"code":"import { useEffect as _useEffect } from \"react\";\nimport { useCallback, useState } from \"react\";\nimport { useCopyToClipboard } from \"react-use\";\nexport default function useCopy(timeout = 1000) {\n  const [, copyToClipboard] = useCopyToClipboard();\n  const {\n    0: isCopied,\n    1: setIsCopied\n  } = useState(false);\n  const copy = useCallback(text => {\n    copyToClipboard(text);\n    setIsCopied(true);\n  }, []);\n\n  _useEffect(() => {\n    if (isCopied) {\n      const hide = setTimeout(() => {\n        setIsCopied(false);\n      }, timeout);\n      return () => {\n        clearTimeout(hide);\n      };\n    }\n  }, [isCopied, timeout]);\n\n  return [isCopied, copy];\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/useCopy.ts"],"names":["useCallback","useState","useCopyToClipboard","useCopy","timeout","copyToClipboard","isCopied","setIsCopied","copy","text","hide","setTimeout","clearTimeout"],"mappings":";AACA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,SAASC,kBAAT,QAAmC,WAAnC;AAEA,eAAe,SAASC,OAAT,CAAiBC,OAAO,GAAG,IAA3B,EAAiC;AAC9C,QAAM,GAAGC,eAAH,IAAsBH,kBAAkB,EAA9C;AAEA,QAAM;AAAA,OAACI,QAAD;AAAA,OAAWC;AAAX,MAA0BN,QAAQ,CAAC,KAAD,CAAxC;AAEA,QAAMO,IAAI,GAAGR,WAAW,CAAES,IAAD,IAAU;AACjCJ,IAAAA,eAAe,CAACI,IAAD,CAAf;AACAF,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD,GAHuB,EAGrB,EAHqB,CAAxB;;AAKA,aAAc,MAAM;AAClB,QAAID,QAAJ,EAAc;AACZ,YAAMI,IAAI,GAAGC,UAAU,CAAC,MAAM;AAC5BJ,QAAAA,WAAW,CAAC,KAAD,CAAX;AACD,OAFsB,EAEpBH,OAFoB,CAAvB;AAIA,aAAO,MAAM;AACXQ,QAAAA,YAAY,CAACF,IAAD,CAAZ;AACD,OAFD;AAGD;AACF,GAVD,GACMJ,QADN,EAIOF,OAJP;;AAYA,SAAO,CAACE,QAAD,EAAWE,IAAX,CAAP;AACD","sourcesContent":["import { useAutoEffect } from \"hooks.macro\";\nimport { useCallback, useState } from \"react\";\nimport { useCopyToClipboard } from \"react-use\";\n\nexport default function useCopy(timeout = 1000) {\n  const [, copyToClipboard] = useCopyToClipboard();\n\n  const [isCopied, setIsCopied] = useState(false);\n\n  const copy = useCallback((text) => {\n    copyToClipboard(text);\n    setIsCopied(true);\n  }, []);\n\n  useAutoEffect(() => {\n    if (isCopied) {\n      const hide = setTimeout(() => {\n        setIsCopied(false);\n      }, timeout);\n\n      return () => {\n        clearTimeout(hide);\n      };\n    }\n  });\n\n  return [isCopied, copy];\n}\n"]},"metadata":{},"sourceType":"module"}