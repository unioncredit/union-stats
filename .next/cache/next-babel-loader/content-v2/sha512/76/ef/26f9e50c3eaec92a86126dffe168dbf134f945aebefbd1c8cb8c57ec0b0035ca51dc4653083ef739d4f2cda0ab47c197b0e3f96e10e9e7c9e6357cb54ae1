{"ast":null,"code":"import useAaveAdapterContract from \"hooks/contracts/useAaveAdapterContract\";\nimport useDAIDecimals from \"hooks/useDAIDecimals\";\nimport useChainId from \"hooks/useChainId\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { TOKENS } from \"constants/variables\";\nimport useSWR from \"swr\";\nimport useReadProvider from \"hooks/useReadProvider\";\n\nconst getDAIInAave = AaveAdapter => async (_, decimals, daiAddress) => {\n  const daiInAave = await AaveAdapter.getSupplyView(daiAddress);\n  return formatUnits(daiInAave, decimals);\n};\n\nexport default function useDAIInAave() {\n  const readProvider = useReadProvider();\n  const AaveAdapter = useAaveAdapterContract(readProvider);\n  const {\n    data: decimals\n  } = useDAIDecimals();\n  const chainId = useChainId();\n  const shouldFetch = !!AaveAdapter && chainId && TOKENS[chainId] && TOKENS[chainId].DAI;\n  return useSWR(shouldFetch ? [\"daiInAave\", decimals, TOKENS[chainId].DAI] : null, getDAIInAave(AaveAdapter));\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/union/union-stats/union-stats/hooks/stats/assetManagerStats/useDAIInAave.ts"],"names":["useAaveAdapterContract","useDAIDecimals","useChainId","formatUnits","TOKENS","useSWR","useReadProvider","getDAIInAave","AaveAdapter","_","decimals","daiAddress","daiInAave","getSupplyView","useDAIInAave","readProvider","data","chainId","shouldFetch","DAI"],"mappings":"AAAA,OAAOA,sBAAP,MAAmC,wCAAnC;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AAGA,SAASC,MAAT,QAAuB,qBAAvB;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,eAAP,MAA4B,uBAA5B;;AAEA,MAAMC,YAAY,GACfC,WAAD,IACA,OAAOC,CAAP,EAAeC,QAAf,EAAoCC,UAApC,KAA2D;AACzD,QAAMC,SAAoB,GAAG,MAAMJ,WAAW,CAACK,aAAZ,CAA0BF,UAA1B,CAAnC;AACA,SAAOR,WAAW,CAACS,SAAD,EAAYF,QAAZ,CAAlB;AACD,CALH;;AAOA,eAAe,SAASI,YAAT,GAAwB;AACrC,QAAMC,YAAY,GAAGT,eAAe,EAApC;AACA,QAAME,WAAqB,GAAGR,sBAAsB,CAACe,YAAD,CAApD;AACA,QAAM;AAAEC,IAAAA,IAAI,EAAEN;AAAR,MAAqBT,cAAc,EAAzC;AACA,QAAMgB,OAAO,GAAGf,UAAU,EAA1B;AACA,QAAMgB,WAAW,GACf,CAAC,CAACV,WAAF,IAAiBS,OAAjB,IAA4Bb,MAAM,CAACa,OAAD,CAAlC,IAA+Cb,MAAM,CAACa,OAAD,CAAN,CAAgBE,GADjE;AAEA,SAAOd,MAAM,CACXa,WAAW,GAAG,CAAC,WAAD,EAAcR,QAAd,EAAwBN,MAAM,CAACa,OAAD,CAAN,CAAgBE,GAAxC,CAAH,GAAkD,IADlD,EAEXZ,YAAY,CAACC,WAAD,CAFD,CAAb;AAID","sourcesContent":["import useAaveAdapterContract from \"hooks/contracts/useAaveAdapterContract\";\nimport useDAIDecimals from \"hooks/useDAIDecimals\";\nimport useChainId from \"hooks/useChainId\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { TOKENS } from \"constants/variables\";\nimport useSWR from \"swr\";\nimport useReadProvider from \"hooks/useReadProvider\";\n\nconst getDAIInAave =\n  (AaveAdapter: Contract) =>\n  async (_: any, decimals: BigNumber, daiAddress: String) => {\n    const daiInAave: BigNumber = await AaveAdapter.getSupplyView(daiAddress);\n    return formatUnits(daiInAave, decimals);\n  };\n\nexport default function useDAIInAave() {\n  const readProvider = useReadProvider();\n  const AaveAdapter: Contract = useAaveAdapterContract(readProvider);\n  const { data: decimals } = useDAIDecimals();\n  const chainId = useChainId();\n  const shouldFetch =\n    !!AaveAdapter && chainId && TOKENS[chainId] && TOKENS[chainId].DAI;\n  return useSWR(\n    shouldFetch ? [\"daiInAave\", decimals, TOKENS[chainId].DAI] : null,\n    getDAIInAave(AaveAdapter)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}