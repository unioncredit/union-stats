{"ast":null,"code":"import { isAddress } from \"@ethersproject/address\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport useSWR from \"swr\";\nimport parseRes from \"util/parseRes\";\nimport useComptrollerContract from \"../contracts/useComptrollerContract\";\nimport useCurrentToken from \"../useCurrentToken\";\n\nconst getRewardsData = contract => async (_, account, tokenAddress) => {\n  try {\n    const rewardsMultiplier = await contract.getRewardsMultiplier(account, tokenAddress);\n    const rewards = await contract.calculateRewards(account, tokenAddress);\n    return {\n      rewards: parseRes(rewards, 3),\n      rewardsMultiplier: parseRes(rewardsMultiplier)\n    };\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\nexport default function useRewardsData() {\n  const {\n    account,\n    chainId\n  } = useWeb3React();\n  const comptrollerContract = useComptrollerContract();\n  const curToken = useCurrentToken();\n  const shouldFetch = !!comptrollerContract && typeof chainId === \"number\" && typeof account === \"string\" && isAddress(curToken);\n  return useSWR(shouldFetch ? [\"RewardsData\", account, curToken, chainId] : null, getRewardsData(comptrollerContract), {\n    refreshInterval: 30 * 1000\n  });\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/data/useRewardsData.ts"],"names":["isAddress","useWeb3React","useSWR","parseRes","useComptrollerContract","useCurrentToken","getRewardsData","contract","_","account","tokenAddress","rewardsMultiplier","getRewardsMultiplier","rewards","calculateRewards","error","console","useRewardsData","chainId","comptrollerContract","curToken","shouldFetch","refreshInterval"],"mappings":"AAAA,SAASA,SAAT,QAA0B,wBAA1B;AAEA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,sBAAP,MAAmC,qCAAnC;AACA,OAAOC,eAAP,MAA4B,oBAA5B;;AAEA,MAAMC,cAAc,GACjBC,QAAD,IACA,OAAOC,CAAP,EAAeC,OAAf,EAAgCC,YAAhC,KAAyD;AACvD,MAAI;AACF,UAAMC,iBAAiB,GAAG,MAAMJ,QAAQ,CAACK,oBAAT,CAC9BH,OAD8B,EAE9BC,YAF8B,CAAhC;AAKA,UAAMG,OAAO,GAAG,MAAMN,QAAQ,CAACO,gBAAT,CAA0BL,OAA1B,EAAmCC,YAAnC,CAAtB;AAEA,WAAO;AACLG,MAAAA,OAAO,EAAEV,QAAQ,CAACU,OAAD,EAAU,CAAV,CADZ;AAELF,MAAAA,iBAAiB,EAAER,QAAQ,CAACQ,iBAAD;AAFtB,KAAP;AAID,GAZD,CAYE,OAAOI,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,UAAMA,KAAN;AACD;AACF,CAnBH;;AAqBA,eAAe,SAASE,cAAT,GAA0B;AACvC,QAAM;AAAER,IAAAA,OAAF;AAAWS,IAAAA;AAAX,MAAuBjB,YAAY,EAAzC;AACA,QAAMkB,mBAAmB,GAAGf,sBAAsB,EAAlD;AACA,QAAMgB,QAAQ,GAAGf,eAAe,EAAhC;AAEA,QAAMgB,WAAW,GACf,CAAC,CAACF,mBAAF,IACA,OAAOD,OAAP,KAAmB,QADnB,IAEA,OAAOT,OAAP,KAAmB,QAFnB,IAGAT,SAAS,CAACoB,QAAD,CAJX;AAMA,SAAOlB,MAAM,CACXmB,WAAW,GAAG,CAAC,aAAD,EAAgBZ,OAAhB,EAAyBW,QAAzB,EAAmCF,OAAnC,CAAH,GAAiD,IADjD,EAEXZ,cAAc,CAACa,mBAAD,CAFH,EAGX;AACEG,IAAAA,eAAe,EAAE,KAAK;AADxB,GAHW,CAAb;AAOD","sourcesContent":["import { isAddress } from \"@ethersproject/address\";\nimport type { Contract } from \"@ethersproject/contracts\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport useSWR from \"swr\";\nimport parseRes from \"util/parseRes\";\nimport useComptrollerContract from \"../contracts/useComptrollerContract\";\nimport useCurrentToken from \"../useCurrentToken\";\n\nconst getRewardsData =\n  (contract: Contract) =>\n  async (_: any, account: string, tokenAddress: string) => {\n    try {\n      const rewardsMultiplier = await contract.getRewardsMultiplier(\n        account,\n        tokenAddress\n      );\n\n      const rewards = await contract.calculateRewards(account, tokenAddress);\n\n      return {\n        rewards: parseRes(rewards, 3),\n        rewardsMultiplier: parseRes(rewardsMultiplier),\n      };\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  };\n\nexport default function useRewardsData() {\n  const { account, chainId } = useWeb3React();\n  const comptrollerContract = useComptrollerContract();\n  const curToken = useCurrentToken();\n\n  const shouldFetch =\n    !!comptrollerContract &&\n    typeof chainId === \"number\" &&\n    typeof account === \"string\" &&\n    isAddress(curToken);\n\n  return useSWR(\n    shouldFetch ? [\"RewardsData\", account, curToken, chainId] : null,\n    getRewardsData(comptrollerContract),\n    {\n      refreshInterval: 30 * 1000,\n    }\n  );\n}\n"]},"metadata":{},"sourceType":"module"}