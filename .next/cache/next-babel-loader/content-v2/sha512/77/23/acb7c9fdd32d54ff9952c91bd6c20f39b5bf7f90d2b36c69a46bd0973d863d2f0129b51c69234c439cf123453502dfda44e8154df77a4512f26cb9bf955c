{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mathewstokes/Desktop/union-stats/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mathewstokes/Desktop/union-stats/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport useAssetContract from \"hooks/contracts/useAssetContract\";\nimport useDAIDecimals from \"hooks/useDAIDecimals\";\nimport useChainId from \"hooks/useChainId\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { TOKENS } from \"constants/variables\";\nimport useSWR from \"swr\";\nimport useReadProvider from \"hooks/useReadProvider\";\n\nvar getPoolBalance = function getPoolBalance(assetContract) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_, decimals, daiAddress) {\n      var poolBalance;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return assetContract.getPoolBalance(daiAddress);\n\n            case 2:\n              poolBalance = _context.sent;\n              return _context.abrupt(\"return\", formatUnits(poolBalance, decimals));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\nexport default function usePoolBalance() {\n  _s();\n\n  var readProvider = useReadProvider();\n  var assetContract = useAssetContract(readProvider);\n\n  var _useDAIDecimals = useDAIDecimals(),\n      decimals = _useDAIDecimals.data;\n\n  var chainId = useChainId();\n  var shouldFetch = !!assetContract && chainId && TOKENS[chainId] && TOKENS[chainId].DAI;\n  return useSWR(shouldFetch ? [\"poolBalance\", decimals, TOKENS[chainId].DAI] : null, getPoolBalance(assetContract));\n}\n\n_s(usePoolBalance, \"DTBMn42fq51Y5YzhYbFKEWDWg6A=\", false, function () {\n  return [useReadProvider, useAssetContract, useDAIDecimals, useChainId, useSWR];\n});","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/union-stats/hooks/stats/assetManagerStats/usePoolBalance.ts"],"names":["useAssetContract","useDAIDecimals","useChainId","formatUnits","TOKENS","useSWR","useReadProvider","getPoolBalance","assetContract","_","decimals","daiAddress","poolBalance","usePoolBalance","readProvider","data","chainId","shouldFetch","DAI"],"mappings":";;;;;AAAA,OAAOA,gBAAP,MAA6B,kCAA7B;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AAGA,SAASC,MAAT,QAAuB,qBAAvB;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,eAAP,MAA4B,uBAA5B;;AAEA,IAAMC,cAAc,GAClB,SADIA,cACJ,CAACC,aAAD;AAAA;AAAA,wEACA,iBAAOC,CAAP,EAAeC,QAAf,EAAoCC,UAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACuCH,aAAa,CAACD,cAAd,CACnCI,UADmC,CADvC;;AAAA;AACQC,cAAAA,WADR;AAAA,+CAIST,WAAW,CAACS,WAAD,EAAcF,QAAd,CAJpB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADA;;AAAA;AAAA;AAAA;AAAA;AAAA,CADF;;AASA,eAAe,SAASG,cAAT,GAA0B;AAAA;;AACvC,MAAMC,YAAY,GAAGR,eAAe,EAApC;AACA,MAAME,aAAuB,GAAGR,gBAAgB,CAACc,YAAD,CAAhD;;AAFuC,wBAGZb,cAAc,EAHF;AAAA,MAGzBS,QAHyB,mBAG/BK,IAH+B;;AAIvC,MAAMC,OAAO,GAAGd,UAAU,EAA1B;AAEA,MAAMe,WAAW,GACf,CAAC,CAACT,aAAF,IAAmBQ,OAAnB,IAA8BZ,MAAM,CAACY,OAAD,CAApC,IAAiDZ,MAAM,CAACY,OAAD,CAAN,CAAgBE,GADnE;AAEA,SAAOb,MAAM,CACXY,WAAW,GAAG,CAAC,aAAD,EAAgBP,QAAhB,EAA0BN,MAAM,CAACY,OAAD,CAAN,CAAgBE,GAA1C,CAAH,GAAoD,IADpD,EAEXX,cAAc,CAACC,aAAD,CAFH,CAAb;AAID;;GAZuBK,c;UACDP,e,EACWN,gB,EACLC,c,EACXC,U,EAITG,M","sourcesContent":["import useAssetContract from \"hooks/contracts/useAssetContract\";\nimport useDAIDecimals from \"hooks/useDAIDecimals\";\nimport useChainId from \"hooks/useChainId\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { TOKENS } from \"constants/variables\";\nimport useSWR from \"swr\";\nimport useReadProvider from \"hooks/useReadProvider\";\n\nconst getPoolBalance =\n  (assetContract: Contract) =>\n  async (_: any, decimals: BigNumber, daiAddress: String) => {\n    const poolBalance: BigNumber = await assetContract.getPoolBalance(\n      daiAddress\n    );\n    return formatUnits(poolBalance, decimals);\n  };\n\nexport default function usePoolBalance() {\n  const readProvider = useReadProvider();\n  const assetContract: Contract = useAssetContract(readProvider);\n  const { data: decimals } = useDAIDecimals();\n  const chainId = useChainId();\n\n  const shouldFetch =\n    !!assetContract && chainId && TOKENS[chainId] && TOKENS[chainId].DAI;\n  return useSWR(\n    shouldFetch ? [\"poolBalance\", decimals, TOKENS[chainId].DAI] : null,\n    getPoolBalance(assetContract)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}