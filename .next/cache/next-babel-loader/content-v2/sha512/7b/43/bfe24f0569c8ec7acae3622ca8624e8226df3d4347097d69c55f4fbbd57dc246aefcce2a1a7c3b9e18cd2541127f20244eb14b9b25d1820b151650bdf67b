{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/mathewstokes/Desktop/stats-app/components-ui/WithdrawInput.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useForm } from \"react-hook-form\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport getReceipt from \"util/getReceipt\";\nimport handleTxError from \"util/handleTxError\";\nimport errorMessages from \"util/errorMessages\";\nimport useStakeWithdraw from \"hooks/payables/useStakeWithdraw\";\nimport { Button, Box, Dai, Input } from \"@unioncredit/ui\";\nimport { useAddActivity } from \"hooks/data/useActivity\";\nimport activityLabels from \"util/activityLabels\";\nimport isHash from \"util/isHash\";\nexport var WithdrawInput = function WithdrawInput(_ref) {\n  _s();\n\n  var _errors$amount;\n\n  var withdrawableStake = _ref.withdrawableStake,\n      onComplete = _ref.onComplete;\n\n  var _useWeb3React = useWeb3React(),\n      library = _useWeb3React.library;\n\n  var addActivity = useAddActivity();\n\n  var _useForm = useForm({\n    mode: \"onChange\",\n    reValidateMode: \"onChange\"\n  }),\n      handleSubmit = _useForm.handleSubmit,\n      register = _useForm.register,\n      setValue = _useForm.setValue,\n      formState = _useForm.formState,\n      errors = _useForm.errors,\n      reset = _useForm.reset,\n      watch = _useForm.watch;\n\n  var isDirty = formState.isDirty,\n      isSubmitting = formState.isSubmitting;\n  var watchAmount = watch(\"amount\", 0);\n  var amount = Number(watchAmount || 0);\n  var withdraw = useStakeWithdraw();\n\n  var onSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n      var _yield$withdraw, hash, _hash;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return withdraw(values.amount);\n\n            case 3:\n              _yield$withdraw = _context.sent;\n              hash = _yield$withdraw.hash;\n              _context.next = 7;\n              return getReceipt(hash, library, {\n                pending: \"Unstaking \".concat(values.amount, \" DAI\"),\n                success: \"Unstaked \".concat(values.amount, \" DAI\")\n              });\n\n            case 7:\n              _context.next = 9;\n              return onComplete();\n\n            case 9:\n              addActivity(activityLabels.withdraw({\n                amount: values.amount,\n                hash: hash\n              }));\n              reset();\n              _context.next = 18;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](0);\n              _hash = isHash(_context.t0.message) && _context.t0.message;\n              addActivity(activityLabels.withdraw({\n                amount: values.amount,\n                hash: _hash\n              }, true));\n              handleTxError(_context.t0, \"Failed to unstake \".concat(values.amount, \" DAI\"));\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 13]]);\n    }));\n\n    return function onSubmit(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleMaxWithdraw = function handleMaxWithdraw() {\n    setValue(\"amount\", withdrawableStake, {\n      shouldDirty: true,\n      shouldValidate: true\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      mt: \"18px\",\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        type: \"number\",\n        ref: register({\n          required: errorMessages.required,\n          max: {\n            value: withdrawableStake,\n            message: errorMessages.notEnoughStake\n          },\n          min: {\n            value: 0.01,\n            message: errorMessages.minValuePointZeroOne\n          }\n        }),\n        name: \"amount\",\n        label: \"Amount to unstake\",\n        caption: \"Max. \".concat(withdrawableStake, \" DAI\"),\n        onCaptionClick: handleMaxWithdraw,\n        placeholder: \"0\",\n        suffix: /*#__PURE__*/_jsxDEV(Dai, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 19\n        }, _this),\n        error: errors === null || errors === void 0 ? void 0 : (_errors$amount = errors.amount) === null || _errors$amount === void 0 ? void 0 : _errors$amount.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Button, {\n      fluid: true,\n      type: \"submit\",\n      mt: \"18px\",\n      label: \"Unstake \".concat(amount, \" DAI\"),\n      loading: isSubmitting,\n      disabled: !isDirty\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(WithdrawInput, \"BGGrywC6C+hM6vT1JwDCknrfDNU=\", false, function () {\n  return [useWeb3React, useAddActivity, useForm, useStakeWithdraw];\n});\n\n_c = WithdrawInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"WithdrawInput\");","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/components-ui/WithdrawInput.js"],"names":["useForm","useWeb3React","getReceipt","handleTxError","errorMessages","useStakeWithdraw","Button","Box","Dai","Input","useAddActivity","activityLabels","isHash","WithdrawInput","withdrawableStake","onComplete","library","addActivity","mode","reValidateMode","handleSubmit","register","setValue","formState","errors","reset","watch","isDirty","isSubmitting","watchAmount","amount","Number","withdraw","onSubmit","values","hash","pending","success","message","handleMaxWithdraw","shouldDirty","shouldValidate","required","max","value","notEnoughStake","min","minValuePointZeroOne"],"mappings":"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","sourcesContent":["import { useForm } from \"react-hook-form\";\nimport { useWeb3React } from \"@web3-react/core\";\n\nimport getReceipt from \"util/getReceipt\";\nimport handleTxError from \"util/handleTxError\";\nimport errorMessages from \"util/errorMessages\";\nimport useStakeWithdraw from \"hooks/payables/useStakeWithdraw\";\nimport { Button, Box, Dai, Input } from \"@unioncredit/ui\";\nimport { useAddActivity } from \"hooks/data/useActivity\";\nimport activityLabels from \"util/activityLabels\";\nimport isHash from \"util/isHash\";\n\nexport const WithdrawInput = ({ withdrawableStake, onComplete }) => {\n  const { library } = useWeb3React();\n  const addActivity = useAddActivity();\n  const { handleSubmit, register, setValue, formState, errors, reset, watch } =\n    useForm({\n      mode: \"onChange\",\n      reValidateMode: \"onChange\",\n    });\n\n  const { isDirty, isSubmitting } = formState;\n\n  const watchAmount = watch(\"amount\", 0);\n  const amount = Number(watchAmount || 0);\n\n  const withdraw = useStakeWithdraw();\n\n  const onSubmit = async (values) => {\n    try {\n      const { hash } = await withdraw(values.amount);\n      await getReceipt(hash, library, {\n        pending: `Unstaking ${values.amount} DAI`,\n        success: `Unstaked ${values.amount} DAI`,\n      });\n      await onComplete();\n      addActivity(activityLabels.withdraw({ amount: values.amount, hash }));\n      reset();\n    } catch (err) {\n      const hash = isHash(err.message) && err.message;\n      addActivity(\n        activityLabels.withdraw({ amount: values.amount, hash }, true)\n      );\n      handleTxError(err, `Failed to unstake ${values.amount} DAI`);\n    }\n  };\n\n  const handleMaxWithdraw = () => {\n    setValue(\"amount\", withdrawableStake, {\n      shouldDirty: true,\n      shouldValidate: true,\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Box mt=\"18px\">\n        <Input\n          type=\"number\"\n          ref={register({\n            required: errorMessages.required,\n            max: {\n              value: withdrawableStake,\n              message: errorMessages.notEnoughStake,\n            },\n            min: {\n              value: 0.01,\n              message: errorMessages.minValuePointZeroOne,\n            },\n          })}\n          name=\"amount\"\n          label=\"Amount to unstake\"\n          caption={`Max. ${withdrawableStake} DAI`}\n          onCaptionClick={handleMaxWithdraw}\n          placeholder=\"0\"\n          suffix={<Dai />}\n          error={errors?.amount?.message}\n        />\n      </Box>\n      <Button\n        fluid\n        type=\"submit\"\n        mt=\"18px\"\n        label={`Unstake ${amount} DAI`}\n        loading={isSubmitting}\n        disabled={!isDirty}\n      />\n    </form>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}