{"ast":null,"code":"import { isAddress } from \"@ethersproject/address\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport useSWR from \"swr\";\nimport useCurrentToken from \"../useCurrentToken\";\nimport USER_MANAGER_ABI from \"constants/abis/userManager.json\";\nimport useMarketRegistryContract from \"../contracts/useMarketRegistryContract\";\n\nconst getCreditLimit = marketRegistryContract => async (_, library, account, tokenAddress) => {\n  const signer = library.getSigner();\n  const res = await marketRegistryContract.tokens(tokenAddress);\n  const userManagerAddress = res.userManager;\n  const userManagerContract = new Contract(userManagerAddress, USER_MANAGER_ABI, signer);\n  const limit = await userManagerContract.getCreditLimit(account);\n  return Number(formatUnits(limit, 18));\n};\n\nexport default function useCreditLimit(address) {\n  const {\n    account: connectedAccount,\n    library\n  } = useWeb3React();\n  const curToken = useCurrentToken();\n  const marketRegistryContract = useMarketRegistryContract();\n  const account = address || connectedAccount;\n  const shouldFetch = !!marketRegistryContract && typeof account === \"string\" && isAddress(curToken) && !!library;\n  return useSWR(shouldFetch ? [\"CreditLimit\", library, account, curToken] : null, getCreditLimit(marketRegistryContract));\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/data/useCreditLimit.ts"],"names":["isAddress","Contract","formatUnits","useWeb3React","useSWR","useCurrentToken","USER_MANAGER_ABI","useMarketRegistryContract","getCreditLimit","marketRegistryContract","_","library","account","tokenAddress","signer","getSigner","res","tokens","userManagerAddress","userManager","userManagerContract","limit","Number","useCreditLimit","address","connectedAccount","curToken","shouldFetch"],"mappings":"AAAA,SAASA,SAAT,QAA0B,wBAA1B;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,OAAOC,yBAAP,MAAsC,wCAAtC;;AAEA,MAAMC,cAAc,GACjBC,sBAAD,IACA,OAAOC,CAAP,EAAeC,OAAf,EAA6BC,OAA7B,EAA8CC,YAA9C,KAAuE;AACrE,QAAMC,MAAM,GAAGH,OAAO,CAACI,SAAR,EAAf;AACA,QAAMC,GAAG,GAAG,MAAMP,sBAAsB,CAACQ,MAAvB,CAA8BJ,YAA9B,CAAlB;AACA,QAAMK,kBAAkB,GAAGF,GAAG,CAACG,WAA/B;AACA,QAAMC,mBAAmB,GAAG,IAAInB,QAAJ,CAC1BiB,kBAD0B,EAE1BZ,gBAF0B,EAG1BQ,MAH0B,CAA5B;AAMA,QAAMO,KAAK,GAAG,MAAMD,mBAAmB,CAACZ,cAApB,CAAmCI,OAAnC,CAApB;AAEA,SAAOU,MAAM,CAACpB,WAAW,CAACmB,KAAD,EAAQ,EAAR,CAAZ,CAAb;AACD,CAfH;;AAiBA,eAAe,SAASE,cAAT,CAAwBC,OAAxB,EAAyC;AACtD,QAAM;AAAEZ,IAAAA,OAAO,EAAEa,gBAAX;AAA6Bd,IAAAA;AAA7B,MAAyCR,YAAY,EAA3D;AACA,QAAMuB,QAAQ,GAAGrB,eAAe,EAAhC;AACA,QAAMI,sBAAsB,GAAGF,yBAAyB,EAAxD;AAEA,QAAMK,OAAO,GAAGY,OAAO,IAAIC,gBAA3B;AAEA,QAAME,WAAW,GACf,CAAC,CAAClB,sBAAF,IACA,OAAOG,OAAP,KAAmB,QADnB,IAEAZ,SAAS,CAAC0B,QAAD,CAFT,IAGA,CAAC,CAACf,OAJJ;AAMA,SAAOP,MAAM,CACXuB,WAAW,GAAG,CAAC,aAAD,EAAgBhB,OAAhB,EAAyBC,OAAzB,EAAkCc,QAAlC,CAAH,GAAiD,IADjD,EAEXlB,cAAc,CAACC,sBAAD,CAFH,CAAb;AAID","sourcesContent":["import { isAddress } from \"@ethersproject/address\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport useSWR from \"swr\";\nimport useCurrentToken from \"../useCurrentToken\";\nimport USER_MANAGER_ABI from \"constants/abis/userManager.json\";\nimport useMarketRegistryContract from \"../contracts/useMarketRegistryContract\";\n\nconst getCreditLimit =\n  (marketRegistryContract: Contract) =>\n  async (_: any, library: any, account: string, tokenAddress: string) => {\n    const signer = library.getSigner();\n    const res = await marketRegistryContract.tokens(tokenAddress);\n    const userManagerAddress = res.userManager;\n    const userManagerContract = new Contract(\n      userManagerAddress,\n      USER_MANAGER_ABI,\n      signer\n    );\n\n    const limit = await userManagerContract.getCreditLimit(account);\n\n    return Number(formatUnits(limit, 18));\n  };\n\nexport default function useCreditLimit(address: string) {\n  const { account: connectedAccount, library } = useWeb3React();\n  const curToken = useCurrentToken();\n  const marketRegistryContract = useMarketRegistryContract();\n\n  const account = address || connectedAccount;\n\n  const shouldFetch =\n    !!marketRegistryContract &&\n    typeof account === \"string\" &&\n    isAddress(curToken) &&\n    !!library;\n\n  return useSWR(\n    shouldFetch ? [\"CreditLimit\", library, account, curToken] : null,\n    getCreditLimit(marketRegistryContract)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}