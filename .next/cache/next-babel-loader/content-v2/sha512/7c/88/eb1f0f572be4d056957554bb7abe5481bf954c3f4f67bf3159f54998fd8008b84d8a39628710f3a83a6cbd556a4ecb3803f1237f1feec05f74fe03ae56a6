{"ast":null,"code":"import { useCallback } from \"react\";\nimport { newRidgeState } from \"react-ridge-state\";\nconst initialState = [];\nexport const toastState = newRidgeState(initialState);\nexport const FLAVORS = {\n  TX_PENDING: (hash, body) => ({\n    body: body || \"Transaction is pending.\",\n    hash,\n    type: \"pending\",\n    hideAfter: 0\n  }),\n  TX_SUCCESS: (hash, body) => ({\n    body: body || \"Transaction successful.\",\n    hash,\n    type: \"success\",\n    hideAfter: 15\n  }),\n  TX_ERROR: (message = \"Transaction failed\", hash) => ({\n    body: message,\n    hash,\n    type: \"error\",\n    hideAfter: 15\n  }),\n  LOGGED_OUT: {\n    body: \"You’ve succesfully logged out\",\n    type: \"success\",\n    hideAfter: 15\n  },\n  SUCCESS: message => ({\n    body: message,\n    type: \"success\",\n    hideAfter: 15\n  }),\n  ERROR: message => ({\n    body: message,\n    type: \"error\",\n    hideAfter: 15\n  })\n};\nexport const removeToast = id => {\n  toastState.set(x => x.filter(toast => toast.id !== id));\n};\nexport const addToast = toast => {\n  var _toastState$get$lengt;\n\n  let timer;\n  toast.id = (_toastState$get$lengt = toastState.get().length) !== null && _toastState$get$lengt !== void 0 ? _toastState$get$lengt : 0;\n  toastState.set(x => [...x, toast]);\n\n  const hide = () => {\n    clearTimeout(timer);\n    removeToast(toast.id);\n  };\n\n  if (!isNaN(toast.hideAfter) && toast.hideAfter > 0) {\n    timer = setTimeout(() => removeToast(toast.id), toast.hideAfter * 1000);\n  }\n\n  return {\n    hide\n  };\n};\nexport default function useToast() {\n  return useCallback(addToast, []);\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/union-stats/hooks/useToast.js"],"names":["useCallback","newRidgeState","initialState","toastState","FLAVORS","TX_PENDING","hash","body","type","hideAfter","TX_SUCCESS","TX_ERROR","message","LOGGED_OUT","SUCCESS","ERROR","removeToast","id","set","x","filter","toast","addToast","timer","get","length","hide","clearTimeout","isNaN","setTimeout","useToast"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,aAAT,QAA8B,mBAA9B;AAEA,MAAMC,YAAY,GAAG,EAArB;AAEA,OAAO,MAAMC,UAAU,GAAGF,aAAa,CAACC,YAAD,CAAhC;AAEP,OAAO,MAAME,OAAO,GAAG;AACrBC,EAAAA,UAAU,EAAE,CAACC,IAAD,EAAOC,IAAP,MAAiB;AAC3BA,IAAAA,IAAI,EAAEA,IAAI,IAAI,yBADa;AAE3BD,IAAAA,IAF2B;AAG3BE,IAAAA,IAAI,EAAE,SAHqB;AAI3BC,IAAAA,SAAS,EAAE;AAJgB,GAAjB,CADS;AAOrBC,EAAAA,UAAU,EAAE,CAACJ,IAAD,EAAOC,IAAP,MAAiB;AAC3BA,IAAAA,IAAI,EAAEA,IAAI,IAAI,yBADa;AAE3BD,IAAAA,IAF2B;AAG3BE,IAAAA,IAAI,EAAE,SAHqB;AAI3BC,IAAAA,SAAS,EAAE;AAJgB,GAAjB,CAPS;AAarBE,EAAAA,QAAQ,EAAE,CAACC,OAAO,GAAG,oBAAX,EAAiCN,IAAjC,MAA2C;AACnDC,IAAAA,IAAI,EAAEK,OAD6C;AAEnDN,IAAAA,IAFmD;AAGnDE,IAAAA,IAAI,EAAE,OAH6C;AAInDC,IAAAA,SAAS,EAAE;AAJwC,GAA3C,CAbW;AAmBrBI,EAAAA,UAAU,EAAE;AACVN,IAAAA,IAAI,EAAE,+BADI;AAEVC,IAAAA,IAAI,EAAE,SAFI;AAGVC,IAAAA,SAAS,EAAE;AAHD,GAnBS;AAwBrBK,EAAAA,OAAO,EAAGF,OAAD,KAAc;AACrBL,IAAAA,IAAI,EAAEK,OADe;AAErBJ,IAAAA,IAAI,EAAE,SAFe;AAGrBC,IAAAA,SAAS,EAAE;AAHU,GAAd,CAxBY;AA6BrBM,EAAAA,KAAK,EAAGH,OAAD,KAAc;AACnBL,IAAAA,IAAI,EAAEK,OADa;AAEnBJ,IAAAA,IAAI,EAAE,OAFa;AAGnBC,IAAAA,SAAS,EAAE;AAHQ,GAAd;AA7Bc,CAAhB;AAoCP,OAAO,MAAMO,WAAW,GAAIC,EAAD,IAAQ;AACjCd,EAAAA,UAAU,CAACe,GAAX,CAAgBC,CAAD,IAAOA,CAAC,CAACC,MAAF,CAAUC,KAAD,IAAWA,KAAK,CAACJ,EAAN,KAAaA,EAAjC,CAAtB;AACD,CAFM;AAIP,OAAO,MAAMK,QAAQ,GAAID,KAAD,IAAW;AAAA;;AACjC,MAAIE,KAAJ;AAEAF,EAAAA,KAAK,CAACJ,EAAN,4BAAWd,UAAU,CAACqB,GAAX,GAAiBC,MAA5B,yEAAsC,CAAtC;AAEAtB,EAAAA,UAAU,CAACe,GAAX,CAAgBC,CAAD,IAAO,CAAC,GAAGA,CAAJ,EAAOE,KAAP,CAAtB;;AAEA,QAAMK,IAAI,GAAG,MAAM;AACjBC,IAAAA,YAAY,CAACJ,KAAD,CAAZ;AACAP,IAAAA,WAAW,CAACK,KAAK,CAACJ,EAAP,CAAX;AACD,GAHD;;AAKA,MAAI,CAACW,KAAK,CAACP,KAAK,CAACZ,SAAP,CAAN,IAA2BY,KAAK,CAACZ,SAAN,GAAkB,CAAjD,EAAoD;AAClDc,IAAAA,KAAK,GAAGM,UAAU,CAAC,MAAMb,WAAW,CAACK,KAAK,CAACJ,EAAP,CAAlB,EAA8BI,KAAK,CAACZ,SAAN,GAAkB,IAAhD,CAAlB;AACD;;AAED,SAAO;AAAEiB,IAAAA;AAAF,GAAP;AACD,CAjBM;AAmBP,eAAe,SAASI,QAAT,GAAoB;AACjC,SAAO9B,WAAW,CAACsB,QAAD,EAAW,EAAX,CAAlB;AACD","sourcesContent":["import { useCallback } from \"react\";\nimport { newRidgeState } from \"react-ridge-state\";\n\nconst initialState = [];\n\nexport const toastState = newRidgeState(initialState);\n\nexport const FLAVORS = {\n  TX_PENDING: (hash, body) => ({\n    body: body || \"Transaction is pending.\",\n    hash,\n    type: \"pending\",\n    hideAfter: 0,\n  }),\n  TX_SUCCESS: (hash, body) => ({\n    body: body || \"Transaction successful.\",\n    hash,\n    type: \"success\",\n    hideAfter: 15,\n  }),\n  TX_ERROR: (message = \"Transaction failed\", hash) => ({\n    body: message,\n    hash,\n    type: \"error\",\n    hideAfter: 15,\n  }),\n  LOGGED_OUT: {\n    body: \"You’ve succesfully logged out\",\n    type: \"success\",\n    hideAfter: 15,\n  },\n  SUCCESS: (message) => ({\n    body: message,\n    type: \"success\",\n    hideAfter: 15,\n  }),\n  ERROR: (message) => ({\n    body: message,\n    type: \"error\",\n    hideAfter: 15,\n  }),\n};\n\nexport const removeToast = (id) => {\n  toastState.set((x) => x.filter((toast) => toast.id !== id));\n};\n\nexport const addToast = (toast) => {\n  let timer;\n\n  toast.id = toastState.get().length ?? 0;\n\n  toastState.set((x) => [...x, toast]);\n\n  const hide = () => {\n    clearTimeout(timer);\n    removeToast(toast.id);\n  };\n\n  if (!isNaN(toast.hideAfter) && toast.hideAfter > 0) {\n    timer = setTimeout(() => removeToast(toast.id), toast.hideAfter * 1000);\n  }\n\n  return { hide };\n};\n\nexport default function useToast() {\n  return useCallback(addToast, []);\n}\n"]},"metadata":{},"sourceType":"module"}