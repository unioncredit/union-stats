{"ast":null,"code":"import useAaveAdapterContract from \"hooks/contracts/useAaveAdapterContract\";\nimport useDAIDecimals from \"hooks/useDAIDecimals\";\nimport useChainId from \"hooks/useChainId\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { TOKENS } from \"constants/variables\";\nimport useSWR from \"swr\";\nimport useReadProvider from \"hooks/useReadProvider\";\n\nconst getAaveFloor = aaveAdapter => async (_, decimals, daiAddress) => {\n  const aaveFloor = await aaveAdapter.floorMap(daiAddress);\n  return formatUnits(aaveFloor, decimals);\n};\n\nexport default function useAaveFloor() {\n  const readProvider = useReadProvider();\n  const aaveAdapter = useAaveAdapterContract(readProvider);\n  const {\n    data: decimals\n  } = useDAIDecimals();\n  const chainId = useChainId();\n  const shouldFetch = !!aaveAdapter && chainId && TOKENS[chainId] && TOKENS[chainId].DAI;\n  return useSWR(shouldFetch ? [\"aaveFloor\", decimals, TOKENS[chainId].DAI] : null, getAaveFloor(aaveAdapter));\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/union-stats/hooks/stats/assetManagerStats/useAaveFloor.ts"],"names":["useAaveAdapterContract","useDAIDecimals","useChainId","formatUnits","TOKENS","useSWR","useReadProvider","getAaveFloor","aaveAdapter","_","decimals","daiAddress","aaveFloor","floorMap","useAaveFloor","readProvider","data","chainId","shouldFetch","DAI"],"mappings":"AAAA,OAAOA,sBAAP,MAAmC,wCAAnC;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AAGA,SAASC,MAAT,QAAuB,qBAAvB;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,eAAP,MAA4B,uBAA5B;;AAEA,MAAMC,YAAY,GACfC,WAAD,IACA,OAAOC,CAAP,EAAeC,QAAf,EAAoCC,UAApC,KAA2D;AACzD,QAAMC,SAAoB,GAAG,MAAMJ,WAAW,CAACK,QAAZ,CAAqBF,UAArB,CAAnC;AACA,SAAOR,WAAW,CAACS,SAAD,EAAYF,QAAZ,CAAlB;AACD,CALH;;AAOA,eAAe,SAASI,YAAT,GAAwB;AACrC,QAAMC,YAAY,GAAGT,eAAe,EAApC;AACA,QAAME,WAAqB,GAAGR,sBAAsB,CAACe,YAAD,CAApD;AACA,QAAM;AAAEC,IAAAA,IAAI,EAAEN;AAAR,MAAqBT,cAAc,EAAzC;AACA,QAAMgB,OAAO,GAAGf,UAAU,EAA1B;AAEA,QAAMgB,WAAW,GACf,CAAC,CAACV,WAAF,IAAiBS,OAAjB,IAA4Bb,MAAM,CAACa,OAAD,CAAlC,IAA+Cb,MAAM,CAACa,OAAD,CAAN,CAAgBE,GADjE;AAGA,SAAOd,MAAM,CACXa,WAAW,GAAG,CAAC,WAAD,EAAcR,QAAd,EAAwBN,MAAM,CAACa,OAAD,CAAN,CAAgBE,GAAxC,CAAH,GAAkD,IADlD,EAEXZ,YAAY,CAACC,WAAD,CAFD,CAAb;AAID","sourcesContent":["import useAaveAdapterContract from \"hooks/contracts/useAaveAdapterContract\";\nimport useDAIDecimals from \"hooks/useDAIDecimals\";\nimport useChainId from \"hooks/useChainId\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { TOKENS } from \"constants/variables\";\nimport useSWR from \"swr\";\nimport useReadProvider from \"hooks/useReadProvider\";\n\nconst getAaveFloor =\n  (aaveAdapter: Contract) =>\n  async (_: any, decimals: BigNumber, daiAddress: String) => {\n    const aaveFloor: BigNumber = await aaveAdapter.floorMap(daiAddress);\n    return formatUnits(aaveFloor, decimals);\n  };\n\nexport default function useAaveFloor() {\n  const readProvider = useReadProvider();\n  const aaveAdapter: Contract = useAaveAdapterContract(readProvider);\n  const { data: decimals } = useDAIDecimals();\n  const chainId = useChainId();\n\n  const shouldFetch =\n    !!aaveAdapter && chainId && TOKENS[chainId] && TOKENS[chainId].DAI;\n\n  return useSWR(\n    shouldFetch ? [\"aaveFloor\", decimals, TOKENS[chainId].DAI] : null,\n    getAaveFloor(aaveAdapter)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}