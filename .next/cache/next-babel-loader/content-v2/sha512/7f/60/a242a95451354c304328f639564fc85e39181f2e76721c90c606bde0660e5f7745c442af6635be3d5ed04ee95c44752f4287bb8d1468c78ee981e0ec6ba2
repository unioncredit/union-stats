{"ast":null,"code":"import { Contract } from \"@ethersproject/contracts\";\nimport { parseUnits } from \"@ethersproject/units\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport U_TOKENT_ABI from \"constants/abis/uToken.json\";\nimport useERC20Contract from \"hooks/contracts/useERC20Contract\";\nimport useMarketRegistryContract from \"hooks/contracts/useMarketRegistryContract\";\nimport useCurrentToken from \"hooks/useCurrentToken\";\nimport { useCallback } from \"react\";\nimport { makeTxWithGasEstimate } from \"../../util/gasEstimation\";\nimport { APPROVE_DAI_REPAY_SIGNATURE_KEY } from \"constants/app\";\nimport usePermits from \"hooks/usePermits\";\nexport default function useRepay() {\n  const {\n    library,\n    account,\n    chainId\n  } = useWeb3React();\n  const DAI = useCurrentToken();\n  const marketRegistryContract = useMarketRegistryContract();\n  const DAIContract = useERC20Contract(DAI);\n  const {\n    getPermit\n  } = usePermits();\n  const permit = getPermit(APPROVE_DAI_REPAY_SIGNATURE_KEY);\n  return useCallback(async amount => {\n    const res = await marketRegistryContract.tokens(DAI);\n    const uTokenAddress = res.uToken;\n    const uTokenContract = new Contract(uTokenAddress, U_TOKENT_ABI, library.getSigner());\n    const repayAmount = parseUnits(String(amount), 18); // if we have a valid permit use that to stake\n\n    if (permit) {\n      if (chainId == 1) {\n        return makeTxWithGasEstimate(uTokenContract, \"repayBorrowWithPermit\", [account, repayAmount.toString(), permit.nonce, permit.expiry, permit.v, permit.r, permit.s]);\n      } else {\n        return makeTxWithGasEstimate(uTokenContract, \"repayBorrowWithERC20Permit\", [account, repayAmount.toString(), permit.deadline, permit.v, permit.r, permit.s]);\n      }\n    }\n\n    const allowance = await DAIContract.allowance(account, uTokenAddress);\n\n    if (allowance.lt(repayAmount)) {\n      throw new Error(\"Allowance not enough\");\n    }\n\n    return makeTxWithGasEstimate(uTokenContract, \"repayBorrow\", [repayAmount]);\n  }, [account, DAI, marketRegistryContract, DAIContract, permit]);\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/payables/useRepay.ts"],"names":["Contract","parseUnits","useWeb3React","U_TOKENT_ABI","useERC20Contract","useMarketRegistryContract","useCurrentToken","useCallback","makeTxWithGasEstimate","APPROVE_DAI_REPAY_SIGNATURE_KEY","usePermits","useRepay","library","account","chainId","DAI","marketRegistryContract","DAIContract","getPermit","permit","amount","res","tokens","uTokenAddress","uToken","uTokenContract","getSigner","repayAmount","String","toString","nonce","expiry","v","r","s","deadline","allowance","lt","Error"],"mappings":"AAAA,SAASA,QAAT,QAAyB,0BAAzB;AAEA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,gBAAP,MAA6B,kCAA7B;AACA,OAAOC,yBAAP,MAAsC,2CAAtC;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAASC,qBAAT,QAAsC,0BAAtC;AACA,SAASC,+BAAT,QAAgD,eAAhD;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AAEA,eAAe,SAASC,QAAT,GAAoB;AACjC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA;AAApB,MAAgCZ,YAAY,EAAlD;AACA,QAAMa,GAAG,GAAGT,eAAe,EAA3B;AACA,QAAMU,sBAAsB,GAAGX,yBAAyB,EAAxD;AACA,QAAMY,WAAW,GAAGb,gBAAgB,CAACW,GAAD,CAApC;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAgBR,UAAU,EAAhC;AAEA,QAAMS,MAAM,GAAGD,SAAS,CAACT,+BAAD,CAAxB;AAEA,SAAOF,WAAW,CAChB,MAAOa,MAAP,IAAiE;AAC/D,UAAMC,GAAG,GAAG,MAAML,sBAAsB,CAACM,MAAvB,CAA8BP,GAA9B,CAAlB;AACA,UAAMQ,aAAa,GAAGF,GAAG,CAACG,MAA1B;AAEA,UAAMC,cAAc,GAAG,IAAIzB,QAAJ,CACrBuB,aADqB,EAErBpB,YAFqB,EAGrBS,OAAO,CAACc,SAAR,EAHqB,CAAvB;AAMA,UAAMC,WAAW,GAAG1B,UAAU,CAAC2B,MAAM,CAACR,MAAD,CAAP,EAAiB,EAAjB,CAA9B,CAV+D,CAY/D;;AACA,QAAID,MAAJ,EAAY;AACV,UAAIL,OAAO,IAAI,CAAf,EAAkB;AAChB,eAAON,qBAAqB,CAC1BiB,cAD0B,EAE1B,uBAF0B,EAG1B,CACEZ,OADF,EAEEc,WAAW,CAACE,QAAZ,EAFF,EAGEV,MAAM,CAACW,KAHT,EAIEX,MAAM,CAACY,MAJT,EAKEZ,MAAM,CAACa,CALT,EAMEb,MAAM,CAACc,CANT,EAOEd,MAAM,CAACe,CAPT,CAH0B,CAA5B;AAaD,OAdD,MAcO;AACL,eAAO1B,qBAAqB,CAC1BiB,cAD0B,EAE1B,4BAF0B,EAG1B,CACEZ,OADF,EAEEc,WAAW,CAACE,QAAZ,EAFF,EAGEV,MAAM,CAACgB,QAHT,EAIEhB,MAAM,CAACa,CAJT,EAKEb,MAAM,CAACc,CALT,EAMEd,MAAM,CAACe,CANT,CAH0B,CAA5B;AAYD;AACF;;AAED,UAAME,SAAS,GAAG,MAAMnB,WAAW,CAACmB,SAAZ,CAAsBvB,OAAtB,EAA+BU,aAA/B,CAAxB;;AACA,QAAIa,SAAS,CAACC,EAAV,CAAaV,WAAb,CAAJ,EAA+B;AAC7B,YAAM,IAAIW,KAAJ,CAAU,sBAAV,CAAN;AACD;;AAED,WAAO9B,qBAAqB,CAACiB,cAAD,EAAiB,aAAjB,EAAgC,CAC1DE,WAD0D,CAAhC,CAA5B;AAGD,GArDe,EAsDhB,CAACd,OAAD,EAAUE,GAAV,EAAeC,sBAAf,EAAuCC,WAAvC,EAAoDE,MAApD,CAtDgB,CAAlB;AAwDD","sourcesContent":["import { Contract } from \"@ethersproject/contracts\";\nimport type { TransactionResponse } from \"@ethersproject/providers\";\nimport { parseUnits } from \"@ethersproject/units\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport U_TOKENT_ABI from \"constants/abis/uToken.json\";\nimport useERC20Contract from \"hooks/contracts/useERC20Contract\";\nimport useMarketRegistryContract from \"hooks/contracts/useMarketRegistryContract\";\nimport useCurrentToken from \"hooks/useCurrentToken\";\nimport { useCallback } from \"react\";\nimport { makeTxWithGasEstimate } from \"../../util/gasEstimation\";\nimport { APPROVE_DAI_REPAY_SIGNATURE_KEY } from \"constants/app\";\nimport usePermits from \"hooks/usePermits\";\n\nexport default function useRepay() {\n  const { library, account, chainId } = useWeb3React();\n  const DAI = useCurrentToken();\n  const marketRegistryContract = useMarketRegistryContract();\n  const DAIContract = useERC20Contract(DAI);\n  const { getPermit } = usePermits();\n\n  const permit = getPermit(APPROVE_DAI_REPAY_SIGNATURE_KEY);\n\n  return useCallback(\n    async (amount: number | string): Promise<TransactionResponse> => {\n      const res = await marketRegistryContract.tokens(DAI);\n      const uTokenAddress = res.uToken;\n\n      const uTokenContract = new Contract(\n        uTokenAddress,\n        U_TOKENT_ABI,\n        library.getSigner()\n      );\n\n      const repayAmount = parseUnits(String(amount), 18);\n\n      // if we have a valid permit use that to stake\n      if (permit) {\n        if (chainId == 1) {\n          return makeTxWithGasEstimate(\n            uTokenContract,\n            \"repayBorrowWithPermit\",\n            [\n              account,\n              repayAmount.toString(),\n              permit.nonce,\n              permit.expiry,\n              permit.v,\n              permit.r,\n              permit.s,\n            ]\n          );\n        } else {\n          return makeTxWithGasEstimate(\n            uTokenContract,\n            \"repayBorrowWithERC20Permit\",\n            [\n              account,\n              repayAmount.toString(),\n              permit.deadline,\n              permit.v,\n              permit.r,\n              permit.s,\n            ]\n          );\n        }\n      }\n\n      const allowance = await DAIContract.allowance(account, uTokenAddress);\n      if (allowance.lt(repayAmount)) {\n        throw new Error(\"Allowance not enough\");\n      }\n\n      return makeTxWithGasEstimate(uTokenContract, \"repayBorrow\", [\n        repayAmount,\n      ]);\n    },\n    [account, DAI, marketRegistryContract, DAIContract, permit]\n  );\n}\n"]},"metadata":{},"sourceType":"module"}