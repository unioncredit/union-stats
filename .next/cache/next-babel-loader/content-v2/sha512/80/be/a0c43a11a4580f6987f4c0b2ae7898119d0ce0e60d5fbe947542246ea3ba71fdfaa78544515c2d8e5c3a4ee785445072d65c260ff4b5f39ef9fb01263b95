{"ast":null,"code":"import useUTokenContract from \"hooks/contracts/useUTokenContract\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { BLOCKS_PER_YEAR } from \"constants/variables\";\nimport useSWR from \"swr\";\nimport useChainId from \"hooks/useChainId\";\nimport useReadProvider from \"hooks/useReadProvider\";\n\nconst getInterestRate = uTokenContract => async (_, chainId) => {\n  const borrowRatePerBlock = await uTokenContract.borrowRatePerBlock();\n  const decimals = BigNumber.from(18);\n  return formatUnits(borrowRatePerBlock.mul(BLOCKS_PER_YEAR[chainId]), decimals);\n};\n\nexport default function useInterestRate() {\n  const readProvider = useReadProvider();\n  const uTokenContract = useUTokenContract(readProvider);\n  const chainId = useChainId();\n  const shouldFetch = !!uTokenContract && !!chainId;\n  return useSWR(shouldFetch ? [\"interestRate\", chainId] : null, getInterestRate(uTokenContract));\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/stats/marketSettingsStats/useInterestRate.ts"],"names":["useUTokenContract","formatUnits","BigNumber","BLOCKS_PER_YEAR","useSWR","useChainId","useReadProvider","getInterestRate","uTokenContract","_","chainId","borrowRatePerBlock","decimals","from","mul","useInterestRate","readProvider","shouldFetch"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,mCAA9B;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,SAAT,QAA0B,0BAA1B;AAEA,SAASC,eAAT,QAAgC,qBAAhC;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,eAAP,MAA4B,uBAA5B;;AAEA,MAAMC,eAAe,GAClBC,cAAD,IAA8B,OAAOC,CAAP,EAAeC,OAAf,KAAmC;AAC/D,QAAMC,kBAA6B,GACjC,MAAMH,cAAc,CAACG,kBAAf,EADR;AAEA,QAAMC,QAAQ,GAAGV,SAAS,CAACW,IAAV,CAAe,EAAf,CAAjB;AACA,SAAOZ,WAAW,CAChBU,kBAAkB,CAACG,GAAnB,CAAuBX,eAAe,CAACO,OAAD,CAAtC,CADgB,EAEhBE,QAFgB,CAAlB;AAID,CATH;;AAWA,eAAe,SAASG,eAAT,GAA2B;AACxC,QAAMC,YAAY,GAAGV,eAAe,EAApC;AACA,QAAME,cAAwB,GAAGR,iBAAiB,CAACgB,YAAD,CAAlD;AACA,QAAMN,OAAO,GAAGL,UAAU,EAA1B;AACA,QAAMY,WAAW,GAAG,CAAC,CAACT,cAAF,IAAoB,CAAC,CAACE,OAA1C;AAEA,SAAON,MAAM,CACXa,WAAW,GAAG,CAAC,cAAD,EAAiBP,OAAjB,CAAH,GAA+B,IAD/B,EAEXH,eAAe,CAACC,cAAD,CAFJ,CAAb;AAID","sourcesContent":["import useUTokenContract from \"hooks/contracts/useUTokenContract\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { BLOCKS_PER_YEAR } from \"constants/variables\";\nimport useSWR from \"swr\";\nimport useChainId from \"hooks/useChainId\";\nimport useReadProvider from \"hooks/useReadProvider\";\n\nconst getInterestRate =\n  (uTokenContract: Contract) => async (_: any, chainId: string) => {\n    const borrowRatePerBlock: BigNumber =\n      await uTokenContract.borrowRatePerBlock();\n    const decimals = BigNumber.from(18);\n    return formatUnits(\n      borrowRatePerBlock.mul(BLOCKS_PER_YEAR[chainId]),\n      decimals\n    );\n  };\n\nexport default function useInterestRate() {\n  const readProvider = useReadProvider();\n  const uTokenContract: Contract = useUTokenContract(readProvider);\n  const chainId = useChainId();\n  const shouldFetch = !!uTokenContract && !!chainId;\n\n  return useSWR(\n    shouldFetch ? [\"interestRate\", chainId] : null,\n    getInterestRate(uTokenContract)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}