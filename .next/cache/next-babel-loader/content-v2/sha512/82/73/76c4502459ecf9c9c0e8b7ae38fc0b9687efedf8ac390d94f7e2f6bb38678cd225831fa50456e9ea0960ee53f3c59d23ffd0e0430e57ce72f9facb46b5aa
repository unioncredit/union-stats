{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { isAddress } from \"@ethersproject/address\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport useSWR from \"swr\";\nimport useCurrentToken from \"../useCurrentToken\";\nimport USER_MANAGER_ABI from \"constants/abis/userManager.json\";\nimport useMarketRegistryContract from \"../contracts/useMarketRegistryContract\";\n\nvar getCreditLimit = function getCreditLimit(marketRegistryContract) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_, library, account, tokenAddress) {\n      var signer, res, userManagerAddress, userManagerContract, limit;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              signer = library.getSigner();\n              _context.next = 3;\n              return marketRegistryContract.tokens(tokenAddress);\n\n            case 3:\n              res = _context.sent;\n              userManagerAddress = res.userManager;\n              userManagerContract = new Contract(userManagerAddress, USER_MANAGER_ABI, signer);\n              _context.next = 8;\n              return userManagerContract.getCreditLimit(account);\n\n            case 8:\n              limit = _context.sent;\n              return _context.abrupt(\"return\", Number(formatUnits(limit, 18)));\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2, _x3, _x4) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\nexport default function useCreditLimit(address) {\n  _s();\n\n  var _useWeb3React = useWeb3React(),\n      connectedAccount = _useWeb3React.account,\n      library = _useWeb3React.library;\n\n  var curToken = useCurrentToken();\n  var marketRegistryContract = useMarketRegistryContract();\n  var account = address || connectedAccount;\n  var shouldFetch = !!marketRegistryContract && typeof account === \"string\" && isAddress(curToken) && !!library;\n  return useSWR(shouldFetch ? [\"CreditLimit\", library, account, curToken] : null, getCreditLimit(marketRegistryContract));\n}\n\n_s(useCreditLimit, \"s27kg/iVY2cpXZuY5W0dhIKYdTg=\", false, function () {\n  return [useWeb3React, useCurrentToken, useMarketRegistryContract, useSWR];\n});","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/data/useCreditLimit.ts"],"names":["isAddress","Contract","formatUnits","useWeb3React","useSWR","useCurrentToken","USER_MANAGER_ABI","useMarketRegistryContract","getCreditLimit","marketRegistryContract","_","library","account","tokenAddress","signer","getSigner","tokens","res","userManagerAddress","userManager","userManagerContract","limit","Number","useCreditLimit","address","connectedAccount","curToken","shouldFetch"],"mappings":";;;;;AAAA,SAASA,SAAT,QAA0B,wBAA1B;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,OAAOC,yBAAP,MAAsC,wCAAtC;;AAEA,IAAMC,cAAc,GAClB,SADIA,cACJ,CAACC,sBAAD;AAAA;AAAA,wEACA,iBAAOC,CAAP,EAAeC,OAAf,EAA6BC,OAA7B,EAA8CC,YAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,cAAAA,MADR,GACiBH,OAAO,CAACI,SAAR,EADjB;AAAA;AAAA,qBAEoBN,sBAAsB,CAACO,MAAvB,CAA8BH,YAA9B,CAFpB;;AAAA;AAEQI,cAAAA,GAFR;AAGQC,cAAAA,kBAHR,GAG6BD,GAAG,CAACE,WAHjC;AAIQC,cAAAA,mBAJR,GAI8B,IAAInB,QAAJ,CAC1BiB,kBAD0B,EAE1BZ,gBAF0B,EAG1BQ,MAH0B,CAJ9B;AAAA;AAAA,qBAUsBM,mBAAmB,CAACZ,cAApB,CAAmCI,OAAnC,CAVtB;;AAAA;AAUQS,cAAAA,KAVR;AAAA,+CAYSC,MAAM,CAACpB,WAAW,CAACmB,KAAD,EAAQ,EAAR,CAAZ,CAZf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADA;;AAAA;AAAA;AAAA;AAAA;AAAA,CADF;;AAiBA,eAAe,SAASE,cAAT,CAAwBC,OAAxB,EAAyC;AAAA;;AAAA,sBACPrB,YAAY,EADL;AAAA,MACrCsB,gBADqC,iBAC9Cb,OAD8C;AAAA,MACnBD,OADmB,iBACnBA,OADmB;;AAEtD,MAAMe,QAAQ,GAAGrB,eAAe,EAAhC;AACA,MAAMI,sBAAsB,GAAGF,yBAAyB,EAAxD;AAEA,MAAMK,OAAO,GAAGY,OAAO,IAAIC,gBAA3B;AAEA,MAAME,WAAW,GACf,CAAC,CAAClB,sBAAF,IACA,OAAOG,OAAP,KAAmB,QADnB,IAEAZ,SAAS,CAAC0B,QAAD,CAFT,IAGA,CAAC,CAACf,OAJJ;AAMA,SAAOP,MAAM,CACXuB,WAAW,GAAG,CAAC,aAAD,EAAgBhB,OAAhB,EAAyBC,OAAzB,EAAkCc,QAAlC,CAAH,GAAiD,IADjD,EAEXlB,cAAc,CAACC,sBAAD,CAFH,CAAb;AAID;;GAjBuBc,c;UACyBpB,Y,EAC9BE,e,EACcE,yB,EAUxBH,M","sourcesContent":["import { isAddress } from \"@ethersproject/address\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport useSWR from \"swr\";\nimport useCurrentToken from \"../useCurrentToken\";\nimport USER_MANAGER_ABI from \"constants/abis/userManager.json\";\nimport useMarketRegistryContract from \"../contracts/useMarketRegistryContract\";\n\nconst getCreditLimit =\n  (marketRegistryContract: Contract) =>\n  async (_: any, library: any, account: string, tokenAddress: string) => {\n    const signer = library.getSigner();\n    const res = await marketRegistryContract.tokens(tokenAddress);\n    const userManagerAddress = res.userManager;\n    const userManagerContract = new Contract(\n      userManagerAddress,\n      USER_MANAGER_ABI,\n      signer\n    );\n\n    const limit = await userManagerContract.getCreditLimit(account);\n\n    return Number(formatUnits(limit, 18));\n  };\n\nexport default function useCreditLimit(address: string) {\n  const { account: connectedAccount, library } = useWeb3React();\n  const curToken = useCurrentToken();\n  const marketRegistryContract = useMarketRegistryContract();\n\n  const account = address || connectedAccount;\n\n  const shouldFetch =\n    !!marketRegistryContract &&\n    typeof account === \"string\" &&\n    isAddress(curToken) &&\n    !!library;\n\n  return useSWR(\n    shouldFetch ? [\"CreditLimit\", library, account, curToken] : null,\n    getCreditLimit(marketRegistryContract)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}