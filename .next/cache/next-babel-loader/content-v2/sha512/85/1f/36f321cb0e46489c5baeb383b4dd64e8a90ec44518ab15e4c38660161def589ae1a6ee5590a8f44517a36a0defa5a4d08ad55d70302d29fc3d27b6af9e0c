{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { formatUnits } from \"@ethersproject/units\";\nimport useGovernanceContract from \"hooks/contracts/useGovernanceContract\";\nimport useReadProvider from \"hooks/useReadProvider\";\nimport useSWR from \"swr\";\nimport useAllProposalData from \"./useAllProposalData\";\n\nconst getProposalVoteHistory = (govContract, proposals) => async (_, address) => {\n  const allProposalsWithReceipt = await Promise.all(proposals.map(async proposal => {\n    const receipt = await govContract.getReceipt(proposal.pid, address);\n    const formattedReceipt = {\n      hasVoted: receipt.hasVoted,\n      support: receipt.support,\n      votes: formatUnits(receipt.votes.toString(), 18)\n    };\n    return _objectSpread(_objectSpread({}, proposal), {}, {\n      receipt: formattedReceipt\n    });\n  }));\n  return allProposalsWithReceipt;\n};\n\nexport default function useUserProposalVoteHistory(address) {\n  const readProvider = useReadProvider();\n  const govContract = useGovernanceContract(readProvider);\n  const {\n    data: proposals\n  } = useAllProposalData();\n  const shouldFetch = typeof address === \"string\" && govContract && proposals;\n  return useSWR(shouldFetch ? [\"ProposalVoteHistory\", address, proposals] : null, getProposalVoteHistory(govContract, proposals));\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/governance/useUserProposalVoteHistory.js"],"names":["formatUnits","useGovernanceContract","useReadProvider","useSWR","useAllProposalData","getProposalVoteHistory","govContract","proposals","_","address","allProposalsWithReceipt","Promise","all","map","proposal","receipt","getReceipt","pid","formattedReceipt","hasVoted","support","votes","toString","useUserProposalVoteHistory","readProvider","data","shouldFetch"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA4B,sBAA5B;AACA,OAAOC,qBAAP,MAAkC,uCAAlC;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;;AAEA,MAAMC,sBAAsB,GAC1B,CAACC,WAAD,EAAcC,SAAd,KAA4B,OAAOC,CAAP,EAAUC,OAAV,KAAsB;AAChD,QAAMC,uBAAuB,GAAG,MAAMC,OAAO,CAACC,GAAR,CACpCL,SAAS,CAACM,GAAV,CAAc,MAAOC,QAAP,IAAoB;AAChC,UAAMC,OAAO,GAAG,MAAMT,WAAW,CAACU,UAAZ,CAAuBF,QAAQ,CAACG,GAAhC,EAAqCR,OAArC,CAAtB;AAEA,UAAMS,gBAAgB,GAAG;AACvBC,MAAAA,QAAQ,EAAEJ,OAAO,CAACI,QADK;AAEvBC,MAAAA,OAAO,EAAEL,OAAO,CAACK,OAFM;AAGvBC,MAAAA,KAAK,EAAErB,WAAW,CAACe,OAAO,CAACM,KAAR,CAAcC,QAAd,EAAD,EAA2B,EAA3B;AAHK,KAAzB;AAMA,2CACKR,QADL;AAEEC,MAAAA,OAAO,EAAEG;AAFX;AAID,GAbD,CADoC,CAAtC;AAiBA,SAAOR,uBAAP;AACD,CApBH;;AAsBA,eAAe,SAASa,0BAAT,CAAoCd,OAApC,EAA6C;AAC1D,QAAMe,YAAY,GAAGtB,eAAe,EAApC;AACA,QAAMI,WAAW,GAAGL,qBAAqB,CAACuB,YAAD,CAAzC;AAEA,QAAM;AAAEC,IAAAA,IAAI,EAAElB;AAAR,MAAsBH,kBAAkB,EAA9C;AAEA,QAAMsB,WAAW,GAAG,OAAOjB,OAAP,KAAmB,QAAnB,IAA+BH,WAA/B,IAA8CC,SAAlE;AAEA,SAAOJ,MAAM,CACXuB,WAAW,GAAG,CAAC,qBAAD,EAAwBjB,OAAxB,EAAiCF,SAAjC,CAAH,GAAiD,IADjD,EAEXF,sBAAsB,CAACC,WAAD,EAAcC,SAAd,CAFX,CAAb;AAID","sourcesContent":["import { formatUnits } from \"@ethersproject/units\";\nimport useGovernanceContract from \"hooks/contracts/useGovernanceContract\";\nimport useReadProvider from \"hooks/useReadProvider\";\nimport useSWR from \"swr\";\nimport useAllProposalData from \"./useAllProposalData\";\n\nconst getProposalVoteHistory =\n  (govContract, proposals) => async (_, address) => {\n    const allProposalsWithReceipt = await Promise.all(\n      proposals.map(async (proposal) => {\n        const receipt = await govContract.getReceipt(proposal.pid, address);\n\n        const formattedReceipt = {\n          hasVoted: receipt.hasVoted,\n          support: receipt.support,\n          votes: formatUnits(receipt.votes.toString(), 18),\n        };\n\n        return {\n          ...proposal,\n          receipt: formattedReceipt,\n        };\n      })\n    );\n\n    return allProposalsWithReceipt;\n  };\n\nexport default function useUserProposalVoteHistory(address) {\n  const readProvider = useReadProvider();\n  const govContract = useGovernanceContract(readProvider);\n\n  const { data: proposals } = useAllProposalData();\n\n  const shouldFetch = typeof address === \"string\" && govContract && proposals;\n\n  return useSWR(\n    shouldFetch ? [\"ProposalVoteHistory\", address, proposals] : null,\n    getProposalVoteHistory(govContract, proposals)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}