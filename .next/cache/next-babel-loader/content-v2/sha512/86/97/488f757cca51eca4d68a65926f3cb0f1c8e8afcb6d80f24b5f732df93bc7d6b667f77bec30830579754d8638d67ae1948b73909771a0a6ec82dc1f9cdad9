{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { newRidgeState } from \"react-ridge-state\";\nimport { signDaiPermit, signERC2612Permit } from \"eth-permit\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { PermitType } from \"constants/app\";\nexport const permitsState = newRidgeState({});\nexport default function usePermits() {\n  const {\n    account,\n    library,\n    chainId\n  } = useWeb3React();\n  const [permits, setPermits] = permitsState.use();\n\n  const savePermit = (key, permit) => {\n    setPermits(x => _objectSpread(_objectSpread({}, x), {}, {\n      [key]: permit\n    }));\n  };\n\n  const removePermit = key => {\n    setPermits(x => _objectSpread(_objectSpread({}, x), {}, {\n      [key]: null\n    }));\n  };\n\n  const getPermit = key => {\n    const permit = permits[key];\n    const expiry = (permit === null || permit === void 0 ? void 0 : permit.expiry) || (permit === null || permit === void 0 ? void 0 : permit.deadline);\n    const permitValid = expiry && BigNumber.from(expiry).gt(Math.floor(Date.now() / 1000));\n\n    if (!permitValid) {\n      return null;\n    }\n\n    return permit;\n  };\n\n  const signPermit = async (key, tokenAddress, spender, amount, permitType) => {\n    const signFn = permitType === PermitType.DAI && chainId == 1 ? signDaiPermit : signERC2612Permit;\n    const signFnArgs = permitType === PermitType.DAI && chainId == 1 ? [] : [amount];\n    const token = chainId == 42161 && permitType === PermitType.DAI ? {\n      name: \"Dai Stablecoin\",\n      version: \"2\",\n      chainId,\n      verifyingContract: tokenAddress\n    } : tokenAddress;\n    const permit = await signFn(library.provider, token, account, spender, ...signFnArgs);\n    savePermit(key, permit);\n  };\n\n  return {\n    savePermit,\n    removePermit,\n    getPermit,\n    signPermit\n  };\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/usePermits.js"],"names":["newRidgeState","signDaiPermit","signERC2612Permit","useWeb3React","BigNumber","PermitType","permitsState","usePermits","account","library","chainId","permits","setPermits","use","savePermit","key","permit","x","removePermit","getPermit","expiry","deadline","permitValid","from","gt","Math","floor","Date","now","signPermit","tokenAddress","spender","amount","permitType","signFn","DAI","signFnArgs","token","name","version","verifyingContract","provider"],"mappings":";;;;;;AAAA,SAASA,aAAT,QAA8B,mBAA9B;AACA,SAASC,aAAT,EAAwBC,iBAAxB,QAAiD,YAAjD;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,SAASC,UAAT,QAA2B,eAA3B;AAEA,OAAO,MAAMC,YAAY,GAAGN,aAAa,CAAC,EAAD,CAAlC;AAEP,eAAe,SAASO,UAAT,GAAsB;AACnC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA;AAApB,MAAgCP,YAAY,EAAlD;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBN,YAAY,CAACO,GAAb,EAA9B;;AAEA,QAAMC,UAAU,GAAG,CAACC,GAAD,EAAMC,MAAN,KAAiB;AAClCJ,IAAAA,UAAU,CAAEK,CAAD,oCAAaA,CAAb;AAAgB,OAACF,GAAD,GAAOC;AAAvB,MAAD,CAAV;AACD,GAFD;;AAIA,QAAME,YAAY,GAAIH,GAAD,IAAS;AAC5BH,IAAAA,UAAU,CAAEK,CAAD,oCAAaA,CAAb;AAAgB,OAACF,GAAD,GAAO;AAAvB,MAAD,CAAV;AACD,GAFD;;AAIA,QAAMI,SAAS,GAAIJ,GAAD,IAAS;AACzB,UAAMC,MAAM,GAAGL,OAAO,CAACI,GAAD,CAAtB;AAEA,UAAMK,MAAM,GAAG,CAAAJ,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEI,MAAR,MAAkBJ,MAAlB,aAAkBA,MAAlB,uBAAkBA,MAAM,CAAEK,QAA1B,CAAf;AAEA,UAAMC,WAAW,GACfF,MAAM,IAAIhB,SAAS,CAACmB,IAAV,CAAeH,MAAf,EAAuBI,EAAvB,CAA0BC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,GAAL,KAAa,IAAxB,CAA1B,CADZ;;AAGA,QAAI,CAACN,WAAL,EAAkB;AAChB,aAAO,IAAP;AACD;;AAED,WAAON,MAAP;AACD,GAbD;;AAeA,QAAMa,UAAU,GAAG,OAAOd,GAAP,EAAYe,YAAZ,EAA0BC,OAA1B,EAAmCC,MAAnC,EAA2CC,UAA3C,KAA0D;AAC3E,UAAMC,MAAM,GACVD,UAAU,KAAK5B,UAAU,CAAC8B,GAA1B,IAAiCzB,OAAO,IAAI,CAA5C,GACIT,aADJ,GAEIC,iBAHN;AAKA,UAAMkC,UAAU,GACdH,UAAU,KAAK5B,UAAU,CAAC8B,GAA1B,IAAiCzB,OAAO,IAAI,CAA5C,GAAgD,EAAhD,GAAqD,CAACsB,MAAD,CADvD;AAGA,UAAMK,KAAK,GACT3B,OAAO,IAAI,KAAX,IAAoBuB,UAAU,KAAK5B,UAAU,CAAC8B,GAA9C,GACI;AACEG,MAAAA,IAAI,EAAE,gBADR;AAEEC,MAAAA,OAAO,EAAE,GAFX;AAGE7B,MAAAA,OAHF;AAIE8B,MAAAA,iBAAiB,EAAEV;AAJrB,KADJ,GAOIA,YARN;AASA,UAAMd,MAAM,GAAG,MAAMkB,MAAM,CACzBzB,OAAO,CAACgC,QADiB,EAEzBJ,KAFyB,EAGzB7B,OAHyB,EAIzBuB,OAJyB,EAKzB,GAAGK,UALsB,CAA3B;AAQAtB,IAAAA,UAAU,CAACC,GAAD,EAAMC,MAAN,CAAV;AACD,GA3BD;;AA6BA,SAAO;AAAEF,IAAAA,UAAF;AAAcI,IAAAA,YAAd;AAA4BC,IAAAA,SAA5B;AAAuCU,IAAAA;AAAvC,GAAP;AACD","sourcesContent":["import { newRidgeState } from \"react-ridge-state\";\nimport { signDaiPermit, signERC2612Permit } from \"eth-permit\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { PermitType } from \"constants/app\";\n\nexport const permitsState = newRidgeState({});\n\nexport default function usePermits() {\n  const { account, library, chainId } = useWeb3React();\n  const [permits, setPermits] = permitsState.use();\n\n  const savePermit = (key, permit) => {\n    setPermits((x) => ({ ...x, [key]: permit }));\n  };\n\n  const removePermit = (key) => {\n    setPermits((x) => ({ ...x, [key]: null }));\n  };\n\n  const getPermit = (key) => {\n    const permit = permits[key];\n\n    const expiry = permit?.expiry || permit?.deadline;\n\n    const permitValid =\n      expiry && BigNumber.from(expiry).gt(Math.floor(Date.now() / 1000));\n\n    if (!permitValid) {\n      return null;\n    }\n\n    return permit;\n  };\n\n  const signPermit = async (key, tokenAddress, spender, amount, permitType) => {\n    const signFn =\n      permitType === PermitType.DAI && chainId == 1\n        ? signDaiPermit\n        : signERC2612Permit;\n\n    const signFnArgs =\n      permitType === PermitType.DAI && chainId == 1 ? [] : [amount];\n\n    const token =\n      chainId == 42161 && permitType === PermitType.DAI\n        ? {\n            name: \"Dai Stablecoin\",\n            version: \"2\",\n            chainId,\n            verifyingContract: tokenAddress,\n          }\n        : tokenAddress;\n    const permit = await signFn(\n      library.provider,\n      token,\n      account,\n      spender,\n      ...signFnArgs\n    );\n\n    savePermit(key, permit);\n  };\n\n  return { savePermit, removePermit, getPermit, signPermit };\n}\n"]},"metadata":{},"sourceType":"module"}