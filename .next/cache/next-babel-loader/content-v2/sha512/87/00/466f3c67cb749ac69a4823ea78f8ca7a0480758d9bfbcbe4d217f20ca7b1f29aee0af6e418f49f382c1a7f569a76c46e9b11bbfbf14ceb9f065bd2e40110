{"ast":null,"code":"import { formatUnits } from \"@ethersproject/units\";\nimport { BLOCKS_PER_YEAR } from \"constants/variables\";\nimport useAssetContract from \"hooks/contracts/useAssetContract\";\nimport useCurrentToken from \"hooks/useCurrentToken\";\nimport useSWR from \"swr\";\nimport useReadProvider from \"hooks/useReadProvider\";\nimport useChainId from \"hooks/useChainId\";\nimport useUserContract from \"hooks/contracts/useUserContract\";\nimport useUTokenContract from \"hooks/contracts/useUTokenContract\";\n\nconst getStatisticsData = async (_, DAI, chainId, assetContract, userManagerContract, uTokenContract) => {\n  const currentTotalStaked = await userManagerContract.totalStaked();\n  const loanableAmount = await assetContract.getLoanableAmount(DAI);\n  const totalBorrowed = await uTokenContract.totalBorrows();\n  const ratePreBlock = await uTokenContract.borrowRatePerBlock();\n  return {\n    lendingPoolBalance: parseFloat(formatUnits(loanableAmount, 18)),\n    totalStaked: parseFloat(formatUnits(currentTotalStaked, 18)),\n    outstandingLoans: parseFloat(formatUnits(totalBorrowed, 18)),\n    interestRate: parseFloat(formatUnits(ratePreBlock, 18)) * BLOCKS_PER_YEAR[chainId]\n  };\n};\n\nexport default function useStatisticsData() {\n  const chainId = useChainId();\n  const readProvider = useReadProvider();\n  const DAI = useCurrentToken();\n  const assetContract = useAssetContract(readProvider);\n  const userManagerContract = useUserContract(readProvider);\n  const uTokenContract = useUTokenContract(readProvider);\n  const shouldFetch = !!assetContract && typeof chainId === \"number\" && typeof DAI === \"string\" && !!readProvider;\n  return useSWR(shouldFetch ? [\"StatisticsData\", DAI, chainId, assetContract, userManagerContract, uTokenContract] : null, getStatisticsData);\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/governance/useStatisticsData.ts"],"names":["formatUnits","BLOCKS_PER_YEAR","useAssetContract","useCurrentToken","useSWR","useReadProvider","useChainId","useUserContract","useUTokenContract","getStatisticsData","_","DAI","chainId","assetContract","userManagerContract","uTokenContract","currentTotalStaked","totalStaked","loanableAmount","getLoanableAmount","totalBorrowed","totalBorrows","ratePreBlock","borrowRatePerBlock","lendingPoolBalance","parseFloat","outstandingLoans","interestRate","useStatisticsData","readProvider","shouldFetch"],"mappings":"AAEA,SAASA,WAAT,QAA4B,sBAA5B;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,OAAOC,gBAAP,MAA6B,kCAA7B;AAEA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,eAAP,MAA4B,iCAA5B;AACA,OAAOC,iBAAP,MAA8B,mCAA9B;;AAEA,MAAMC,iBAAiB,GAAG,OACxBC,CADwB,EAExBC,GAFwB,EAGxBC,OAHwB,EAIxBC,aAJwB,EAKxBC,mBALwB,EAMxBC,cANwB,KAOrB;AACH,QAAMC,kBAA6B,GAAG,MAAMF,mBAAmB,CAACG,WAApB,EAA5C;AAEA,QAAMC,cAAyB,GAAG,MAAML,aAAa,CAACM,iBAAd,CAAgCR,GAAhC,CAAxC;AAEA,QAAMS,aAAwB,GAAG,MAAML,cAAc,CAACM,YAAf,EAAvC;AAEA,QAAMC,YAAuB,GAAG,MAAMP,cAAc,CAACQ,kBAAf,EAAtC;AAEA,SAAO;AACLC,IAAAA,kBAAkB,EAAEC,UAAU,CAACzB,WAAW,CAACkB,cAAD,EAAiB,EAAjB,CAAZ,CADzB;AAELD,IAAAA,WAAW,EAAEQ,UAAU,CAACzB,WAAW,CAACgB,kBAAD,EAAqB,EAArB,CAAZ,CAFlB;AAGLU,IAAAA,gBAAgB,EAAED,UAAU,CAACzB,WAAW,CAACoB,aAAD,EAAgB,EAAhB,CAAZ,CAHvB;AAILO,IAAAA,YAAY,EACVF,UAAU,CAACzB,WAAW,CAACsB,YAAD,EAAe,EAAf,CAAZ,CAAV,GAA4CrB,eAAe,CAACW,OAAD;AALxD,GAAP;AAOD,CAvBD;;AAyBA,eAAe,SAASgB,iBAAT,GAA6B;AAC1C,QAAMhB,OAAO,GAAGN,UAAU,EAA1B;AACA,QAAMuB,YAAY,GAAGxB,eAAe,EAApC;AAEA,QAAMM,GAAG,GAAGR,eAAe,EAA3B;AAEA,QAAMU,aAAa,GAAGX,gBAAgB,CAAC2B,YAAD,CAAtC;AACA,QAAMf,mBAAmB,GAAGP,eAAe,CAACsB,YAAD,CAA3C;AACA,QAAMd,cAAc,GAAGP,iBAAiB,CAACqB,YAAD,CAAxC;AAEA,QAAMC,WAAW,GACf,CAAC,CAACjB,aAAF,IACA,OAAOD,OAAP,KAAmB,QADnB,IAEA,OAAOD,GAAP,KAAe,QAFf,IAGA,CAAC,CAACkB,YAJJ;AAMA,SAAOzB,MAAM,CACX0B,WAAW,GACP,CACE,gBADF,EAEEnB,GAFF,EAGEC,OAHF,EAIEC,aAJF,EAKEC,mBALF,EAMEC,cANF,CADO,GASP,IAVO,EAWXN,iBAXW,CAAb;AAaD","sourcesContent":["import type { BigNumber } from \"@ethersproject/bignumber\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { BLOCKS_PER_YEAR } from \"constants/variables\";\nimport useAssetContract from \"hooks/contracts/useAssetContract\";\nimport useUnionContract from \"hooks/contracts/useUnionContract\";\nimport useCurrentToken from \"hooks/useCurrentToken\";\nimport useSWR from \"swr\";\nimport useReadProvider from \"hooks/useReadProvider\";\nimport useChainId from \"hooks/useChainId\";\nimport useUserContract from \"hooks/contracts/useUserContract\";\nimport useUTokenContract from \"hooks/contracts/useUTokenContract\";\n\nconst getStatisticsData = async (\n  _: any,\n  DAI: string,\n  chainId: number,\n  assetContract: Contract,\n  userManagerContract: Contract,\n  uTokenContract: Contract\n) => {\n  const currentTotalStaked: BigNumber = await userManagerContract.totalStaked();\n\n  const loanableAmount: BigNumber = await assetContract.getLoanableAmount(DAI);\n\n  const totalBorrowed: BigNumber = await uTokenContract.totalBorrows();\n\n  const ratePreBlock: BigNumber = await uTokenContract.borrowRatePerBlock();\n\n  return {\n    lendingPoolBalance: parseFloat(formatUnits(loanableAmount, 18)),\n    totalStaked: parseFloat(formatUnits(currentTotalStaked, 18)),\n    outstandingLoans: parseFloat(formatUnits(totalBorrowed, 18)),\n    interestRate:\n      parseFloat(formatUnits(ratePreBlock, 18)) * BLOCKS_PER_YEAR[chainId],\n  };\n};\n\nexport default function useStatisticsData() {\n  const chainId = useChainId();\n  const readProvider = useReadProvider();\n\n  const DAI = useCurrentToken();\n\n  const assetContract = useAssetContract(readProvider);\n  const userManagerContract = useUserContract(readProvider);\n  const uTokenContract = useUTokenContract(readProvider);\n\n  const shouldFetch =\n    !!assetContract &&\n    typeof chainId === \"number\" &&\n    typeof DAI === \"string\" &&\n    !!readProvider;\n\n  return useSWR(\n    shouldFetch\n      ? [\n          \"StatisticsData\",\n          DAI,\n          chainId,\n          assetContract,\n          userManagerContract,\n          uTokenContract,\n        ]\n      : null,\n    getStatisticsData\n  );\n}\n"]},"metadata":{},"sourceType":"module"}