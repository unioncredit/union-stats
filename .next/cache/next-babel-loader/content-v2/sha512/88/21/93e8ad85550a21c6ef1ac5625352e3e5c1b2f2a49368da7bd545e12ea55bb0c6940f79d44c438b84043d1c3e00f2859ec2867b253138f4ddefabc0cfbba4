{"ast":null,"code":"import { useWeb3React } from \"@web3-react/core\";\nimport { injected, network } from \"lib/connectors\";\nimport { useEffect, useState } from \"react\";\nexport default function useEagerConnect() {\n  const {\n    activate,\n    active\n  } = useWeb3React();\n  const {\n    0: tried,\n    1: setTried\n  } = useState(false);\n  useEffect(() => {\n    async function handleEagerConnect() {\n      var _window, _window$cookieStore;\n\n      if (false) {\n        await import(\"cookie-store\");\n      }\n\n      const eagerConnect = await ((_window = window) === null || _window === void 0 ? void 0 : (_window$cookieStore = _window.cookieStore) === null || _window$cookieStore === void 0 ? void 0 : _window$cookieStore.get(\"eager_connect\"));\n      const isAuthorized = await injected.isAuthorized();\n\n      if (isAuthorized && Boolean(eagerConnect)) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else {\n        activate(network, undefined, true).catch(() => {\n          setTried(true);\n        });\n      }\n    }\n\n    handleEagerConnect();\n  }, []); // intentionally only running on mount (make sure it's only mounted once :))\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true);\n    }\n  }, [tried, active]);\n  return tried;\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/useEagerConnect.js"],"names":["useWeb3React","injected","network","useEffect","useState","useEagerConnect","activate","active","tried","setTried","handleEagerConnect","eagerConnect","window","cookieStore","get","isAuthorized","Boolean","undefined","catch"],"mappings":"AAAA,SAASA,YAAT,QAA6B,kBAA7B;AACA,SAASC,QAAT,EAAmBC,OAAnB,QAAkC,gBAAlC;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,eAAe,SAASC,eAAT,GAA2B;AACxC,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAuBP,YAAY,EAAzC;AAEA,QAAM;AAAA,OAACQ,KAAD;AAAA,OAAQC;AAAR,MAAoBL,QAAQ,CAAC,KAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeO,kBAAf,GAAoC;AAAA;;AAClC,iBAAmC;AACjC,cAAM,OAAO,cAAP,CAAN;AACD;;AAED,YAAMC,YAAY,GAAG,kBAAMC,MAAN,mEAAM,QAAQC,WAAd,wDAAM,oBAAqBC,GAArB,CAAyB,eAAzB,CAAN,CAArB;AACA,YAAMC,YAAY,GAAG,MAAMd,QAAQ,CAACc,YAAT,EAA3B;;AACA,UAAIA,YAAY,IAAIC,OAAO,CAACL,YAAD,CAA3B,EAA2C;AACzCL,QAAAA,QAAQ,CAACL,QAAD,EAAWgB,SAAX,EAAsB,IAAtB,CAAR,CAAoCC,KAApC,CAA0C,MAAM;AAC9CT,UAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,SAFD;AAGD,OAJD,MAIO;AACLH,QAAAA,QAAQ,CAACJ,OAAD,EAAUe,SAAV,EAAqB,IAArB,CAAR,CAAmCC,KAAnC,CAAyC,MAAM;AAC7CT,UAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,SAFD;AAGD;AACF;;AAEDC,IAAAA,kBAAkB;AACnB,GApBQ,EAoBN,EApBM,CAAT,CALwC,CAyBhC;AAER;;AACAP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACK,KAAD,IAAUD,MAAd,EAAsB;AACpBE,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,GAJQ,EAIN,CAACD,KAAD,EAAQD,MAAR,CAJM,CAAT;AAMA,SAAOC,KAAP;AACD","sourcesContent":["import { useWeb3React } from \"@web3-react/core\";\nimport { injected, network } from \"lib/connectors\";\nimport { useEffect, useState } from \"react\";\n\nexport default function useEagerConnect() {\n  const { activate, active } = useWeb3React();\n\n  const [tried, setTried] = useState(false);\n\n  useEffect(() => {\n    async function handleEagerConnect() {\n      if (typeof window !== \"undefined\") {\n        await import(\"cookie-store\");\n      }\n\n      const eagerConnect = await window?.cookieStore?.get(\"eager_connect\");\n      const isAuthorized = await injected.isAuthorized();\n      if (isAuthorized && Boolean(eagerConnect)) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else {\n        activate(network, undefined, true).catch(() => {\n          setTried(true);\n        });\n      }\n    }\n\n    handleEagerConnect();\n  }, []); // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true);\n    }\n  }, [tried, active]);\n\n  return tried;\n}\n"]},"metadata":{},"sourceType":"module"}