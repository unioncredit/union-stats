{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/mathewstokes/Desktop/stats-app/components-ui/WithdrawInput.js\";\nimport { useForm } from \"react-hook-form\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport getReceipt from \"util/getReceipt\";\nimport handleTxError from \"util/handleTxError\";\nimport errorMessages from \"util/errorMessages\";\nimport useStakeWithdraw from \"hooks/payables/useStakeWithdraw\";\nimport { Button, Box, Dai, Input } from \"@unioncredit/ui\";\nimport { useAddActivity } from \"hooks/data/useActivity\";\nimport activityLabels from \"util/activityLabels\";\nimport isHash from \"util/isHash\";\nexport const WithdrawInput = ({\n  withdrawableStake,\n  onComplete\n}) => {\n  var _errors$amount;\n\n  const {\n    library\n  } = useWeb3React();\n  const addActivity = useAddActivity();\n  const {\n    handleSubmit,\n    register,\n    setValue,\n    formState,\n    errors,\n    reset,\n    watch\n  } = useForm({\n    mode: \"onChange\",\n    reValidateMode: \"onChange\"\n  });\n  const {\n    isDirty,\n    isSubmitting\n  } = formState;\n  const watchAmount = watch(\"amount\", 0);\n  const amount = Number(watchAmount || 0);\n  const withdraw = useStakeWithdraw();\n\n  const onSubmit = async values => {\n    try {\n      const {\n        hash\n      } = await withdraw(values.amount);\n      await getReceipt(hash, library, {\n        pending: `Unstaking ${values.amount} DAI`,\n        success: `Unstaked ${values.amount} DAI`\n      });\n      await onComplete();\n      addActivity(activityLabels.withdraw({\n        amount: values.amount,\n        hash\n      }));\n      reset();\n    } catch (err) {\n      const hash = isHash(err.message) && err.message;\n      addActivity(activityLabels.withdraw({\n        amount: values.amount,\n        hash\n      }, true));\n      handleTxError(err, `Failed to unstake ${values.amount} DAI`);\n    }\n  };\n\n  const handleMaxWithdraw = () => {\n    setValue(\"amount\", withdrawableStake, {\n      shouldDirty: true,\n      shouldValidate: true\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      mt: \"18px\",\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        type: \"number\",\n        ref: register({\n          required: errorMessages.required,\n          max: {\n            value: withdrawableStake,\n            message: errorMessages.notEnoughStake\n          },\n          min: {\n            value: 0.01,\n            message: errorMessages.minValuePointZeroOne\n          }\n        }),\n        name: \"amount\",\n        label: \"Amount to unstake\",\n        caption: `Max. ${withdrawableStake} DAI`,\n        onCaptionClick: handleMaxWithdraw,\n        placeholder: \"0\",\n        suffix: /*#__PURE__*/_jsxDEV(Dai, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 19\n        }, this),\n        error: errors === null || errors === void 0 ? void 0 : (_errors$amount = errors.amount) === null || _errors$amount === void 0 ? void 0 : _errors$amount.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      fluid: true,\n      type: \"submit\",\n      mt: \"18px\",\n      label: `Unstake ${amount} DAI`,\n      loading: isSubmitting,\n      disabled: !isDirty\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/components-ui/WithdrawInput.js"],"names":["useForm","useWeb3React","getReceipt","handleTxError","errorMessages","useStakeWithdraw","Button","Box","Dai","Input","useAddActivity","activityLabels","isHash","WithdrawInput","withdrawableStake","onComplete","library","addActivity","handleSubmit","register","setValue","formState","errors","reset","watch","mode","reValidateMode","isDirty","isSubmitting","watchAmount","amount","Number","withdraw","onSubmit","values","hash","pending","success","err","message","handleMaxWithdraw","shouldDirty","shouldValidate","required","max","value","notEnoughStake","min","minValuePointZeroOne"],"mappings":"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","sourcesContent":["import { useForm } from \"react-hook-form\";\nimport { useWeb3React } from \"@web3-react/core\";\n\nimport getReceipt from \"util/getReceipt\";\nimport handleTxError from \"util/handleTxError\";\nimport errorMessages from \"util/errorMessages\";\nimport useStakeWithdraw from \"hooks/payables/useStakeWithdraw\";\nimport { Button, Box, Dai, Input } from \"@unioncredit/ui\";\nimport { useAddActivity } from \"hooks/data/useActivity\";\nimport activityLabels from \"util/activityLabels\";\nimport isHash from \"util/isHash\";\n\nexport const WithdrawInput = ({ withdrawableStake, onComplete }) => {\n  const { library } = useWeb3React();\n  const addActivity = useAddActivity();\n  const { handleSubmit, register, setValue, formState, errors, reset, watch } =\n    useForm({\n      mode: \"onChange\",\n      reValidateMode: \"onChange\",\n    });\n\n  const { isDirty, isSubmitting } = formState;\n\n  const watchAmount = watch(\"amount\", 0);\n  const amount = Number(watchAmount || 0);\n\n  const withdraw = useStakeWithdraw();\n\n  const onSubmit = async (values) => {\n    try {\n      const { hash } = await withdraw(values.amount);\n      await getReceipt(hash, library, {\n        pending: `Unstaking ${values.amount} DAI`,\n        success: `Unstaked ${values.amount} DAI`,\n      });\n      await onComplete();\n      addActivity(activityLabels.withdraw({ amount: values.amount, hash }));\n      reset();\n    } catch (err) {\n      const hash = isHash(err.message) && err.message;\n      addActivity(\n        activityLabels.withdraw({ amount: values.amount, hash }, true)\n      );\n      handleTxError(err, `Failed to unstake ${values.amount} DAI`);\n    }\n  };\n\n  const handleMaxWithdraw = () => {\n    setValue(\"amount\", withdrawableStake, {\n      shouldDirty: true,\n      shouldValidate: true,\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Box mt=\"18px\">\n        <Input\n          type=\"number\"\n          ref={register({\n            required: errorMessages.required,\n            max: {\n              value: withdrawableStake,\n              message: errorMessages.notEnoughStake,\n            },\n            min: {\n              value: 0.01,\n              message: errorMessages.minValuePointZeroOne,\n            },\n          })}\n          name=\"amount\"\n          label=\"Amount to unstake\"\n          caption={`Max. ${withdrawableStake} DAI`}\n          onCaptionClick={handleMaxWithdraw}\n          placeholder=\"0\"\n          suffix={<Dai />}\n          error={errors?.amount?.message}\n        />\n      </Box>\n      <Button\n        fluid\n        type=\"submit\"\n        mt=\"18px\"\n        label={`Unstake ${amount} DAI`}\n        loading={isSubmitting}\n        disabled={!isDirty}\n      />\n    </form>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}