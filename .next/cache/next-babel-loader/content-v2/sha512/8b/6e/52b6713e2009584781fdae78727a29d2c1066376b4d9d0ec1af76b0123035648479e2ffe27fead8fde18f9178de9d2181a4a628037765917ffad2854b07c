{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { addToast, FLAVORS } from \"../hooks/useToast\";\n/**\n * @name getReceipt\n *\n * @param {String} hash\n * @param {import(\"@ethersproject/providers\").Provider} library\n */\n\nexport default function getReceipt(_x, _x2) {\n  return _getReceipt.apply(this, arguments);\n}\n\nfunction _getReceipt() {\n  _getReceipt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(hash, library) {\n    var messages,\n        _addToast,\n        hidePending,\n        receipt,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            messages = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n            _addToast = addToast(FLAVORS.TX_PENDING(hash, messages.pending)), hidePending = _addToast.hide;\n            _context.next = 4;\n            return library.waitForTransaction(hash);\n\n          case 4:\n            receipt = _context.sent;\n            hidePending();\n\n            if (!(receipt.status !== 1)) {\n              _context.next = 8;\n              break;\n            }\n\n            throw new Error(receipt.transactionHash);\n\n          case 8:\n            addToast(FLAVORS.TX_SUCCESS(hash, messages.success));\n            return _context.abrupt(\"return\", receipt);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getReceipt.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/util/getReceipt.js"],"names":["addToast","FLAVORS","getReceipt","hash","library","messages","TX_PENDING","pending","hidePending","hide","waitForTransaction","receipt","status","Error","transactionHash","TX_SUCCESS","success"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,OAAnB,QAAkC,mBAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,wBAA8BC,UAA9B;AAAA;AAAA;;;yEAAe,iBAA0BC,IAA1B,EAAgCC,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAyCC,YAAAA,QAAzC,2DAAoD,EAApD;AAAA,wBACiBL,QAAQ,CACpCC,OAAO,CAACK,UAAR,CAAmBH,IAAnB,EAAyBE,QAAQ,CAACE,OAAlC,CADoC,CADzB,EACCC,WADD,aACLC,IADK;AAAA;AAAA,mBAKSL,OAAO,CAACM,kBAAR,CAA2BP,IAA3B,CALT;;AAAA;AAKPQ,YAAAA,OALO;AAObH,YAAAA,WAAW;;AAPE,kBASTG,OAAO,CAACC,MAAR,KAAmB,CATV;AAAA;AAAA;AAAA;;AAAA,kBAUL,IAAIC,KAAJ,CAAUF,OAAO,CAACG,eAAlB,CAVK;;AAAA;AAabd,YAAAA,QAAQ,CAACC,OAAO,CAACc,UAAR,CAAmBZ,IAAnB,EAAyBE,QAAQ,CAACW,OAAlC,CAAD,CAAR;AAba,6CAeNL,OAfM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { addToast, FLAVORS } from \"../hooks/useToast\";\n\n/**\n * @name getReceipt\n *\n * @param {String} hash\n * @param {import(\"@ethersproject/providers\").Provider} library\n */\nexport default async function getReceipt(hash, library, messages = {}) {\n  const { hide: hidePending } = addToast(\n    FLAVORS.TX_PENDING(hash, messages.pending)\n  );\n\n  const receipt = await library.waitForTransaction(hash);\n\n  hidePending();\n\n  if (receipt.status !== 1) {\n    throw new Error(receipt.transactionHash);\n  }\n\n  addToast(FLAVORS.TX_SUCCESS(hash, messages.success));\n\n  return receipt;\n}\n"]},"metadata":{},"sourceType":"module"}