{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { injected } from \"lib/connectors\";\nexport default function useInactiveListener() {\n  _s();\n\n  var suppress = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n  var _useWeb3React = useWeb3React(),\n      active = _useWeb3React.active,\n      error = _useWeb3React.error,\n      activate = _useWeb3React.activate;\n\n  useEffect(function () {\n    var _window = window,\n        ethereum = _window.ethereum;\n\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      var handleConnect = function handleConnect() {\n        activate(injected);\n      };\n\n      var handleChainChanged = function handleChainChanged() {\n        activate(injected);\n      };\n\n      var handleAccountsChanged = function handleAccountsChanged(accounts) {\n        if (accounts.length > 0) {\n          activate(injected);\n        }\n      };\n\n      var handleNetworkChanged = function handleNetworkChanged() {\n        activate(injected);\n      };\n\n      ethereum.on(\"connect\", handleConnect);\n      ethereum.on(\"chainChanged\", handleChainChanged);\n      ethereum.on(\"accountsChanged\", handleAccountsChanged);\n      ethereum.on(\"networkChanged\", handleNetworkChanged);\n      return function () {\n        if (ethereum.removeListener) {\n          ethereum.removeListener(\"connect\", handleConnect);\n          ethereum.removeListener(\"chainChanged\", handleChainChanged);\n          ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n          ethereum.removeListener(\"networkChanged\", handleNetworkChanged);\n        }\n      };\n    }\n  }, [active, error, suppress, activate]);\n}\n\n_s(useInactiveListener, \"tg+LUTCYzAVRTYzC32Q8yta1BMA=\", false, function () {\n  return [useWeb3React];\n});","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/useInactiveListener.js"],"names":["useEffect","useWeb3React","injected","useInactiveListener","suppress","active","error","activate","window","ethereum","on","handleConnect","handleChainChanged","handleAccountsChanged","accounts","length","handleNetworkChanged","removeListener"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,eAAe,SAASC,mBAAT,GAA+C;AAAA;;AAAA,MAAlBC,QAAkB,uEAAP,KAAO;;AAAA,sBACxBH,YAAY,EADY;AAAA,MACpDI,MADoD,iBACpDA,MADoD;AAAA,MAC5CC,KAD4C,iBAC5CA,KAD4C;AAAA,MACrCC,QADqC,iBACrCA,QADqC;;AAG5DP,EAAAA,SAAS,CAAC,YAAM;AAAA,kBACOQ,MADP;AAAA,QACNC,QADM,WACNA,QADM;;AAEd,QAAIA,QAAQ,IAAIA,QAAQ,CAACC,EAArB,IAA2B,CAACL,MAA5B,IAAsC,CAACC,KAAvC,IAAgD,CAACF,QAArD,EAA+D;AAC7D,UAAMO,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1BJ,QAAAA,QAAQ,CAACL,QAAD,CAAR;AACD,OAFD;;AAGA,UAAMU,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC/BL,QAAAA,QAAQ,CAACL,QAAD,CAAR;AACD,OAFD;;AAGA,UAAMW,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,QAAD,EAAc;AAC1C,YAAIA,QAAQ,CAACC,MAAT,GAAkB,CAAtB,EAAyB;AACvBR,UAAAA,QAAQ,CAACL,QAAD,CAAR;AACD;AACF,OAJD;;AAKA,UAAMc,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;AACjCT,QAAAA,QAAQ,CAACL,QAAD,CAAR;AACD,OAFD;;AAIAO,MAAAA,QAAQ,CAACC,EAAT,CAAY,SAAZ,EAAuBC,aAAvB;AACAF,MAAAA,QAAQ,CAACC,EAAT,CAAY,cAAZ,EAA4BE,kBAA5B;AACAH,MAAAA,QAAQ,CAACC,EAAT,CAAY,iBAAZ,EAA+BG,qBAA/B;AACAJ,MAAAA,QAAQ,CAACC,EAAT,CAAY,gBAAZ,EAA8BM,oBAA9B;AAEA,aAAO,YAAM;AACX,YAAIP,QAAQ,CAACQ,cAAb,EAA6B;AAC3BR,UAAAA,QAAQ,CAACQ,cAAT,CAAwB,SAAxB,EAAmCN,aAAnC;AACAF,UAAAA,QAAQ,CAACQ,cAAT,CAAwB,cAAxB,EAAwCL,kBAAxC;AACAH,UAAAA,QAAQ,CAACQ,cAAT,CAAwB,iBAAxB,EAA2CJ,qBAA3C;AACAJ,UAAAA,QAAQ,CAACQ,cAAT,CAAwB,gBAAxB,EAA0CD,oBAA1C;AACD;AACF,OAPD;AAQD;AACF,GAhCQ,EAgCN,CAACX,MAAD,EAASC,KAAT,EAAgBF,QAAhB,EAA0BG,QAA1B,CAhCM,CAAT;AAiCD;;GApCuBJ,mB;UACcF,Y","sourcesContent":["import { useEffect } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { injected } from \"lib/connectors\";\n\nexport default function useInactiveListener(suppress = false) {\n  const { active, error, activate } = useWeb3React();\n\n  useEffect(() => {\n    const { ethereum } = window;\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleConnect = () => {\n        activate(injected);\n      };\n      const handleChainChanged = () => {\n        activate(injected);\n      };\n      const handleAccountsChanged = (accounts) => {\n        if (accounts.length > 0) {\n          activate(injected);\n        }\n      };\n      const handleNetworkChanged = () => {\n        activate(injected);\n      };\n\n      ethereum.on(\"connect\", handleConnect);\n      ethereum.on(\"chainChanged\", handleChainChanged);\n      ethereum.on(\"accountsChanged\", handleAccountsChanged);\n      ethereum.on(\"networkChanged\", handleNetworkChanged);\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener(\"connect\", handleConnect);\n          ethereum.removeListener(\"chainChanged\", handleChainChanged);\n          ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n          ethereum.removeListener(\"networkChanged\", handleNetworkChanged);\n        }\n      };\n    }\n  }, [active, error, suppress, activate]);\n}\n"]},"metadata":{},"sourceType":"module"}