{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mathewstokes/Desktop/union-stats/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mathewstokes/Desktop/union-stats/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport useComptrollerContract from \"hooks/contracts/useComptrollerContract\";\nimport useUnionDecimals from \"hooks/useUnionDecimals\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport useSWR from \"swr\";\nimport { BLOCK_SPEED } from \"constants/variables\";\nimport useReadProvider from \"hooks/useReadProvider\";\nimport { getLogs } from \"lib/logs\";\nimport useChainId from \"hooks/useChainId\"; // Calculates average reward distributed per block in past week\n// avg = total_reward_per_week / total_blocks_per_week\n// not reasonable to assume we will ever pull this in any sort of timely manner.\n\nvar getAverageInflationPerBlock = function getAverageInflationPerBlock(comptroller) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_, decimals, provider, chainId) {\n      var blocknumber, blockSpeed, weekInBlocks, fromBlock, eventFilter, rewardLogs, totalReward, rewardPerBlock;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return provider.getBlockNumber();\n\n            case 2:\n              blocknumber = _context.sent;\n              blockSpeed = BLOCK_SPEED[chainId];\n              weekInBlocks = 60 * 60 * 24 * 7 / blockSpeed;\n              fromBlock = blocknumber - weekInBlocks;\n              eventFilter = comptroller.filters.LogWithdrawRewards();\n              _context.next = 9;\n              return getLogs(provider, chainId, eventFilter, fromBlock);\n\n            case 9:\n              rewardLogs = _context.sent;\n              totalReward = rewardLogs.reduce(function (sum, log) {\n                var event = comptroller[\"interface\"].parseLog(log);\n                return sum.add(event.args.amount);\n              }, BigNumber.from(0));\n              rewardPerBlock = totalReward.div(weekInBlocks);\n              return _context.abrupt(\"return\", formatUnits(rewardPerBlock, decimals));\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2, _x3, _x4) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\nexport default function useAverageInflationPerBlock() {\n  _s();\n\n  var chainId = useChainId();\n  var readProvider = useReadProvider();\n  var comptroller = useComptrollerContract(readProvider);\n\n  var _useUnionDecimals = useUnionDecimals(),\n      decimals = _useUnionDecimals.data;\n\n  var shouldFetch = !!comptroller && !!decimals && !!readProvider && !!chainId;\n  return useSWR(shouldFetch ? [\"averageInflationPerBlock\", decimals, readProvider, chainId] : null, getAverageInflationPerBlock(comptroller));\n}\n\n_s(useAverageInflationPerBlock, \"cop5ck693b5dTKN0F///VQcqxNo=\", false, function () {\n  return [useChainId, useReadProvider, useComptrollerContract, useUnionDecimals, useSWR];\n});","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/union-stats/hooks/stats/unionTokenStats/useAverageInflationPerBlock.ts"],"names":["BigNumber","useComptrollerContract","useUnionDecimals","formatUnits","useSWR","BLOCK_SPEED","useReadProvider","getLogs","useChainId","getAverageInflationPerBlock","comptroller","_","decimals","provider","chainId","getBlockNumber","blocknumber","blockSpeed","weekInBlocks","fromBlock","eventFilter","filters","LogWithdrawRewards","rewardLogs","totalReward","reduce","sum","log","event","parseLog","add","args","amount","from","rewardPerBlock","div","useAverageInflationPerBlock","readProvider","data","shouldFetch"],"mappings":";;;;;AAAA,SAASA,SAAT,QAA0B,0BAA1B;AAEA,OAAOC,sBAAP,MAAmC,wCAAnC;AACA,OAAOC,gBAAP,MAA6B,wBAA7B;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,SAASC,OAAT,QAAwB,UAAxB;AACA,OAAOC,UAAP,MAAuB,kBAAvB,C,CAEA;AACA;AACA;;AACA,IAAMC,2BAA2B,GAC/B,SADIA,2BACJ,CAACC,WAAD;AAAA;AAAA,wEACA,iBAAOC,CAAP,EAAeC,QAAf,EAAoCC,QAApC,EAAmDC,OAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAC4BD,QAAQ,CAACE,cAAT,EAD5B;;AAAA;AACQC,cAAAA,WADR;AAEQC,cAAAA,UAFR,GAEqBZ,WAAW,CAACS,OAAD,CAFhC;AAGQI,cAAAA,YAHR,GAGwB,KAAK,EAAL,GAAU,EAAV,GAAe,CAAhB,GAAqBD,UAH5C;AAIQE,cAAAA,SAJR,GAIoBH,WAAW,GAAGE,YAJlC;AAMQE,cAAAA,WANR,GAMmCV,WAAW,CAACW,OAAZ,CAAoBC,kBAApB,EANnC;AAAA;AAAA,qBAO2Bf,OAAO,CAACM,QAAD,EAAWC,OAAX,EAAoBM,WAApB,EAAiCD,SAAjC,CAPlC;;AAAA;AAOQI,cAAAA,UAPR;AASQC,cAAAA,WATR,GASsBD,UAAU,CAACE,MAAX,CAAkB,UAACC,GAAD,EAAiBC,GAAjB,EAA8B;AAClE,oBAAMC,KAAK,GAAGlB,WAAW,aAAX,CAAsBmB,QAAtB,CAA+BF,GAA/B,CAAd;AACA,uBAAOD,GAAG,CAACI,GAAJ,CAAQF,KAAK,CAACG,IAAN,CAAWC,MAAnB,CAAP;AACD,eAHmB,EAGjBhC,SAAS,CAACiC,IAAV,CAAe,CAAf,CAHiB,CATtB;AAcQC,cAAAA,cAdR,GAcyBV,WAAW,CAACW,GAAZ,CAAgBjB,YAAhB,CAdzB;AAAA,+CAgBSf,WAAW,CAAC+B,cAAD,EAAiBtB,QAAjB,CAhBpB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADA;;AAAA;AAAA;AAAA;AAAA;AAAA,CADF;;AAqBA,eAAe,SAASwB,2BAAT,GAAuC;AAAA;;AACpD,MAAMtB,OAAO,GAAGN,UAAU,EAA1B;AACA,MAAM6B,YAAY,GAAG/B,eAAe,EAApC;AACA,MAAMI,WAAqB,GAAGT,sBAAsB,CAACoC,YAAD,CAApD;;AAHoD,0BAIzBnC,gBAAgB,EAJS;AAAA,MAItCU,QAJsC,qBAI5C0B,IAJ4C;;AAMpD,MAAMC,WAAW,GACf,CAAC,CAAC7B,WAAF,IAAiB,CAAC,CAACE,QAAnB,IAA+B,CAAC,CAACyB,YAAjC,IAAiD,CAAC,CAACvB,OADrD;AAGA,SAAOV,MAAM,CACXmC,WAAW,GACP,CAAC,0BAAD,EAA6B3B,QAA7B,EAAuCyB,YAAvC,EAAqDvB,OAArD,CADO,GAEP,IAHO,EAIXL,2BAA2B,CAACC,WAAD,CAJhB,CAAb;AAMD;;GAfuB0B,2B;UACN5B,U,EACKF,e,EACSL,sB,EACHC,gB,EAKpBE,M","sourcesContent":["import { BigNumber } from \"@ethersproject/bignumber\";\nimport { Contract, EventFilter } from \"@ethersproject/contracts\";\nimport useComptrollerContract from \"hooks/contracts/useComptrollerContract\";\nimport useUnionDecimals from \"hooks/useUnionDecimals\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport useSWR from \"swr\";\nimport { BLOCK_SPEED } from \"constants/variables\";\nimport useReadProvider from \"hooks/useReadProvider\";\nimport { getLogs } from \"lib/logs\";\nimport useChainId from \"hooks/useChainId\";\n\n// Calculates average reward distributed per block in past week\n// avg = total_reward_per_week / total_blocks_per_week\n// not reasonable to assume we will ever pull this in any sort of timely manner.\nconst getAverageInflationPerBlock =\n  (comptroller: Contract) =>\n  async (_: any, decimals: BigNumber, provider: any, chainId: number) => {\n    const blocknumber = await provider.getBlockNumber();\n    const blockSpeed = BLOCK_SPEED[chainId];\n    const weekInBlocks = (60 * 60 * 24 * 7) / blockSpeed;\n    const fromBlock = blocknumber - weekInBlocks;\n\n    const eventFilter: EventFilter = comptroller.filters.LogWithdrawRewards();\n    const rewardLogs = await getLogs(provider, chainId, eventFilter, fromBlock);\n\n    const totalReward = rewardLogs.reduce((sum: BigNumber, log: any) => {\n      const event = comptroller.interface.parseLog(log);\n      return sum.add(event.args.amount);\n    }, BigNumber.from(0));\n\n    const rewardPerBlock = totalReward.div(weekInBlocks);\n\n    return formatUnits(rewardPerBlock, decimals);\n  };\n\nexport default function useAverageInflationPerBlock() {\n  const chainId = useChainId();\n  const readProvider = useReadProvider();\n  const comptroller: Contract = useComptrollerContract(readProvider);\n  const { data: decimals } = useUnionDecimals();\n\n  const shouldFetch =\n    !!comptroller && !!decimals && !!readProvider && !!chainId;\n\n  return useSWR(\n    shouldFetch\n      ? [\"averageInflationPerBlock\", decimals, readProvider, chainId]\n      : null,\n    getAverageInflationPerBlock(comptroller)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}