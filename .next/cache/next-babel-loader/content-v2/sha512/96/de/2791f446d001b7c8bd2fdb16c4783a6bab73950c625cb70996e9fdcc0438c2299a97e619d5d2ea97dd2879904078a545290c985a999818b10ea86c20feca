{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport useSWR from \"swr\";\nimport useChainId from \"hooks/useChainId\";\nimport fetchUserTransactions from \"fetchers/fetchUserTransactions\";\nimport fetchUTokenTransactions from \"fetchers/fetchUTokenTransactions\";\nimport fetchRegisterTransactions from \"fetchers/fetchRegisterTransactions\";\n\nfunction fetchData(_x, _x2, _x3) {\n  return _fetchData.apply(this, arguments);\n}\n\nfunction _fetchData() {\n  _fetchData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_, chainId, address) {\n    var registerTransactions, utokenTransactions, userTransactions;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetchRegisterTransactions(chainId, address);\n\n          case 2:\n            registerTransactions = _context.sent;\n            _context.next = 5;\n            return fetchUTokenTransactions(chainId, address);\n\n          case 5:\n            utokenTransactions = _context.sent;\n            _context.next = 8;\n            return fetchUserTransactions(chainId, address);\n\n          case 8:\n            userTransactions = _context.sent;\n            return _context.abrupt(\"return\", [].concat(_toConsumableArray(registerTransactions), _toConsumableArray(utokenTransactions), _toConsumableArray(userTransactions)).sort(function (a, b) {\n              return Number(b.timestamp) - Number(a.timestamp);\n            }));\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchData.apply(this, arguments);\n}\n\nexport default function useAddressHistory(address) {\n  _s();\n\n  var chainId = useChainId();\n  var shouldFetch = chainId;\n  return useSWR(shouldFetch ? [\"EventLogsData\", chainId, address] : null, fetchData, {\n    shouldRetryOnError: false,\n    refreshWhenHidden: false,\n    refreshWhenOffline: false,\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false\n  });\n}\n\n_s(useAddressHistory, \"uZ58AYHOyJ44AvP6Y10ANwGzLxg=\", false, function () {\n  return [useChainId, useSWR];\n});","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/data/useAddressHistory.js"],"names":["useSWR","useChainId","fetchUserTransactions","fetchUTokenTransactions","fetchRegisterTransactions","fetchData","_","chainId","address","registerTransactions","utokenTransactions","userTransactions","sort","a","b","Number","timestamp","useAddressHistory","shouldFetch","shouldRetryOnError","refreshWhenHidden","refreshWhenOffline","revalidateOnFocus","revalidateOnReconnect"],"mappings":";;;;;;AAAA,OAAOA,MAAP,MAAmB,KAAnB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,qBAAP,MAAkC,gCAAlC;AACA,OAAOC,uBAAP,MAAoC,kCAApC;AACA,OAAOC,yBAAP,MAAsC,oCAAtC;;SAEeC,S;;;;;wEAAf,iBAAyBC,CAAzB,EAA4BC,OAA5B,EAAqCC,OAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACqCJ,yBAAyB,CAC1DG,OAD0D,EAE1DC,OAF0D,CAD9D;;AAAA;AACQC,YAAAA,oBADR;AAAA;AAAA,mBAKmCN,uBAAuB,CAACI,OAAD,EAAUC,OAAV,CAL1D;;AAAA;AAKQE,YAAAA,kBALR;AAAA;AAAA,mBAMiCR,qBAAqB,CAACK,OAAD,EAAUC,OAAV,CANtD;;AAAA;AAMQG,YAAAA,gBANR;AAAA,6CAQS,6BACFF,oBADE,sBAEFC,kBAFE,sBAGFC,gBAHE,GAILC,IAJK,CAIA,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACf,qBAAOC,MAAM,CAACD,CAAC,CAACE,SAAH,CAAN,GAAsBD,MAAM,CAACF,CAAC,CAACG,SAAH,CAAnC;AACD,aANM,CART;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAiBA,eAAe,SAASC,iBAAT,CAA2BT,OAA3B,EAAoC;AAAA;;AACjD,MAAMD,OAAO,GAAGN,UAAU,EAA1B;AAEA,MAAMiB,WAAW,GAAGX,OAApB;AAEA,SAAOP,MAAM,CACXkB,WAAW,GAAG,CAAC,eAAD,EAAkBX,OAAlB,EAA2BC,OAA3B,CAAH,GAAyC,IADzC,EAEXH,SAFW,EAGX;AACEc,IAAAA,kBAAkB,EAAE,KADtB;AAEEC,IAAAA,iBAAiB,EAAE,KAFrB;AAGEC,IAAAA,kBAAkB,EAAE,KAHtB;AAIEC,IAAAA,iBAAiB,EAAE,KAJrB;AAKEC,IAAAA,qBAAqB,EAAE;AALzB,GAHW,CAAb;AAWD;;GAhBuBN,iB;UACNhB,U,EAITD,M","sourcesContent":["import useSWR from \"swr\";\nimport useChainId from \"hooks/useChainId\";\nimport fetchUserTransactions from \"fetchers/fetchUserTransactions\";\nimport fetchUTokenTransactions from \"fetchers/fetchUTokenTransactions\";\nimport fetchRegisterTransactions from \"fetchers/fetchRegisterTransactions\";\n\nasync function fetchData(_, chainId, address) {\n  const registerTransactions = await fetchRegisterTransactions(\n    chainId,\n    address\n  );\n  const utokenTransactions = await fetchUTokenTransactions(chainId, address);\n  const userTransactions = await fetchUserTransactions(chainId, address);\n\n  return [\n    ...registerTransactions,\n    ...utokenTransactions,\n    ...userTransactions,\n  ].sort((a, b) => {\n    return Number(b.timestamp) - Number(a.timestamp);\n  });\n}\n\nexport default function useAddressHistory(address) {\n  const chainId = useChainId();\n\n  const shouldFetch = chainId;\n\n  return useSWR(\n    shouldFetch ? [\"EventLogsData\", chainId, address] : null,\n    fetchData,\n    {\n      shouldRetryOnError: false,\n      refreshWhenHidden: false,\n      refreshWhenOffline: false,\n      revalidateOnFocus: false,\n      revalidateOnReconnect: false,\n    }\n  );\n}\n"]},"metadata":{},"sourceType":"module"}