{"ast":null,"code":"import { commify } from \"@ethersproject/units\";\n/**\n * @name format\n * @description Takes in a string or number value and either returns K-formatted or with commas\n *\n * @param {string|number} number\n * @param {number} decimals\n */\n\nexport default function format(num, digits) {\n  num = Number(num);\n\n  if (num && num < 10000) {\n    return commify(num.toFixed(digits).toString());\n  }\n\n  var lookup = [{\n    value: 1,\n    symbol: \"\"\n  }, {\n    value: 1e3,\n    symbol: \"k\"\n  }, {\n    value: 1e6,\n    symbol: \"M\"\n  }, {\n    value: 1e9,\n    symbol: \"B\"\n  }, {\n    value: 1e12,\n    symbol: \"T\"\n  }, {\n    value: 1e15,\n    symbol: \"P\"\n  }, {\n    value: 1e18,\n    symbol: \"E\"\n  }];\n  var rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n  var item = lookup.slice().reverse().find(function (item) {\n    return num >= item.value;\n  });\n  return item ? (num / item.value).toFixed(digits).replace(rx, \"$1\") + item.symbol : \"0\";\n}\nexport function formatDetailed(number) {\n  var unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var decimals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n  if (number === null || number === undefined) return \"NaN\";\n  var fullNumber = Number(number);\n  var fixedNumber = Number(fullNumber.toFixed(decimals));\n  var integerPart = Number(fullNumber.toFixed(0));\n  var fixedDecimalPart = fixedNumber - integerPart;\n  var fullDecimalPart = fullNumber - integerPart;\n  var result = fixedNumber; // if the decimal part is being rounded to zero then set lowest decimal as 1\n\n  if (fixedDecimalPart == 0 && fullDecimalPart > 0) {\n    result += Math.pow(10, -1 * decimals);\n  }\n\n  return commify(result) + (unit ? \" \" + unit : \"\");\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/union/union-stats/union-stats/util/formatValue.js"],"names":["commify","format","num","digits","Number","toFixed","toString","lookup","value","symbol","rx","item","slice","reverse","find","replace","formatDetailed","number","unit","decimals","undefined","fullNumber","fixedNumber","integerPart","fixedDecimalPart","fullDecimalPart","result","Math","pow"],"mappings":"AAAA,SAASA,OAAT,QAAwB,sBAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,MAAT,CAAgBC,GAAhB,EAAqBC,MAArB,EAA6B;AAC1CD,EAAAA,GAAG,GAAGE,MAAM,CAACF,GAAD,CAAZ;;AAEA,MAAIA,GAAG,IAAIA,GAAG,GAAG,KAAjB,EAAwB;AACtB,WAAOF,OAAO,CAACE,GAAG,CAACG,OAAJ,CAAYF,MAAZ,EAAoBG,QAApB,EAAD,CAAd;AACD;;AAED,MAAMC,MAAM,GAAG,CACb;AAAEC,IAAAA,KAAK,EAAE,CAAT;AAAYC,IAAAA,MAAM,EAAE;AAApB,GADa,EAEb;AAAED,IAAAA,KAAK,EAAE,GAAT;AAAcC,IAAAA,MAAM,EAAE;AAAtB,GAFa,EAGb;AAAED,IAAAA,KAAK,EAAE,GAAT;AAAcC,IAAAA,MAAM,EAAE;AAAtB,GAHa,EAIb;AAAED,IAAAA,KAAK,EAAE,GAAT;AAAcC,IAAAA,MAAM,EAAE;AAAtB,GAJa,EAKb;AAAED,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,MAAM,EAAE;AAAvB,GALa,EAMb;AAAED,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,MAAM,EAAE;AAAvB,GANa,EAOb;AAAED,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,MAAM,EAAE;AAAvB,GAPa,CAAf;AAUA,MAAMC,EAAE,GAAG,0BAAX;AAEA,MAAMC,IAAI,GAAGJ,MAAM,CAChBK,KADU,GAEVC,OAFU,GAGVC,IAHU,CAGL,UAAUH,IAAV,EAAgB;AACpB,WAAOT,GAAG,IAAIS,IAAI,CAACH,KAAnB;AACD,GALU,CAAb;AAOA,SAAOG,IAAI,GACP,CAACT,GAAG,GAAGS,IAAI,CAACH,KAAZ,EAAmBH,OAAnB,CAA2BF,MAA3B,EAAmCY,OAAnC,CAA2CL,EAA3C,EAA+C,IAA/C,IAAuDC,IAAI,CAACF,MADrD,GAEP,GAFJ;AAGD;AAED,OAAO,SAASO,cAAT,CAAwBC,MAAxB,EAA2D;AAAA,MAA3BC,IAA2B,uEAApB,IAAoB;AAAA,MAAdC,QAAc,uEAAH,CAAG;AAChE,MAAIF,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAKG,SAAlC,EAA6C,OAAO,KAAP;AAC7C,MAAMC,UAAU,GAAGjB,MAAM,CAACa,MAAD,CAAzB;AACA,MAAMK,WAAW,GAAGlB,MAAM,CAACiB,UAAU,CAAChB,OAAX,CAAmBc,QAAnB,CAAD,CAA1B;AACA,MAAMI,WAAW,GAAGnB,MAAM,CAACiB,UAAU,CAAChB,OAAX,CAAmB,CAAnB,CAAD,CAA1B;AACA,MAAMmB,gBAAgB,GAAGF,WAAW,GAAGC,WAAvC;AACA,MAAME,eAAe,GAAGJ,UAAU,GAAGE,WAArC;AAEA,MAAIG,MAAM,GAAGJ,WAAb,CARgE,CAShE;;AACA,MAAIE,gBAAgB,IAAI,CAApB,IAAyBC,eAAe,GAAG,CAA/C,EAAkD;AAChDC,IAAAA,MAAM,IAAIC,IAAI,CAACC,GAAL,CAAS,EAAT,EAAa,CAAC,CAAD,GAAKT,QAAlB,CAAV;AACD;;AAED,SAAOnB,OAAO,CAAC0B,MAAD,CAAP,IAAmBR,IAAI,GAAG,MAAMA,IAAT,GAAgB,EAAvC,CAAP;AACD","sourcesContent":["import { commify } from \"@ethersproject/units\";\n\n/**\n * @name format\n * @description Takes in a string or number value and either returns K-formatted or with commas\n *\n * @param {string|number} number\n * @param {number} decimals\n */\nexport default function format(num, digits) {\n  num = Number(num);\n\n  if (num && num < 10000) {\n    return commify(num.toFixed(digits).toString());\n  }\n\n  const lookup = [\n    { value: 1, symbol: \"\" },\n    { value: 1e3, symbol: \"k\" },\n    { value: 1e6, symbol: \"M\" },\n    { value: 1e9, symbol: \"B\" },\n    { value: 1e12, symbol: \"T\" },\n    { value: 1e15, symbol: \"P\" },\n    { value: 1e18, symbol: \"E\" },\n  ];\n\n  const rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n\n  const item = lookup\n    .slice()\n    .reverse()\n    .find(function (item) {\n      return num >= item.value;\n    });\n\n  return item\n    ? (num / item.value).toFixed(digits).replace(rx, \"$1\") + item.symbol\n    : \"0\";\n}\n\nexport function formatDetailed(number, unit = null, decimals = 4) {\n  if (number === null || number === undefined) return \"NaN\";\n  const fullNumber = Number(number);\n  const fixedNumber = Number(fullNumber.toFixed(decimals));\n  const integerPart = Number(fullNumber.toFixed(0));\n  const fixedDecimalPart = fixedNumber - integerPart;\n  const fullDecimalPart = fullNumber - integerPart;\n\n  let result = fixedNumber;\n  // if the decimal part is being rounded to zero then set lowest decimal as 1\n  if (fixedDecimalPart == 0 && fullDecimalPart > 0) {\n    result += Math.pow(10, -1 * decimals);\n  }\n\n  return commify(result) + (unit ? \" \" + unit : \"\");\n}\n"]},"metadata":{},"sourceType":"module"}