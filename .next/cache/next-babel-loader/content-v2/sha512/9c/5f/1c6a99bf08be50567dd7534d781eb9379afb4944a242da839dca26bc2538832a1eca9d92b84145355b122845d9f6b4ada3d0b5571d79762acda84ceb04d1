{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/mathewstokes/Desktop/stats-app/components-ui/modals/StakeModal.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { newRidgeState } from \"react-ridge-state\";\nimport { ModalOverlay, Grid, Stat, ToggleMenu } from \"@unioncredit/ui\";\nimport { Modal, DepositInput, WithdrawInput } from \"components-ui\";\nimport { useModal } from \"hooks/useModal\";\nimport { useCallback } from \"react\";\nimport useRewardsData from \"hooks/data/useRewardsData\";\nimport useStakeData from \"hooks/data/useStakeData\";\nimport format from \"util/formatValue\";\nimport useCurrentToken from \"hooks/useCurrentToken\";\nimport useTokenBalance from \"hooks/data/useTokenBalance\";\nimport { Dai } from \"components-ui/Dai\";\nexport const StakeType = {\n  STAKE: \"stake\",\n  UNSTAKE: \"unstake\"\n};\nconst toggleMenuOptions = [{\n  id: StakeType.STAKE,\n  label: \"Stake\"\n}, {\n  id: StakeType.UNSTAKE,\n  label: \"Unstake\"\n}];\nexport const STAKE_MODAL = \"stake-modal\";\nexport const modalStakeType = newRidgeState(\"deposit\");\nexport const useStakeModal = () => {\n  const type = modalStakeType.useValue();\n\n  const _useModal = useModal(STAKE_MODAL),\n        {\n    open\n  } = _useModal,\n        props = _objectWithoutProperties(_useModal, [\"open\"]);\n\n  const handleOpenModal = useCallback(stakeType => {\n    modalStakeType.set(stakeType);\n    open();\n  }, [open]);\n\n  const setType = type => {\n    modalStakeType.set(type);\n  };\n\n  return _objectSpread(_objectSpread({}, props), {}, {\n    open: handleOpenModal,\n    type,\n    setType\n  });\n};\nexport function StakeModal() {\n  const {\n    close,\n    type,\n    setType\n  } = useStakeModal();\n  const UNION = useCurrentToken(\"UNION\");\n  const {\n    mutate: updateUnionBalance\n  } = useTokenBalance(UNION);\n  const {\n    data: stakeData,\n    mutate: updateStakeData\n  } = useStakeData();\n  const {\n    mutate: updateRewardsData\n  } = useRewardsData();\n  const {\n    totalStake = 0.0,\n    withdrawableStake = 0.0\n  } = !!stakeData && stakeData;\n\n  const onComplete = async () => {\n    await updateUnionBalance();\n    await updateStakeData();\n    await updateRewardsData();\n  };\n\n  const onToggleChange = item => {\n    setType(item.id);\n  };\n\n  const initialActiveIndex = toggleMenuOptions.findIndex(({\n    id\n  }) => id === type);\n  return /*#__PURE__*/_jsxDEV(ModalOverlay, {\n    onClick: close,\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      title: \"Stake or Unstake DAI\",\n      onClose: close,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        children: /*#__PURE__*/_jsxDEV(Grid.Row, {\n          children: [/*#__PURE__*/_jsxDEV(Grid.Col, {\n            children: /*#__PURE__*/_jsxDEV(Stat, {\n              size: \"medium\",\n              mb: \"24px\",\n              align: \"center\",\n              label: \"Dai Staked\",\n              value: /*#__PURE__*/_jsxDEV(Dai, {\n                value: format(totalStake, 4)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 24\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid.Col, {\n            children: /*#__PURE__*/_jsxDEV(Stat, {\n              size: \"medium\",\n              mb: \"24px\",\n              align: \"center\",\n              label: \"Withdrawable\",\n              value: /*#__PURE__*/_jsxDEV(Dai, {\n                value: format(withdrawableStake, 4)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 24\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ToggleMenu, {\n        fluid: true,\n        onChange: onToggleChange,\n        items: toggleMenuOptions,\n        initialActive: initialActiveIndex\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), type === StakeType.STAKE ? /*#__PURE__*/_jsxDEV(DepositInput, _objectSpread({}, {\n        totalStake,\n        onComplete\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(WithdrawInput, _objectSpread({}, {\n        withdrawableStake,\n        totalStake,\n        onComplete\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/components-ui/modals/StakeModal.js"],"names":["newRidgeState","ModalOverlay","Grid","Stat","ToggleMenu","Modal","DepositInput","WithdrawInput","useModal","useCallback","useRewardsData","useStakeData","format","useCurrentToken","useTokenBalance","Dai","StakeType","STAKE","UNSTAKE","toggleMenuOptions","id","label","STAKE_MODAL","modalStakeType","useStakeModal","type","useValue","open","props","handleOpenModal","stakeType","set","setType","StakeModal","close","UNION","mutate","updateUnionBalance","data","stakeData","updateStakeData","updateRewardsData","totalStake","withdrawableStake","onComplete","onToggleChange","item","initialActiveIndex","findIndex"],"mappings":";;;;;;;;;;;;;AAAA,SAASA,aAAT,QAA8B,mBAA9B;AACA,SAASC,YAAT,EAAuBC,IAAvB,EAA6BC,IAA7B,EAAmCC,UAAnC,QAAqD,iBAArD;AACA,SAASC,KAAT,EAAgBC,YAAhB,EAA8BC,aAA9B,QAAmD,eAAnD;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,WAAT,QAA4B,OAA5B;AAEA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,OAAOC,eAAP,MAA4B,4BAA5B;AACA,SAASC,GAAT,QAAoB,mBAApB;AAEA,OAAO,MAAMC,SAAS,GAAG;AACvBC,EAAAA,KAAK,EAAE,OADgB;AAEvBC,EAAAA,OAAO,EAAE;AAFc,CAAlB;AAKP,MAAMC,iBAAiB,GAAG,CACxB;AAAEC,EAAAA,EAAE,EAAEJ,SAAS,CAACC,KAAhB;AAAuBI,EAAAA,KAAK,EAAE;AAA9B,CADwB,EAExB;AAAED,EAAAA,EAAE,EAAEJ,SAAS,CAACE,OAAhB;AAAyBG,EAAAA,KAAK,EAAE;AAAhC,CAFwB,CAA1B;AAKA,OAAO,MAAMC,WAAW,GAAG,aAApB;AAEP,OAAO,MAAMC,cAAc,GAAGvB,aAAa,CAAC,SAAD,CAApC;AAEP,OAAO,MAAMwB,aAAa,GAAG,MAAM;AACjC,QAAMC,IAAI,GAAGF,cAAc,CAACG,QAAf,EAAb;;AACA,oBAA2BlB,QAAQ,CAACc,WAAD,CAAnC;AAAA,QAAM;AAAEK,IAAAA;AAAF,GAAN;AAAA,QAAiBC,KAAjB;;AAEA,QAAMC,eAAe,GAAGpB,WAAW,CAChCqB,SAAD,IAAe;AACbP,IAAAA,cAAc,CAACQ,GAAf,CAAmBD,SAAnB;AACAH,IAAAA,IAAI;AACL,GAJgC,EAKjC,CAACA,IAAD,CALiC,CAAnC;;AAQA,QAAMK,OAAO,GAAIP,IAAD,IAAU;AACxBF,IAAAA,cAAc,CAACQ,GAAf,CAAmBN,IAAnB;AACD,GAFD;;AAIA,yCAAYG,KAAZ;AAAmBD,IAAAA,IAAI,EAAEE,eAAzB;AAA0CJ,IAAAA,IAA1C;AAAgDO,IAAAA;AAAhD;AACD,CAjBM;AAmBP,OAAO,SAASC,UAAT,GAAsB;AAC3B,QAAM;AAAEC,IAAAA,KAAF;AAAST,IAAAA,IAAT;AAAeO,IAAAA;AAAf,MAA2BR,aAAa,EAA9C;AAEA,QAAMW,KAAK,GAAGtB,eAAe,CAAC,OAAD,CAA7B;AACA,QAAM;AAAEuB,IAAAA,MAAM,EAAEC;AAAV,MAAiCvB,eAAe,CAACqB,KAAD,CAAtD;AACA,QAAM;AAAEG,IAAAA,IAAI,EAAEC,SAAR;AAAmBH,IAAAA,MAAM,EAAEI;AAA3B,MAA+C7B,YAAY,EAAjE;AACA,QAAM;AAAEyB,IAAAA,MAAM,EAAEK;AAAV,MAAgC/B,cAAc,EAApD;AAEA,QAAM;AAAEgC,IAAAA,UAAU,GAAG,GAAf;AAAoBC,IAAAA,iBAAiB,GAAG;AAAxC,MACJ,CAAC,CAACJ,SAAF,IAAeA,SADjB;;AAGA,QAAMK,UAAU,GAAG,YAAY;AAC7B,UAAMP,kBAAkB,EAAxB;AACA,UAAMG,eAAe,EAArB;AACA,UAAMC,iBAAiB,EAAvB;AACD,GAJD;;AAMA,QAAMI,cAAc,GAAIC,IAAD,IAAU;AAC/Bd,IAAAA,OAAO,CAACc,IAAI,CAAC1B,EAAN,CAAP;AACD,GAFD;;AAIA,QAAM2B,kBAAkB,GAAG5B,iBAAiB,CAAC6B,SAAlB,CACzB,CAAC;AAAE5B,IAAAA;AAAF,GAAD,KAAYA,EAAE,KAAKK,IADM,CAA3B;AAIA,sBACE,QAAC,YAAD;AAAc,IAAA,OAAO,EAAES,KAAvB;AAAA,2BACE,QAAC,KAAD;AAAO,MAAA,KAAK,EAAC,sBAAb;AAAoC,MAAA,OAAO,EAAEA,KAA7C;AAAA,8BACE,QAAC,IAAD;AAAA,+BACE,QAAC,IAAD,CAAM,GAAN;AAAA,kCACE,QAAC,IAAD,CAAM,GAAN;AAAA,mCACE,QAAC,IAAD;AACE,cAAA,IAAI,EAAC,QADP;AAEE,cAAA,EAAE,EAAC,MAFL;AAGE,cAAA,KAAK,EAAC,QAHR;AAIE,cAAA,KAAK,EAAC,YAJR;AAKE,cAAA,KAAK,eAAE,QAAC,GAAD;AAAK,gBAAA,KAAK,EAAEtB,MAAM,CAAC8B,UAAD,EAAa,CAAb;AAAlB;AAAA;AAAA;AAAA;AAAA;AALT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF,eAUE,QAAC,IAAD,CAAM,GAAN;AAAA,mCACE,QAAC,IAAD;AACE,cAAA,IAAI,EAAC,QADP;AAEE,cAAA,EAAE,EAAC,MAFL;AAGE,cAAA,KAAK,EAAC,QAHR;AAIE,cAAA,KAAK,EAAC,cAJR;AAKE,cAAA,KAAK,eAAE,QAAC,GAAD;AAAK,gBAAA,KAAK,EAAE9B,MAAM,CAAC+B,iBAAD,EAAoB,CAApB;AAAlB;AAAA;AAAA;AAAA;AAAA;AALT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAuBE,QAAC,UAAD;AACE,QAAA,KAAK,MADP;AAEE,QAAA,QAAQ,EAAEE,cAFZ;AAGE,QAAA,KAAK,EAAE1B,iBAHT;AAIE,QAAA,aAAa,EAAE4B;AAJjB;AAAA;AAAA;AAAA;AAAA,cAvBF,EA6BGtB,IAAI,KAAKT,SAAS,CAACC,KAAnB,gBACC,QAAC,YAAD,oBAAkB;AAAEyB,QAAAA,UAAF;AAAcE,QAAAA;AAAd,OAAlB;AAAA;AAAA;AAAA;AAAA,cADD,gBAGC,QAAC,aAAD,oBAAmB;AAAED,QAAAA,iBAAF;AAAqBD,QAAAA,UAArB;AAAiCE,QAAAA;AAAjC,OAAnB;AAAA;AAAA;AAAA;AAAA,cAhCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAuCD","sourcesContent":["import { newRidgeState } from \"react-ridge-state\";\nimport { ModalOverlay, Grid, Stat, ToggleMenu } from \"@unioncredit/ui\";\nimport { Modal, DepositInput, WithdrawInput } from \"components-ui\";\nimport { useModal } from \"hooks/useModal\";\nimport { useCallback } from \"react\";\n\nimport useRewardsData from \"hooks/data/useRewardsData\";\nimport useStakeData from \"hooks/data/useStakeData\";\nimport format from \"util/formatValue\";\nimport useCurrentToken from \"hooks/useCurrentToken\";\nimport useTokenBalance from \"hooks/data/useTokenBalance\";\nimport { Dai } from \"components-ui/Dai\";\n\nexport const StakeType = {\n  STAKE: \"stake\",\n  UNSTAKE: \"unstake\",\n};\n\nconst toggleMenuOptions = [\n  { id: StakeType.STAKE, label: \"Stake\" },\n  { id: StakeType.UNSTAKE, label: \"Unstake\" },\n];\n\nexport const STAKE_MODAL = \"stake-modal\";\n\nexport const modalStakeType = newRidgeState(\"deposit\");\n\nexport const useStakeModal = () => {\n  const type = modalStakeType.useValue();\n  const { open, ...props } = useModal(STAKE_MODAL);\n\n  const handleOpenModal = useCallback(\n    (stakeType) => {\n      modalStakeType.set(stakeType);\n      open();\n    },\n    [open]\n  );\n\n  const setType = (type) => {\n    modalStakeType.set(type);\n  };\n\n  return { ...props, open: handleOpenModal, type, setType };\n};\n\nexport function StakeModal() {\n  const { close, type, setType } = useStakeModal();\n\n  const UNION = useCurrentToken(\"UNION\");\n  const { mutate: updateUnionBalance } = useTokenBalance(UNION);\n  const { data: stakeData, mutate: updateStakeData } = useStakeData();\n  const { mutate: updateRewardsData } = useRewardsData();\n\n  const { totalStake = 0.0, withdrawableStake = 0.0 } =\n    !!stakeData && stakeData;\n\n  const onComplete = async () => {\n    await updateUnionBalance();\n    await updateStakeData();\n    await updateRewardsData();\n  };\n\n  const onToggleChange = (item) => {\n    setType(item.id);\n  };\n\n  const initialActiveIndex = toggleMenuOptions.findIndex(\n    ({ id }) => id === type\n  );\n\n  return (\n    <ModalOverlay onClick={close}>\n      <Modal title=\"Stake or Unstake DAI\" onClose={close}>\n        <Grid>\n          <Grid.Row>\n            <Grid.Col>\n              <Stat\n                size=\"medium\"\n                mb=\"24px\"\n                align=\"center\"\n                label=\"Dai Staked\"\n                value={<Dai value={format(totalStake, 4)} />}\n              />\n            </Grid.Col>\n            <Grid.Col>\n              <Stat\n                size=\"medium\"\n                mb=\"24px\"\n                align=\"center\"\n                label=\"Withdrawable\"\n                value={<Dai value={format(withdrawableStake, 4)} />}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Grid>\n        <ToggleMenu\n          fluid\n          onChange={onToggleChange}\n          items={toggleMenuOptions}\n          initialActive={initialActiveIndex}\n        />\n        {type === StakeType.STAKE ? (\n          <DepositInput {...{ totalStake, onComplete }} />\n        ) : (\n          <WithdrawInput {...{ withdrawableStake, totalStake, onComplete }} />\n        )}\n      </Modal>\n    </ModalOverlay>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}