{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { isAddress } from \"@ethersproject/address\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport useSWR from \"swr\";\nimport useCurrentToken from \"../useCurrentToken\";\nimport USER_MANAGER_ABI from \"constants/abis/userManager.json\";\nimport useMarketRegistryContract from \"../contracts/useMarketRegistryContract\";\n\nvar getTrustCount = function getTrustCount(marketRegistryContract) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_, account, library, tokenAddress) {\n      var count, signer, res, userManagerAddress, userManagerContract, addresses;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              count = 0;\n              signer = library.getSigner();\n              _context2.next = 4;\n              return marketRegistryContract.tokens(tokenAddress);\n\n            case 4:\n              res = _context2.sent;\n              userManagerAddress = res.userManager;\n              userManagerContract = new Contract(userManagerAddress, USER_MANAGER_ABI, signer);\n              _context2.next = 9;\n              return userManagerContract.getStakerAddresses(account);\n\n            case 9:\n              addresses = _context2.sent;\n              _context2.next = 12;\n              return Promise.all(addresses.map( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(stakerAddress) {\n                  var trustAmount, isMember;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return userManagerContract.getVouchingAmount(stakerAddress, account);\n\n                        case 2:\n                          trustAmount = _context.sent;\n                          _context.next = 5;\n                          return userManagerContract.checkIsMember(stakerAddress);\n\n                        case 5:\n                          isMember = _context.sent;\n                          if (trustAmount > 0 && isMember) count++;\n\n                        case 7:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x5) {\n                  return _ref2.apply(this, arguments);\n                };\n              }()));\n\n            case 12:\n              return _context2.abrupt(\"return\", count);\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x, _x2, _x3, _x4) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\nexport default function useTrustCountData() {\n  _s();\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      library = _useWeb3React.library;\n\n  var marketRegistryContract = useMarketRegistryContract();\n  var curToken = useCurrentToken();\n  var shouldFetch = !!marketRegistryContract && typeof account === \"string\" && isAddress(curToken);\n  return useSWR(shouldFetch ? [\"TrustCount\", account, library, curToken] : null, getTrustCount(marketRegistryContract));\n}\n\n_s(useTrustCountData, \"aq3hj5+UUXDPfu7gqYntzFICyas=\", false, function () {\n  return [useWeb3React, useMarketRegistryContract, useCurrentToken, useSWR];\n});","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/data/useTrustCountData.ts"],"names":["isAddress","Contract","useWeb3React","useSWR","useCurrentToken","USER_MANAGER_ABI","useMarketRegistryContract","getTrustCount","marketRegistryContract","_","account","library","tokenAddress","count","signer","getSigner","tokens","res","userManagerAddress","userManager","userManagerContract","getStakerAddresses","addresses","Promise","all","map","stakerAddress","getVouchingAmount","trustAmount","checkIsMember","isMember","useTrustCountData","curToken","shouldFetch"],"mappings":";;;;;AAAA,SAASA,SAAT,QAA0B,wBAA1B;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,OAAOC,yBAAP,MAAsC,wCAAtC;;AAEA,IAAMC,aAAa,GACjB,SADIA,aACJ,CAACC,sBAAD;AAAA;AAAA,wEACA,kBAAOC,CAAP,EAAeC,OAAf,EAAgCC,OAAhC,EAA8CC,YAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AACMC,cAAAA,KADN,GACc,CADd;AAGQC,cAAAA,MAHR,GAGiBH,OAAO,CAACI,SAAR,EAHjB;AAAA;AAAA,qBAIoBP,sBAAsB,CAACQ,MAAvB,CAA8BJ,YAA9B,CAJpB;;AAAA;AAIQK,cAAAA,GAJR;AAKQC,cAAAA,kBALR,GAK6BD,GAAG,CAACE,WALjC;AAMQC,cAAAA,mBANR,GAM8B,IAAInB,QAAJ,CAC1BiB,kBAD0B,EAE1Bb,gBAF0B,EAG1BS,MAH0B,CAN9B;AAAA;AAAA,qBAYoCM,mBAAmB,CAACC,kBAApB,CAChCX,OADgC,CAZpC;;AAAA;AAYQY,cAAAA,SAZR;AAAA;AAAA,qBAgBQC,OAAO,CAACC,GAAR,CACJF,SAAS,CAACG,GAAV;AAAA,qFAAc,iBAAOC,aAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACsBN,mBAAmB,CAACO,iBAApB,CAChCD,aADgC,EAEhChB,OAFgC,CADtB;;AAAA;AACNkB,0BAAAA,WADM;AAAA;AAAA,iCAMoBR,mBAAmB,CAACS,aAApB,CAC9BH,aAD8B,CANpB;;AAAA;AAMNI,0BAAAA,QANM;AAUZ,8BAAIF,WAAW,GAAG,CAAd,IAAmBE,QAAvB,EAAiCjB,KAAK;;AAV1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAd;;AAAA;AAAA;AAAA;AAAA,kBADI,CAhBR;;AAAA;AAAA,gDA+BSA,KA/BT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADA;;AAAA;AAAA;AAAA;AAAA;AAAA,CADF;;AAoCA,eAAe,SAASkB,iBAAT,GAA6B;AAAA;;AAAA,sBACb7B,YAAY,EADC;AAAA,MAClCQ,OADkC,iBAClCA,OADkC;AAAA,MACzBC,OADyB,iBACzBA,OADyB;;AAE1C,MAAMH,sBAAsB,GAAGF,yBAAyB,EAAxD;AACA,MAAM0B,QAAQ,GAAG5B,eAAe,EAAhC;AAEA,MAAM6B,WAAW,GACf,CAAC,CAACzB,sBAAF,IACA,OAAOE,OAAP,KAAmB,QADnB,IAEAV,SAAS,CAACgC,QAAD,CAHX;AAKA,SAAO7B,MAAM,CACX8B,WAAW,GAAG,CAAC,YAAD,EAAevB,OAAf,EAAwBC,OAAxB,EAAiCqB,QAAjC,CAAH,GAAgD,IADhD,EAEXzB,aAAa,CAACC,sBAAD,CAFF,CAAb;AAID;;GAduBuB,iB;UACO7B,Y,EACEI,yB,EACdF,e,EAOVD,M","sourcesContent":["import { isAddress } from \"@ethersproject/address\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport useSWR from \"swr\";\nimport useCurrentToken from \"../useCurrentToken\";\nimport USER_MANAGER_ABI from \"constants/abis/userManager.json\";\nimport useMarketRegistryContract from \"../contracts/useMarketRegistryContract\";\n\nconst getTrustCount =\n  (marketRegistryContract: Contract) =>\n  async (_: any, account: string, library: any, tokenAddress: string) => {\n    let count = 0;\n\n    const signer = library.getSigner();\n    const res = await marketRegistryContract.tokens(tokenAddress);\n    const userManagerAddress = res.userManager;\n    const userManagerContract = new Contract(\n      userManagerAddress,\n      USER_MANAGER_ABI,\n      signer\n    );\n\n    const addresses: string[] = await userManagerContract.getStakerAddresses(\n      account\n    );\n\n    await Promise.all(\n      addresses.map(async (stakerAddress) => {\n        const trustAmount: number = await userManagerContract.getVouchingAmount(\n          stakerAddress,\n          account\n        );\n\n        const isMember: boolean = await userManagerContract.checkIsMember(\n          stakerAddress\n        );\n\n        if (trustAmount > 0 && isMember) count++;\n      })\n    );\n\n    return count;\n  };\n\nexport default function useTrustCountData() {\n  const { account, library } = useWeb3React();\n  const marketRegistryContract = useMarketRegistryContract();\n  const curToken = useCurrentToken();\n\n  const shouldFetch =\n    !!marketRegistryContract &&\n    typeof account === \"string\" &&\n    isAddress(curToken);\n\n  return useSWR(\n    shouldFetch ? [\"TrustCount\", account, library, curToken] : null,\n    getTrustCount(marketRegistryContract)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}