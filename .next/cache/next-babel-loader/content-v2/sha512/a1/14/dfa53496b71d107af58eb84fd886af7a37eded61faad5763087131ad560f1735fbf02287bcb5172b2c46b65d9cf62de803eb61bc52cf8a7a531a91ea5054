{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { request, gql } from \"graphql-request\";\nimport { GRAPHQL_URLS } from \"constants/variables\";\nexport default async function fetchGovernanceProposals(chainId) {\n  const query = gql`\n    {\n      proposals(first: 999) {\n        id\n        pid\n        proposer\n        description\n        targets\n        signatures\n        calldatas\n      }\n    }\n  `;\n  const logs = await request(GRAPHQL_URLS[chainId].gov, query); // reverse events to get them from newest to oldest\n\n  const formattedEventData = logs.proposals.map(log => {\n    const hashId = log.id.split(\"-\");\n    const id = String(Number(hashId[1]) + 1);\n    const hash = hashId[0];\n    return _objectSpread(_objectSpread({}, log), {}, {\n      id,\n      hash,\n      description: log.description\n    });\n  }).reverse();\n  return formattedEventData;\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/fetchers/fetchGovernanceProposals.js"],"names":["request","gql","GRAPHQL_URLS","fetchGovernanceProposals","chainId","query","logs","gov","formattedEventData","proposals","map","log","hashId","id","split","String","Number","hash","description","reverse"],"mappings":";;;;;;AAAA,SAASA,OAAT,EAAkBC,GAAlB,QAA6B,iBAA7B;AACA,SAASC,YAAT,QAA6B,qBAA7B;AAEA,eAAe,eAAeC,wBAAf,CAAwCC,OAAxC,EAAiD;AAC9D,QAAMC,KAAK,GAAGJ,GAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAZE;AAcA,QAAMK,IAAI,GAAG,MAAMN,OAAO,CAACE,YAAY,CAACE,OAAD,CAAZ,CAAsBG,GAAvB,EAA4BF,KAA5B,CAA1B,CAf8D,CAiB9D;;AACA,QAAMG,kBAAkB,GAAGF,IAAI,CAACG,SAAL,CACxBC,GADwB,CACnBC,GAAD,IAAS;AACZ,UAAMC,MAAM,GAAGD,GAAG,CAACE,EAAJ,CAAOC,KAAP,CAAa,GAAb,CAAf;AACA,UAAMD,EAAE,GAAGE,MAAM,CAACC,MAAM,CAACJ,MAAM,CAAC,CAAD,CAAP,CAAN,GAAoB,CAArB,CAAjB;AACA,UAAMK,IAAI,GAAGL,MAAM,CAAC,CAAD,CAAnB;AAEA,2CACKD,GADL;AAEEE,MAAAA,EAFF;AAGEI,MAAAA,IAHF;AAIEC,MAAAA,WAAW,EAAEP,GAAG,CAACO;AAJnB;AAMD,GAZwB,EAaxBC,OAbwB,EAA3B;AAeA,SAAOX,kBAAP;AACD","sourcesContent":["import { request, gql } from \"graphql-request\";\nimport { GRAPHQL_URLS } from \"constants/variables\";\n\nexport default async function fetchGovernanceProposals(chainId) {\n  const query = gql`\n    {\n      proposals(first: 999) {\n        id\n        pid\n        proposer\n        description\n        targets\n        signatures\n        calldatas\n      }\n    }\n  `;\n\n  const logs = await request(GRAPHQL_URLS[chainId].gov, query);\n\n  // reverse events to get them from newest to oldest\n  const formattedEventData = logs.proposals\n    .map((log) => {\n      const hashId = log.id.split(\"-\");\n      const id = String(Number(hashId[1]) + 1);\n      const hash = hashId[0];\n\n      return {\n        ...log,\n        id,\n        hash,\n        description: log.description,\n      };\n    })\n    .reverse();\n\n  return formattedEventData;\n}\n"]},"metadata":{},"sourceType":"module"}