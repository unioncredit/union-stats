{"ast":null,"code":"import { useCallback as _useCallback2 } from \"react\";\nimport { useCallback as _useCallback } from \"react\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect } from \"react\";\nimport { newRidgeState } from \"react-ridge-state\";\nimport { useWeb3React } from \"@web3-react/core\";\nconst MAX_SIZE = 8;\nconst activityStorageKey = \"union:activity\";\nconst initialState = false ? JSON.parse(localStorage.getItem(activityStorageKey)) : {};\nconst activityState = newRidgeState(initialState);\nexport const addActivity = (chainId, address) => activity => {\n  const key = [chainId, address].toString();\n\n  const getUpdatedState = (stateSlice, activity) => {\n    if (!stateSlice) return [activity];\n\n    if (stateSlice.length >= MAX_SIZE) {\n      return [activity, ...stateSlice.slice(0, MAX_SIZE - 1)];\n    }\n\n    return [activity, ...stateSlice];\n  };\n\n  activityState.set(state => {\n    const stateSlice = state === null || state === void 0 ? void 0 : state[key];\n    const updatedChainState = getUpdatedState(stateSlice, activity);\n    return _objectSpread(_objectSpread({}, state), {}, {\n      [key]: updatedChainState\n    });\n  });\n};\nexport const clearActivity = (chainId, address) => {\n  const key = [chainId, address].toString();\n  activityState.set(state => _objectSpread(_objectSpread({}, state), {}, {\n    [key]: []\n  }));\n};\nexport function useAddActivity() {\n  const {\n    chainId,\n    account\n  } = useWeb3React();\n  return _useCallback(activity => chainId && addActivity(chainId, account)(activity), [chainId, account]);\n}\nexport function useClearActivity() {\n  const {\n    chainId,\n    account\n  } = useWeb3React();\n  return _useCallback2(() => chainId && clearActivity(chainId, account), [chainId, account]);\n}\nexport default function useActivity() {\n  const {\n    chainId,\n    account\n  } = useWeb3React();\n  const activity = activityState.useValue();\n  useEffect(() => {\n    if (!chainId) return;\n\n    if (false) {\n      window.localStorage.setItem(activityStorageKey, JSON.stringify(activity));\n    }\n  }, [activity, chainId]);\n  return activity && chainId && activity[[chainId, account]];\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/data/useActivity.js"],"names":["useEffect","newRidgeState","useWeb3React","MAX_SIZE","activityStorageKey","initialState","JSON","parse","localStorage","getItem","activityState","addActivity","chainId","address","activity","key","toString","getUpdatedState","stateSlice","length","slice","set","state","updatedChainState","clearActivity","useAddActivity","account","useClearActivity","useActivity","useValue","window","setItem","stringify"],"mappings":";;;;;;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AAGA,MAAMC,QAAQ,GAAG,CAAjB;AACA,MAAMC,kBAAkB,GAAG,gBAA3B;AAEA,MAAMC,YAAY,GAChB,QACIC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqBL,kBAArB,CAAX,CADJ,GAEI,EAHN;AAKA,MAAMM,aAAa,GAAGT,aAAa,CAACI,YAAD,CAAnC;AAEA,OAAO,MAAMM,WAAW,GAAG,CAACC,OAAD,EAAUC,OAAV,KAAuBC,QAAD,IAAc;AAC7D,QAAMC,GAAG,GAAG,CAACH,OAAD,EAAUC,OAAV,EAAmBG,QAAnB,EAAZ;;AAEA,QAAMC,eAAe,GAAG,CAACC,UAAD,EAAaJ,QAAb,KAA0B;AAChD,QAAI,CAACI,UAAL,EAAiB,OAAO,CAACJ,QAAD,CAAP;;AACjB,QAAII,UAAU,CAACC,MAAX,IAAqBhB,QAAzB,EAAmC;AACjC,aAAO,CAACW,QAAD,EAAW,GAAGI,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAoBjB,QAAQ,GAAG,CAA/B,CAAd,CAAP;AACD;;AACD,WAAO,CAACW,QAAD,EAAW,GAAGI,UAAd,CAAP;AACD,GAND;;AAQAR,EAAAA,aAAa,CAACW,GAAd,CAAmBC,KAAD,IAAW;AAC3B,UAAMJ,UAAU,GAAGI,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAGP,GAAH,CAAxB;AACA,UAAMQ,iBAAiB,GAAGN,eAAe,CAACC,UAAD,EAAaJ,QAAb,CAAzC;AACA,2CAAYQ,KAAZ;AAAmB,OAACP,GAAD,GAAOQ;AAA1B;AACD,GAJD;AAKD,CAhBM;AAkBP,OAAO,MAAMC,aAAa,GAAG,CAACZ,OAAD,EAAUC,OAAV,KAAsB;AACjD,QAAME,GAAG,GAAG,CAACH,OAAD,EAAUC,OAAV,EAAmBG,QAAnB,EAAZ;AACAN,EAAAA,aAAa,CAACW,GAAd,CAAmBC,KAAD,oCAAiBA,KAAjB;AAAwB,KAACP,GAAD,GAAO;AAA/B,IAAlB;AACD,CAHM;AAKP,OAAO,SAASU,cAAT,GAA0B;AAC/B,QAAM;AAAEb,IAAAA,OAAF;AAAWc,IAAAA;AAAX,MAAuBxB,YAAY,EAAzC;AACA,sBACGY,QAAD,IAAcF,OAAO,IAAID,WAAW,CAACC,OAAD,EAAUc,OAAV,CAAX,CAA8BZ,QAA9B,CAD3B,GACgBF,OADhB,EACgDc,OADhD;AAGD;AAED,OAAO,SAASC,gBAAT,GAA4B;AACjC,QAAM;AAAEf,IAAAA,OAAF;AAAWc,IAAAA;AAAX,MAAuBxB,YAAY,EAAzC;AACA,uBAAuB,MAAMU,OAAO,IAAIY,aAAa,CAACZ,OAAD,EAAUc,OAAV,CAArD,GAA6Bd,OAA7B,EAA+Dc,OAA/D;AACD;AAED,eAAe,SAASE,WAAT,GAAuB;AACpC,QAAM;AAAEhB,IAAAA,OAAF;AAAWc,IAAAA;AAAX,MAAuBxB,YAAY,EAAzC;AACA,QAAMY,QAAQ,GAAGJ,aAAa,CAACmB,QAAd,EAAjB;AAEA7B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACY,OAAL,EAAc;;AACd,eAAmC;AACjCkB,MAAAA,MAAM,CAACtB,YAAP,CAAoBuB,OAApB,CAA4B3B,kBAA5B,EAAgDE,IAAI,CAAC0B,SAAL,CAAelB,QAAf,CAAhD;AACD;AACF,GALQ,EAKN,CAACA,QAAD,EAAWF,OAAX,CALM,CAAT;AAOA,SAAOE,QAAQ,IAAIF,OAAZ,IAAuBE,QAAQ,CAAC,CAACF,OAAD,EAAUc,OAAV,CAAD,CAAtC;AACD","sourcesContent":["import { useEffect } from \"react\";\nimport { newRidgeState } from \"react-ridge-state\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useAutoCallback } from \"hooks.macro\";\n\nconst MAX_SIZE = 8;\nconst activityStorageKey = \"union:activity\";\n\nconst initialState =\n  typeof window !== \"undefined\"\n    ? JSON.parse(localStorage.getItem(activityStorageKey))\n    : {};\n\nconst activityState = newRidgeState(initialState);\n\nexport const addActivity = (chainId, address) => (activity) => {\n  const key = [chainId, address].toString();\n\n  const getUpdatedState = (stateSlice, activity) => {\n    if (!stateSlice) return [activity];\n    if (stateSlice.length >= MAX_SIZE) {\n      return [activity, ...stateSlice.slice(0, MAX_SIZE - 1)];\n    }\n    return [activity, ...stateSlice];\n  };\n\n  activityState.set((state) => {\n    const stateSlice = state?.[key];\n    const updatedChainState = getUpdatedState(stateSlice, activity);\n    return { ...state, [key]: updatedChainState };\n  });\n};\n\nexport const clearActivity = (chainId, address) => {\n  const key = [chainId, address].toString();\n  activityState.set((state) => ({ ...state, [key]: [] }));\n};\n\nexport function useAddActivity() {\n  const { chainId, account } = useWeb3React();\n  return useAutoCallback(\n    (activity) => chainId && addActivity(chainId, account)(activity)\n  );\n}\n\nexport function useClearActivity() {\n  const { chainId, account } = useWeb3React();\n  return useAutoCallback(() => chainId && clearActivity(chainId, account));\n}\n\nexport default function useActivity() {\n  const { chainId, account } = useWeb3React();\n  const activity = activityState.useValue();\n\n  useEffect(() => {\n    if (!chainId) return;\n    if (typeof window !== \"undefined\") {\n      window.localStorage.setItem(activityStorageKey, JSON.stringify(activity));\n    }\n  }, [activity, chainId]);\n\n  return activity && chainId && activity[[chainId, account]];\n}\n"]},"metadata":{},"sourceType":"module"}