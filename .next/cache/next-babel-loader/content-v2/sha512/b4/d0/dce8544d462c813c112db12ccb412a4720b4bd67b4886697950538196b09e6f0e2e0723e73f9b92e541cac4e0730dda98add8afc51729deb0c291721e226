{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useLocalStorage } from \"react-use\";\nimport useSWR from \"swr\";\n\nconst fetcher = () => {\n  const raw = localStorage.getItem(\"labels\");\n  return JSON.parse(raw);\n};\n\nexport default function useAddressLabels() {\n  const {\n    data,\n    mutate\n  } = useSWR(\"labels\", fetcher);\n  const [, setValue] = useLocalStorage(\"labels\", {});\n  /**\n   * @name setLabel\n   * @param {String} address\n   * @param {String} label\n   */\n\n  const setLabel = async (address, label) => {\n    if (!address) return;\n    const key = address.toLowerCase();\n\n    if (!label) {\n      setValue(current => {\n        let cur = current;\n        delete cur[key];\n        return cur;\n      });\n      let curData = data;\n      delete curData[key];\n      await mutate(curData);\n    } else {\n      setValue(current => _objectSpread(_objectSpread({}, current), {}, {\n        [key]: label\n      }));\n      await mutate(_objectSpread(_objectSpread({}, data), {}, {\n        [key]: label\n      }));\n    }\n\n    await mutate();\n  };\n  /**\n   * @name getLabel\n   * @param {String} address\n   * @returns {String|undefined}\n   */\n\n\n  const getLabel = address => {\n    if (!address) return;\n    const key = address.toLowerCase();\n    if (data && Object.prototype.hasOwnProperty.call(data, key)) return data[key];\n    return undefined;\n  };\n\n  return {\n    labels: data,\n    setLabel,\n    getLabel\n  };\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/useAddressLabels.js"],"names":["useLocalStorage","useSWR","fetcher","raw","localStorage","getItem","JSON","parse","useAddressLabels","data","mutate","setValue","setLabel","address","label","key","toLowerCase","current","cur","curData","getLabel","Object","prototype","hasOwnProperty","call","undefined","labels"],"mappings":";;;;;;AAAA,SAASA,eAAT,QAAgC,WAAhC;AACA,OAAOC,MAAP,MAAmB,KAAnB;;AAEA,MAAMC,OAAO,GAAG,MAAM;AACpB,QAAMC,GAAG,GAAGC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAZ;AACA,SAAOC,IAAI,CAACC,KAAL,CAAWJ,GAAX,CAAP;AACD,CAHD;;AAKA,eAAe,SAASK,gBAAT,GAA4B;AACzC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmBT,MAAM,CAAC,QAAD,EAAWC,OAAX,CAA/B;AAEA,QAAM,GAAGS,QAAH,IAAeX,eAAe,CAAC,QAAD,EAAW,EAAX,CAApC;AAEA;AACF;AACA;AACA;AACA;;AACE,QAAMY,QAAQ,GAAG,OAAOC,OAAP,EAAgBC,KAAhB,KAA0B;AACzC,QAAI,CAACD,OAAL,EAAc;AAEd,UAAME,GAAG,GAAGF,OAAO,CAACG,WAAR,EAAZ;;AAEA,QAAI,CAACF,KAAL,EAAY;AACVH,MAAAA,QAAQ,CAAEM,OAAD,IAAa;AACpB,YAAIC,GAAG,GAAGD,OAAV;AACA,eAAOC,GAAG,CAACH,GAAD,CAAV;AACA,eAAOG,GAAP;AACD,OAJO,CAAR;AAMA,UAAIC,OAAO,GAAGV,IAAd;AACA,aAAOU,OAAO,CAACJ,GAAD,CAAd;AACA,YAAML,MAAM,CAACS,OAAD,CAAZ;AACD,KAVD,MAUO;AACLR,MAAAA,QAAQ,CAAEM,OAAD,oCAAmBA,OAAnB;AAA4B,SAACF,GAAD,GAAOD;AAAnC,QAAD,CAAR;AAEA,YAAMJ,MAAM,iCAAMD,IAAN;AAAY,SAACM,GAAD,GAAOD;AAAnB,SAAZ;AACD;;AAED,UAAMJ,MAAM,EAAZ;AACD,GAtBD;AAwBA;AACF;AACA;AACA;AACA;;;AACE,QAAMU,QAAQ,GAAIP,OAAD,IAAa;AAC5B,QAAI,CAACA,OAAL,EAAc;AAEd,UAAME,GAAG,GAAGF,OAAO,CAACG,WAAR,EAAZ;AACA,QAAIP,IAAI,IAAIY,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCf,IAArC,EAA2CM,GAA3C,CAAZ,EACE,OAAON,IAAI,CAACM,GAAD,CAAX;AACF,WAAOU,SAAP;AACD,GAPD;;AASA,SAAO;AAAEC,IAAAA,MAAM,EAAEjB,IAAV;AAAgBG,IAAAA,QAAhB;AAA0BQ,IAAAA;AAA1B,GAAP;AACD","sourcesContent":["import { useLocalStorage } from \"react-use\";\nimport useSWR from \"swr\";\n\nconst fetcher = () => {\n  const raw = localStorage.getItem(\"labels\");\n  return JSON.parse(raw);\n};\n\nexport default function useAddressLabels() {\n  const { data, mutate } = useSWR(\"labels\", fetcher);\n\n  const [, setValue] = useLocalStorage(\"labels\", {});\n\n  /**\n   * @name setLabel\n   * @param {String} address\n   * @param {String} label\n   */\n  const setLabel = async (address, label) => {\n    if (!address) return;\n\n    const key = address.toLowerCase();\n\n    if (!label) {\n      setValue((current) => {\n        let cur = current;\n        delete cur[key];\n        return cur;\n      });\n\n      let curData = data;\n      delete curData[key];\n      await mutate(curData);\n    } else {\n      setValue((current) => ({ ...current, [key]: label }));\n\n      await mutate({ ...data, [key]: label });\n    }\n\n    await mutate();\n  };\n\n  /**\n   * @name getLabel\n   * @param {String} address\n   * @returns {String|undefined}\n   */\n  const getLabel = (address) => {\n    if (!address) return;\n\n    const key = address.toLowerCase();\n    if (data && Object.prototype.hasOwnProperty.call(data, key))\n      return data[key];\n    return undefined;\n  };\n\n  return { labels: data, setLabel, getLabel };\n}\n"]},"metadata":{},"sourceType":"module"}