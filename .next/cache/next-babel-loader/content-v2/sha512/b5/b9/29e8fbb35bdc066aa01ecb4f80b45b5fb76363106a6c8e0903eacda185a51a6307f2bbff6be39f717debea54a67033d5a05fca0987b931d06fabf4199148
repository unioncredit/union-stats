{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query ProposalUpdates($where: ProposalUpdate_filter) {\\n    proposalUpdates(where: $where) {\\n      id\\n      proposer\\n      action\\n      timestamp\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { request, gql } from \"graphql-request\";\nimport { GRAPHQL_URLS } from \"constants/variables\";\nvar query = gql(_templateObject());\nexport default function fetchGovernanceProposalUpdates(_x, _x2) {\n  return _fetchGovernanceProposalUpdates.apply(this, arguments);\n}\n\nfunction _fetchGovernanceProposalUpdates() {\n  _fetchGovernanceProposalUpdates = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(chainId, pid) {\n    var variables, logs;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            variables = {\n              where: {\n                pid: pid.toString()\n              }\n            };\n            _context.next = 3;\n            return request(GRAPHQL_URLS[chainId].gov, query, variables);\n\n          case 3:\n            logs = _context.sent;\n            return _context.abrupt(\"return\", logs.proposalUpdates);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchGovernanceProposalUpdates.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/fetchers/fetchGovernanceProposalHistory.js"],"names":["request","gql","GRAPHQL_URLS","query","fetchGovernanceProposalUpdates","chainId","pid","variables","where","toString","gov","logs","proposalUpdates"],"mappings":";;;;;;;;;;;;;;AAAA,SAASA,OAAT,EAAkBC,GAAlB,QAA6B,iBAA7B;AACA,SAASC,YAAT,QAA6B,qBAA7B;AAEA,IAAMC,KAAK,GAAGF,GAAH,mBAAX;AAWA,wBAA8BG,8BAA9B;AAAA;AAAA;;;6FAAe,iBAA8CC,OAA9C,EAAuDC,GAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,YAAAA,SADO,GACK;AAChBC,cAAAA,KAAK,EAAE;AACLF,gBAAAA,GAAG,EAAEA,GAAG,CAACG,QAAJ;AADA;AADS,aADL;AAAA;AAAA,mBAOMT,OAAO,CAACE,YAAY,CAACG,OAAD,CAAZ,CAAsBK,GAAvB,EAA4BP,KAA5B,EAAmCI,SAAnC,CAPb;;AAAA;AAOPI,YAAAA,IAPO;AAAA,6CASNA,IAAI,CAACC,eATC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { request, gql } from \"graphql-request\";\nimport { GRAPHQL_URLS } from \"constants/variables\";\n\nconst query = gql`\n  query ProposalUpdates($where: ProposalUpdate_filter) {\n    proposalUpdates(where: $where) {\n      id\n      proposer\n      action\n      timestamp\n    }\n  }\n`;\n\nexport default async function fetchGovernanceProposalUpdates(chainId, pid) {\n  const variables = {\n    where: {\n      pid: pid.toString(),\n    },\n  };\n\n  const logs = await request(GRAPHQL_URLS[chainId].gov, query, variables);\n\n  return logs.proposalUpdates;\n}\n"]},"metadata":{},"sourceType":"module"}