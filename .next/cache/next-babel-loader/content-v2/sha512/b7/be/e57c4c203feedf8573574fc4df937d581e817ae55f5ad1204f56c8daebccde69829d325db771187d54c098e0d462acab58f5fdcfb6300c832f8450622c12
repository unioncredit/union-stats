{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { request, gql } from \"graphql-request\";\nimport { GRAPHQL_URLS } from \"constants/variables\";\nimport { TransactionTypes } from \"constants/app\";\nimport { formatEther } from \"@ethersproject/units\";\nexport default async function fetchUTokenTransactions(chainId, address) {\n  const query = gql`\n    query ($first: Int, $account: Bytes) {\n      ${TransactionTypes.BORROW}: borrows(first: $first, where: { account: $account }) {\n        account\n        amount\n        fee\n        timestamp\n      }\n      ${TransactionTypes.REPAY}: repays(first: $first, where: { account: $account }) {\n        account\n        amount\n        timestamp\n      }\n    }\n  `;\n  const variables = {\n    first: 100,\n    account: address\n  };\n  const resp = await request(GRAPHQL_URLS[chainId].utoken, query, variables);\n  const flattened = Object.keys(resp).reduce((acc, key) => {\n    const parsed = resp[key].map(item => {\n      if (item.amount) {\n        item.amount = formatEther(item.amount);\n      }\n\n      return _objectSpread(_objectSpread({}, item), {}, {\n        address: item.account,\n        type: key\n      });\n    });\n    return [...acc, ...parsed];\n  }, []);\n  const sorted = flattened.sort((a, b) => {\n    return Number(b.timestamp) - Number(a.timestamp);\n  });\n  return sorted;\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/fetchers/fetchUTokenTransactions.js"],"names":["request","gql","GRAPHQL_URLS","TransactionTypes","formatEther","fetchUTokenTransactions","chainId","address","query","BORROW","REPAY","variables","first","account","resp","utoken","flattened","Object","keys","reduce","acc","key","parsed","map","item","amount","type","sorted","sort","a","b","Number","timestamp"],"mappings":";;;;;;AAAA,SAASA,OAAT,EAAkBC,GAAlB,QAA6B,iBAA7B;AACA,SAASC,YAAT,QAA6B,qBAA7B;AAEA,SAASC,gBAAT,QAAiC,eAAjC;AACA,SAASC,WAAT,QAA4B,sBAA5B;AAEA,eAAe,eAAeC,uBAAf,CAAuCC,OAAvC,EAAgDC,OAAhD,EAAyD;AACtE,QAAMC,KAAK,GAAGP,GAAI;AACpB;AACA,QAAQE,gBAAgB,CAACM,MAAO;AAChC;AACA;AACA;AACA;AACA;AACA,QAAQN,gBAAgB,CAACO,KAAM;AAC/B;AACA;AACA;AACA;AACA;AACA,GAdE;AAgBA,QAAMC,SAAS,GAAG;AAChBC,IAAAA,KAAK,EAAE,GADS;AAEhBC,IAAAA,OAAO,EAAEN;AAFO,GAAlB;AAKA,QAAMO,IAAI,GAAG,MAAMd,OAAO,CAACE,YAAY,CAACI,OAAD,CAAZ,CAAsBS,MAAvB,EAA+BP,KAA/B,EAAsCG,SAAtC,CAA1B;AAEA,QAAMK,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYJ,IAAZ,EAAkBK,MAAlB,CAAyB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACvD,UAAMC,MAAM,GAAGR,IAAI,CAACO,GAAD,CAAJ,CAAUE,GAAV,CAAeC,IAAD,IAAU;AACrC,UAAIA,IAAI,CAACC,MAAT,EAAiB;AACfD,QAAAA,IAAI,CAACC,MAAL,GAAcrB,WAAW,CAACoB,IAAI,CAACC,MAAN,CAAzB;AACD;;AAED,6CACKD,IADL;AAEEjB,QAAAA,OAAO,EAAEiB,IAAI,CAACX,OAFhB;AAGEa,QAAAA,IAAI,EAAEL;AAHR;AAKD,KAVc,CAAf;AAYA,WAAO,CAAC,GAAGD,GAAJ,EAAS,GAAGE,MAAZ,CAAP;AACD,GAdiB,EAcf,EAde,CAAlB;AAgBA,QAAMK,MAAM,GAAGX,SAAS,CAACY,IAAV,CAAe,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACtC,WAAOC,MAAM,CAACD,CAAC,CAACE,SAAH,CAAN,GAAsBD,MAAM,CAACF,CAAC,CAACG,SAAH,CAAnC;AACD,GAFc,CAAf;AAIA,SAAOL,MAAP;AACD","sourcesContent":["import { request, gql } from \"graphql-request\";\nimport { GRAPHQL_URLS } from \"constants/variables\";\n\nimport { TransactionTypes } from \"constants/app\";\nimport { formatEther } from \"@ethersproject/units\";\n\nexport default async function fetchUTokenTransactions(chainId, address) {\n  const query = gql`\n    query ($first: Int, $account: Bytes) {\n      ${TransactionTypes.BORROW}: borrows(first: $first, where: { account: $account }) {\n        account\n        amount\n        fee\n        timestamp\n      }\n      ${TransactionTypes.REPAY}: repays(first: $first, where: { account: $account }) {\n        account\n        amount\n        timestamp\n      }\n    }\n  `;\n\n  const variables = {\n    first: 100,\n    account: address,\n  };\n\n  const resp = await request(GRAPHQL_URLS[chainId].utoken, query, variables);\n\n  const flattened = Object.keys(resp).reduce((acc, key) => {\n    const parsed = resp[key].map((item) => {\n      if (item.amount) {\n        item.amount = formatEther(item.amount);\n      }\n\n      return {\n        ...item,\n        address: item.account,\n        type: key,\n      };\n    });\n\n    return [...acc, ...parsed];\n  }, []);\n\n  const sorted = flattened.sort((a, b) => {\n    return Number(b.timestamp) - Number(a.timestamp);\n  });\n\n  return sorted;\n}\n"]},"metadata":{},"sourceType":"module"}