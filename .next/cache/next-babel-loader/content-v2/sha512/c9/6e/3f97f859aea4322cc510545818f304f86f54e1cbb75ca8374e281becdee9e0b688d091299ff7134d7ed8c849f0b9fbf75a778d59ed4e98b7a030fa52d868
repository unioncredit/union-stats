{"ast":null,"code":"import { formatUnits } from \"@ethersproject/units\";\nimport useGovernanceContract from \"hooks/contracts/useGovernanceContract\";\nimport useReadProvider from \"hooks/useReadProvider\";\nimport useSWR from \"swr\";\n\nconst getProposalThreshold = async (_, contract) => {\n  const res = await contract.proposalThreshold();\n  return Number(formatUnits(res, 18));\n};\n\nexport default function useProposalThreshold() {\n  const readProvider = useReadProvider();\n  const contract = useGovernanceContract(readProvider);\n  const shouldFetch = Boolean(contract);\n  return useSWR(shouldFetch ? [\"ProposalThreshold\", contract] : null, getProposalThreshold);\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/union-stats/hooks/governance/useProposalThreshold.js"],"names":["formatUnits","useGovernanceContract","useReadProvider","useSWR","getProposalThreshold","_","contract","res","proposalThreshold","Number","useProposalThreshold","readProvider","shouldFetch","Boolean"],"mappings":"AAAA,SAASA,WAAT,QAA4B,sBAA5B;AACA,OAAOC,qBAAP,MAAkC,uCAAlC;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,OAAOC,MAAP,MAAmB,KAAnB;;AAEA,MAAMC,oBAAoB,GAAG,OAAOC,CAAP,EAAUC,QAAV,KAAuB;AAClD,QAAMC,GAAG,GAAG,MAAMD,QAAQ,CAACE,iBAAT,EAAlB;AAEA,SAAOC,MAAM,CAACT,WAAW,CAACO,GAAD,EAAM,EAAN,CAAZ,CAAb;AACD,CAJD;;AAMA,eAAe,SAASG,oBAAT,GAAgC;AAC7C,QAAMC,YAAY,GAAGT,eAAe,EAApC;AACA,QAAMI,QAAQ,GAAGL,qBAAqB,CAACU,YAAD,CAAtC;AAEA,QAAMC,WAAW,GAAGC,OAAO,CAACP,QAAD,CAA3B;AAEA,SAAOH,MAAM,CACXS,WAAW,GAAG,CAAC,mBAAD,EAAsBN,QAAtB,CAAH,GAAqC,IADrC,EAEXF,oBAFW,CAAb;AAID","sourcesContent":["import { formatUnits } from \"@ethersproject/units\";\nimport useGovernanceContract from \"hooks/contracts/useGovernanceContract\";\nimport useReadProvider from \"hooks/useReadProvider\";\nimport useSWR from \"swr\";\n\nconst getProposalThreshold = async (_, contract) => {\n  const res = await contract.proposalThreshold();\n\n  return Number(formatUnits(res, 18));\n};\n\nexport default function useProposalThreshold() {\n  const readProvider = useReadProvider();\n  const contract = useGovernanceContract(readProvider);\n\n  const shouldFetch = Boolean(contract);\n\n  return useSWR(\n    shouldFetch ? [\"ProposalThreshold\", contract] : null,\n    getProposalThreshold\n  );\n}\n"]},"metadata":{},"sourceType":"module"}