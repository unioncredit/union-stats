{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nexport var makeTxWithGasEstimate = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(contract, func, params, fallbackLimit) {\n    var gasLimit, _contract$estimateGas, estimateGas;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return (_contract$estimateGas = contract.estimateGas)[func].apply(_contract$estimateGas, _toConsumableArray(params));\n\n          case 3:\n            estimateGas = _context.sent;\n            gasLimit = (parseFloat(estimateGas.toString()) * 1.1).toFixed(0);\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            gasLimit = fallbackLimit || 800000;\n\n          case 10:\n            return _context.abrupt(\"return\", contract[func].apply(contract, _toConsumableArray(params).concat([{\n              gasLimit: gasLimit\n            }])));\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 7]]);\n  }));\n\n  return function makeTxWithGasEstimate(_x, _x2, _x3, _x4) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/util/gasEstimation.ts"],"names":["makeTxWithGasEstimate","contract","func","params","fallbackLimit","estimateGas","gasLimit","parseFloat","toString","toFixed"],"mappings":";;;AAIA,OAAO,IAAMA,qBAAqB;AAAA,sEAAG,iBACnCC,QADmC,EAEnCC,IAFmC,EAGnCC,MAHmC,EAInCC,aAJmC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAQP,yBAAAH,QAAQ,CAACI,WAAT,EAAqBH,IAArB,kDAA8BC,MAA9B,EARO;;AAAA;AAQ3BE,YAAAA,WAR2B;AASjCC,YAAAA,QAAQ,GAAG,CAACC,UAAU,CAACF,WAAW,CAACG,QAAZ,EAAD,CAAV,GAAqC,GAAtC,EAA2CC,OAA3C,CAAmD,CAAnD,CAAX;AATiC;AAAA;;AAAA;AAAA;AAAA;AAWjCH,YAAAA,QAAQ,GAAGF,aAAa,IAAI,MAA5B;;AAXiC;AAAA,6CAc5BH,QAAQ,CAACC,IAAD,CAAR,OAAAD,QAAQ,qBAAUE,MAAV,UAAkB;AAAEG,cAAAA,QAAQ,EAARA;AAAF,aAAlB,GAdoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAArBN,qBAAqB;AAAA;AAAA;AAAA,GAA3B","sourcesContent":["import { BigNumberish } from \"@ethersproject/bignumber\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { TransactionResponse } from \"@ethersproject/providers\";\n\nexport const makeTxWithGasEstimate = async (\n  contract: Contract,\n  func: string,\n  params: Array<string | number | BigNumberish>,\n  fallbackLimit?: number\n): Promise<TransactionResponse> => {\n  let gasLimit: BigNumberish;\n  try {\n    const estimateGas = await contract.estimateGas[func](...params);\n    gasLimit = (parseFloat(estimateGas.toString()) * 1.1).toFixed(0);\n  } catch (err) {\n    gasLimit = fallbackLimit || 800000;\n  }\n\n  return contract[func](...params, { gasLimit });\n};\n"]},"metadata":{},"sourceType":"module"}