{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport useSWR from \"swr\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { JsonRpcProvider } from \"@ethersproject/providers\";\nimport useChainId from \"hooks/useChainId\";\nimport { RPC_URLS } from \"lib/connectors\";\n\nfunction fetchProvider(_, chainId, library) {\n  if (library && chainId && library.network.chainId === chainId) {\n    return library.getSigner().provider;\n  }\n\n  return new JsonRpcProvider(RPC_URLS[chainId]);\n}\n\nexport default function useReadProvider() {\n  _s();\n\n  var _useWeb3React = useWeb3React(),\n      library = _useWeb3React.library;\n\n  var chainId = useChainId();\n  var shouldFetch = !!chainId;\n  var resp = useSWR(shouldFetch ? [\"ReadProvider\", chainId, library] : null, fetchProvider, {\n    revalidateIfStale: false,\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false\n  });\n  return resp.data;\n}\n\n_s(useReadProvider, \"TvpG8Paa7i+dSY1A5MQFOgsC20I=\", false, function () {\n  return [useWeb3React, useChainId, useSWR];\n});","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/useReadProvider.js"],"names":["useSWR","useWeb3React","JsonRpcProvider","useChainId","RPC_URLS","fetchProvider","_","chainId","library","network","getSigner","provider","useReadProvider","shouldFetch","resp","revalidateIfStale","revalidateOnFocus","revalidateOnReconnect","data"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,KAAnB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAASC,QAAT,QAAyB,gBAAzB;;AAEA,SAASC,aAAT,CAAuBC,CAAvB,EAA0BC,OAA1B,EAAmCC,OAAnC,EAA4C;AAC1C,MAAIA,OAAO,IAAID,OAAX,IAAsBC,OAAO,CAACC,OAAR,CAAgBF,OAAhB,KAA4BA,OAAtD,EAA+D;AAC7D,WAAOC,OAAO,CAACE,SAAR,GAAoBC,QAA3B;AACD;;AAED,SAAO,IAAIT,eAAJ,CAAoBE,QAAQ,CAACG,OAAD,CAA5B,CAAP;AACD;;AAED,eAAe,SAASK,eAAT,GAA2B;AAAA;;AAAA,sBACpBX,YAAY,EADQ;AAAA,MAChCO,OADgC,iBAChCA,OADgC;;AAExC,MAAMD,OAAO,GAAGJ,UAAU,EAA1B;AAEA,MAAMU,WAAW,GAAG,CAAC,CAACN,OAAtB;AAEA,MAAMO,IAAI,GAAGd,MAAM,CACjBa,WAAW,GAAG,CAAC,cAAD,EAAiBN,OAAjB,EAA0BC,OAA1B,CAAH,GAAwC,IADlC,EAEjBH,aAFiB,EAGjB;AACEU,IAAAA,iBAAiB,EAAE,KADrB;AAEEC,IAAAA,iBAAiB,EAAE,KAFrB;AAGEC,IAAAA,qBAAqB,EAAE;AAHzB,GAHiB,CAAnB;AAUA,SAAOH,IAAI,CAACI,IAAZ;AACD;;GAjBuBN,e;UACFX,Y,EACJE,U,EAIHH,M","sourcesContent":["import useSWR from \"swr\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { JsonRpcProvider } from \"@ethersproject/providers\";\nimport useChainId from \"hooks/useChainId\";\nimport { RPC_URLS } from \"lib/connectors\";\n\nfunction fetchProvider(_, chainId, library) {\n  if (library && chainId && library.network.chainId === chainId) {\n    return library.getSigner().provider;\n  }\n\n  return new JsonRpcProvider(RPC_URLS[chainId]);\n}\n\nexport default function useReadProvider() {\n  const { library } = useWeb3React();\n  const chainId = useChainId();\n\n  const shouldFetch = !!chainId;\n\n  const resp = useSWR(\n    shouldFetch ? [\"ReadProvider\", chainId, library] : null,\n    fetchProvider,\n    {\n      revalidateIfStale: false,\n      revalidateOnFocus: false,\n      revalidateOnReconnect: false,\n    }\n  );\n\n  return resp.data;\n}\n"]},"metadata":{},"sourceType":"module"}