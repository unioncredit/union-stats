{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { Contract } from \"@ethersproject/contracts\";\nimport { parseUnits } from \"@ethersproject/units\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport useERC20Contract from \"hooks/contracts/useERC20Contract\";\nimport useCurrentToken from \"hooks/useCurrentToken\";\nimport { useCallback } from \"react\";\nimport USER_MANAGER_ABI from \"constants/abis/userManager.json\";\nimport useMarketRegistryContract from \"../contracts/useMarketRegistryContract\";\nimport { makeTxWithGasEstimate } from \"../../util/gasEstimation\";\nimport usePermits from \"hooks/usePermits\";\nimport { APPROVE_DAI_DEPOSIT_SIGNATURE_KEY } from \"constants/app\";\nexport default function useStakeDeposit() {\n  _s();\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId,\n      library = _useWeb3React.library;\n\n  var marketRegistryContract = useMarketRegistryContract();\n  var DAI = useCurrentToken();\n  var DAIContract = useERC20Contract(DAI);\n\n  var _usePermits = usePermits(),\n      getPermit = _usePermits.getPermit;\n\n  var permit = getPermit(APPROVE_DAI_DEPOSIT_SIGNATURE_KEY);\n  return useCallback( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(amount) {\n      var signer, res, userManagerAddress, userManagerContract, stakeAmount, allowance;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              signer = library.getSigner();\n              _context.next = 3;\n              return marketRegistryContract.tokens(DAI);\n\n            case 3:\n              res = _context.sent;\n              userManagerAddress = res.userManager;\n              userManagerContract = new Contract(userManagerAddress, USER_MANAGER_ABI, signer);\n              stakeAmount = parseUnits(String(amount), 18); // if we have a valid permit use that to stake\n\n              if (!permit) {\n                _context.next = 13;\n                break;\n              }\n\n              if (!(chainId == 1)) {\n                _context.next = 12;\n                break;\n              }\n\n              return _context.abrupt(\"return\", makeTxWithGasEstimate(userManagerContract, \"stakeWithPermit\", [stakeAmount.toString(), permit.nonce, permit.expiry, permit.v, permit.r, permit.s]));\n\n            case 12:\n              return _context.abrupt(\"return\", makeTxWithGasEstimate(userManagerContract, \"stakeWithERC20Permit\", [stakeAmount.toString(), permit.deadline, permit.v, permit.r, permit.s]));\n\n            case 13:\n              _context.next = 15;\n              return DAIContract.allowance(account, userManagerAddress);\n\n            case 15:\n              allowance = _context.sent;\n\n              if (!allowance.lt(stakeAmount)) {\n                _context.next = 18;\n                break;\n              }\n\n              throw new Error(\"Allowance not enough\");\n\n            case 18:\n              return _context.abrupt(\"return\", makeTxWithGasEstimate(userManagerContract, \"stake\", [stakeAmount]));\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [account, chainId, DAI, DAIContract, marketRegistryContract, permit]);\n}\n\n_s(useStakeDeposit, \"TvZfTg9gwvT4+9R0MXJlO9DNtek=\", false, function () {\n  return [useWeb3React, useMarketRegistryContract, useCurrentToken, useERC20Contract, usePermits];\n});","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/payables/useStakeDeposit.ts"],"names":["Contract","parseUnits","useWeb3React","useERC20Contract","useCurrentToken","useCallback","USER_MANAGER_ABI","useMarketRegistryContract","makeTxWithGasEstimate","usePermits","APPROVE_DAI_DEPOSIT_SIGNATURE_KEY","useStakeDeposit","account","chainId","library","marketRegistryContract","DAI","DAIContract","getPermit","permit","amount","signer","getSigner","tokens","res","userManagerAddress","userManager","userManagerContract","stakeAmount","String","toString","nonce","expiry","v","r","s","deadline","allowance","lt","Error"],"mappings":"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","sourcesContent":["import { Contract } from \"@ethersproject/contracts\";\nimport type { TransactionResponse } from \"@ethersproject/providers\";\nimport { parseUnits } from \"@ethersproject/units\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport useERC20Contract from \"hooks/contracts/useERC20Contract\";\nimport useCurrentToken from \"hooks/useCurrentToken\";\nimport { useCallback } from \"react\";\nimport USER_MANAGER_ABI from \"constants/abis/userManager.json\";\nimport useMarketRegistryContract from \"../contracts/useMarketRegistryContract\";\nimport { makeTxWithGasEstimate } from \"../../util/gasEstimation\";\nimport usePermits from \"hooks/usePermits\";\nimport { APPROVE_DAI_DEPOSIT_SIGNATURE_KEY } from \"constants/app\";\n\nexport default function useStakeDeposit() {\n  const { account, chainId, library } = useWeb3React();\n  const marketRegistryContract = useMarketRegistryContract();\n  const DAI = useCurrentToken();\n  const DAIContract = useERC20Contract(DAI);\n  const { getPermit } = usePermits();\n\n  const permit = getPermit(APPROVE_DAI_DEPOSIT_SIGNATURE_KEY);\n\n  return useCallback(\n    async (amount: number | string): Promise<TransactionResponse> => {\n      const signer = library.getSigner();\n      const res = await marketRegistryContract.tokens(DAI);\n      const userManagerAddress = res.userManager;\n      const userManagerContract = new Contract(\n        userManagerAddress,\n        USER_MANAGER_ABI,\n        signer\n      );\n      const stakeAmount = parseUnits(String(amount), 18);\n\n      // if we have a valid permit use that to stake\n      if (permit) {\n        if (chainId == 1) {\n          return makeTxWithGasEstimate(userManagerContract, \"stakeWithPermit\", [\n            stakeAmount.toString(),\n            permit.nonce,\n            permit.expiry,\n            permit.v,\n            permit.r,\n            permit.s,\n          ]);\n        } else {\n          return makeTxWithGasEstimate(\n            userManagerContract,\n            \"stakeWithERC20Permit\",\n            [\n              stakeAmount.toString(),\n              permit.deadline,\n              permit.v,\n              permit.r,\n              permit.s,\n            ]\n          );\n        }\n      }\n\n      const allowance = await DAIContract.allowance(\n        account,\n        userManagerAddress\n      );\n\n      if (allowance.lt(stakeAmount)) {\n        throw new Error(\"Allowance not enough\");\n      }\n\n      return makeTxWithGasEstimate(userManagerContract, \"stake\", [stakeAmount]);\n    },\n    [account, chainId, DAI, DAIContract, marketRegistryContract, permit]\n  );\n}\n"]},"metadata":{},"sourceType":"module"}