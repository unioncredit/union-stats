{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport useSWR from \"swr\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport useUnionContract from \"hooks/contracts/useUnionContract\";\nimport useReadProvider from \"hooks/useReadProvider\";\n\nvar getGovernanceTokenSupply = function getGovernanceTokenSupply(contract) {\n  return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var totalSupply;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return contract.totalSupply();\n\n          case 2:\n            totalSupply = _context.sent;\n            return _context.abrupt(\"return\", parseFloat(formatUnits(totalSupply, 18)));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n};\n\nexport default function useGovernanceTokenSupply() {\n  _s();\n\n  var readProvider = useReadProvider();\n  var contract = useUnionContract(readProvider);\n  var shouldFetch = Boolean(contract);\n  return useSWR(shouldFetch ? \"GovernanceTokenSupply\" : null, getGovernanceTokenSupply(contract), {\n    shouldRetryOnError: false,\n    refreshWhenHidden: false,\n    refreshWhenOffline: false,\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false\n  });\n}\n\n_s(useGovernanceTokenSupply, \"uERNQw126PhSYB4SebNRl7C8kQI=\", false, function () {\n  return [useReadProvider, useUnionContract, useSWR];\n});","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/governance/useGovernanceTokenSupply.js"],"names":["useSWR","formatUnits","useUnionContract","useReadProvider","getGovernanceTokenSupply","contract","totalSupply","parseFloat","useGovernanceTokenSupply","readProvider","shouldFetch","Boolean","shouldRetryOnError","refreshWhenHidden","refreshWhenOffline","revalidateOnFocus","revalidateOnReconnect"],"mappings":";;;;;AAAA,OAAOA,MAAP,MAAmB,KAAnB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,OAAOC,gBAAP,MAA6B,kCAA7B;AACA,OAAOC,eAAP,MAA4B,uBAA5B;;AAEA,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACC,QAAD;AAAA,+EAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACnBA,QAAQ,CAACC,WAAT,EADmB;;AAAA;AACvCA,YAAAA,WADuC;AAAA,6CAEtCC,UAAU,CAACN,WAAW,CAACK,WAAD,EAAc,EAAd,CAAZ,CAF4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAd;AAAA,CAAjC;;AAKA,eAAe,SAASE,wBAAT,GAAoC;AAAA;;AACjD,MAAMC,YAAY,GAAGN,eAAe,EAApC;AACA,MAAME,QAAQ,GAAGH,gBAAgB,CAACO,YAAD,CAAjC;AAEA,MAAMC,WAAW,GAAGC,OAAO,CAACN,QAAD,CAA3B;AAEA,SAAOL,MAAM,CACXU,WAAW,GAAG,uBAAH,GAA6B,IAD7B,EAEXN,wBAAwB,CAACC,QAAD,CAFb,EAGX;AACEO,IAAAA,kBAAkB,EAAE,KADtB;AAEEC,IAAAA,iBAAiB,EAAE,KAFrB;AAGEC,IAAAA,kBAAkB,EAAE,KAHtB;AAIEC,IAAAA,iBAAiB,EAAE,KAJrB;AAKEC,IAAAA,qBAAqB,EAAE;AALzB,GAHW,CAAb;AAWD;;GAjBuBR,wB;UACDL,e,EACJD,gB,EAIVF,M","sourcesContent":["import useSWR from \"swr\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport useUnionContract from \"hooks/contracts/useUnionContract\";\nimport useReadProvider from \"hooks/useReadProvider\";\n\nconst getGovernanceTokenSupply = (contract) => async () => {\n  const totalSupply = await contract.totalSupply();\n  return parseFloat(formatUnits(totalSupply, 18));\n};\n\nexport default function useGovernanceTokenSupply() {\n  const readProvider = useReadProvider();\n  const contract = useUnionContract(readProvider);\n\n  const shouldFetch = Boolean(contract);\n\n  return useSWR(\n    shouldFetch ? \"GovernanceTokenSupply\" : null,\n    getGovernanceTokenSupply(contract),\n    {\n      shouldRetryOnError: false,\n      refreshWhenHidden: false,\n      refreshWhenOffline: false,\n      revalidateOnFocus: false,\n      revalidateOnReconnect: false,\n    }\n  );\n}\n"]},"metadata":{},"sourceType":"module"}