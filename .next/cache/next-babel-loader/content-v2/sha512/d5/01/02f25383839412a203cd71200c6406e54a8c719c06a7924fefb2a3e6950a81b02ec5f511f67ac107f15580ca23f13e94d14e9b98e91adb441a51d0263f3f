{"ast":null,"code":"import { useWeb3React } from \"@web3-react/core\";\nimport useCurrentToken from \"hooks/useCurrentToken\";\nimport { useCallback } from \"react\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport USER_MANAGER_ABI from \"constants/abis/userManager.json\";\nimport useMarketRegistryContract from \"../contracts/useMarketRegistryContract\";\nimport { makeTxWithGasEstimate } from \"../../util/gasEstimation\";\nimport useUnionContract from \"../contracts/useUnionContract\";\nimport usePermits from \"hooks/usePermits\";\nimport { APPROVE_UNION_REGISTER_SIGNATURE_KEY } from \"constants/app\";\nexport default function useRegisterMember() {\n  const {\n    account,\n    library\n  } = useWeb3React();\n  const tokenAddress = useCurrentToken();\n  const marketRegistryContract = useMarketRegistryContract();\n  const unionContract = useUnionContract();\n  const {\n    getPermit\n  } = usePermits();\n  const permit = getPermit(APPROVE_UNION_REGISTER_SIGNATURE_KEY);\n  return useCallback(async () => {\n    const signer = library.getSigner();\n    const {\n      userManager: userManagerAddress\n    } = await marketRegistryContract.tokens(tokenAddress);\n    const userManagerContract = new Contract(userManagerAddress, USER_MANAGER_ABI, signer);\n    const memberFee = (await userManagerContract.newMemberFee()).toString();\n\n    if (permit) {\n      return makeTxWithGasEstimate(userManagerContract, \"registerMemberWithPermit\", [account, memberFee, permit.deadline, permit.v, permit.r, permit.s]);\n    }\n\n    const allowance = await unionContract.allowance(account, userManagerAddress);\n\n    if (allowance.lt(memberFee)) {\n      throw new Error(\"Allowance not enough\");\n    }\n\n    return await makeTxWithGasEstimate(userManagerContract, \"registerMember\", [account]);\n  }, [account, library, tokenAddress, marketRegistryContract, permit]);\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/payables/useRegisterMember.ts"],"names":["useWeb3React","useCurrentToken","useCallback","Contract","USER_MANAGER_ABI","useMarketRegistryContract","makeTxWithGasEstimate","useUnionContract","usePermits","APPROVE_UNION_REGISTER_SIGNATURE_KEY","useRegisterMember","account","library","tokenAddress","marketRegistryContract","unionContract","getPermit","permit","signer","getSigner","userManager","userManagerAddress","tokens","userManagerContract","memberFee","newMemberFee","toString","deadline","v","r","s","allowance","lt","Error"],"mappings":"AACA,SAASA,YAAT,QAA6B,kBAA7B;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,OAAOC,yBAAP,MAAsC,wCAAtC;AACA,SAASC,qBAAT,QAAsC,0BAAtC;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAASC,oCAAT,QAAqD,eAArD;AAEA,eAAe,SAASC,iBAAT,GAA6B;AAC1C,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBZ,YAAY,EAAzC;AACA,QAAMa,YAAY,GAAGZ,eAAe,EAApC;AACA,QAAMa,sBAAsB,GAAGT,yBAAyB,EAAxD;AACA,QAAMU,aAAuB,GAAGR,gBAAgB,EAAhD;AACA,QAAM;AAAES,IAAAA;AAAF,MAAgBR,UAAU,EAAhC;AAEA,QAAMS,MAAM,GAAGD,SAAS,CAACP,oCAAD,CAAxB;AAEA,SAAOP,WAAW,CAAC,YAA0C;AAC3D,UAAMgB,MAAM,GAAGN,OAAO,CAACO,SAAR,EAAf;AACA,UAAM;AAAEC,MAAAA,WAAW,EAAEC;AAAf,QACJ,MAAMP,sBAAsB,CAACQ,MAAvB,CAA8BT,YAA9B,CADR;AAEA,UAAMU,mBAAmB,GAAG,IAAIpB,QAAJ,CAC1BkB,kBAD0B,EAE1BjB,gBAF0B,EAG1Bc,MAH0B,CAA5B;AAMA,UAAMM,SAAS,GAAG,CAAC,MAAMD,mBAAmB,CAACE,YAApB,EAAP,EAA2CC,QAA3C,EAAlB;;AAEA,QAAIT,MAAJ,EAAY;AACV,aAAOX,qBAAqB,CAC1BiB,mBAD0B,EAE1B,0BAF0B,EAG1B,CAACZ,OAAD,EAAUa,SAAV,EAAqBP,MAAM,CAACU,QAA5B,EAAsCV,MAAM,CAACW,CAA7C,EAAgDX,MAAM,CAACY,CAAvD,EAA0DZ,MAAM,CAACa,CAAjE,CAH0B,CAA5B;AAKD;;AAED,UAAMC,SAAS,GAAG,MAAMhB,aAAa,CAACgB,SAAd,CACtBpB,OADsB,EAEtBU,kBAFsB,CAAxB;;AAKA,QAAIU,SAAS,CAACC,EAAV,CAAaR,SAAb,CAAJ,EAA6B;AAC3B,YAAM,IAAIS,KAAJ,CAAU,sBAAV,CAAN;AACD;;AAED,WAAO,MAAM3B,qBAAqB,CAACiB,mBAAD,EAAsB,gBAAtB,EAAwC,CACxEZ,OADwE,CAAxC,CAAlC;AAGD,GAhCiB,EAgCf,CAACA,OAAD,EAAUC,OAAV,EAAmBC,YAAnB,EAAiCC,sBAAjC,EAAyDG,MAAzD,CAhCe,CAAlB;AAiCD","sourcesContent":["import type { TransactionResponse } from \"@ethersproject/providers\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport useCurrentToken from \"hooks/useCurrentToken\";\nimport { useCallback } from \"react\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport USER_MANAGER_ABI from \"constants/abis/userManager.json\";\nimport useMarketRegistryContract from \"../contracts/useMarketRegistryContract\";\nimport { makeTxWithGasEstimate } from \"../../util/gasEstimation\";\nimport useUnionContract from \"../contracts/useUnionContract\";\nimport usePermits from \"hooks/usePermits\";\nimport { APPROVE_UNION_REGISTER_SIGNATURE_KEY } from \"constants/app\";\n\nexport default function useRegisterMember() {\n  const { account, library } = useWeb3React();\n  const tokenAddress = useCurrentToken();\n  const marketRegistryContract = useMarketRegistryContract();\n  const unionContract: Contract = useUnionContract();\n  const { getPermit } = usePermits();\n\n  const permit = getPermit(APPROVE_UNION_REGISTER_SIGNATURE_KEY);\n\n  return useCallback(async (): Promise<TransactionResponse> => {\n    const signer = library.getSigner();\n    const { userManager: userManagerAddress } =\n      await marketRegistryContract.tokens(tokenAddress);\n    const userManagerContract = new Contract(\n      userManagerAddress,\n      USER_MANAGER_ABI,\n      signer\n    );\n\n    const memberFee = (await userManagerContract.newMemberFee()).toString();\n\n    if (permit) {\n      return makeTxWithGasEstimate(\n        userManagerContract,\n        \"registerMemberWithPermit\",\n        [account, memberFee, permit.deadline, permit.v, permit.r, permit.s]\n      );\n    }\n\n    const allowance = await unionContract.allowance(\n      account,\n      userManagerAddress\n    );\n\n    if (allowance.lt(memberFee)) {\n      throw new Error(\"Allowance not enough\");\n    }\n\n    return await makeTxWithGasEstimate(userManagerContract, \"registerMember\", [\n      account,\n    ]);\n  }, [account, library, tokenAddress, marketRegistryContract, permit]);\n}\n"]},"metadata":{},"sourceType":"module"}