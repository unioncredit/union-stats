{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    {\\n      proposals(first: 999) {\\n        id\\n        pid\\n        proposer\\n        description\\n        targets\\n        signatures\\n        calldatas\\n      }\\n    }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { request, gql } from \"graphql-request\";\nimport { GRAPHQL_URLS } from \"constants/variables\";\nexport default function fetchGovernanceProposals(_x) {\n  return _fetchGovernanceProposals.apply(this, arguments);\n}\n\nfunction _fetchGovernanceProposals() {\n  _fetchGovernanceProposals = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(chainId) {\n    var query, logs, formattedEventData;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            query = gql(_templateObject());\n            _context.next = 3;\n            return request(GRAPHQL_URLS[chainId].gov, query);\n\n          case 3:\n            logs = _context.sent;\n            // reverse events to get them from newest to oldest\n            formattedEventData = logs.proposals.map(function (log) {\n              var hashId = log.id.split(\"-\");\n              var id = String(Number(hashId[1]) + 1);\n              var hash = hashId[0];\n              return _objectSpread(_objectSpread({}, log), {}, {\n                id: id,\n                hash: hash,\n                description: log.description\n              });\n            }).reverse();\n            return _context.abrupt(\"return\", formattedEventData);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchGovernanceProposals.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/fetchers/fetchGovernanceProposals.js"],"names":["request","gql","GRAPHQL_URLS","fetchGovernanceProposals","chainId","query","gov","logs","formattedEventData","proposals","map","log","hashId","id","split","String","Number","hash","description","reverse"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,SAASA,OAAT,EAAkBC,GAAlB,QAA6B,iBAA7B;AACA,SAASC,YAAT,QAA6B,qBAA7B;AAEA,wBAA8BC,wBAA9B;AAAA;AAAA;;;uFAAe,iBAAwCC,OAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,YAAAA,KADO,GACCJ,GADD;AAAA;AAAA,mBAeMD,OAAO,CAACE,YAAY,CAACE,OAAD,CAAZ,CAAsBE,GAAvB,EAA4BD,KAA5B,CAfb;;AAAA;AAePE,YAAAA,IAfO;AAiBb;AACMC,YAAAA,kBAlBO,GAkBcD,IAAI,CAACE,SAAL,CACxBC,GADwB,CACpB,UAACC,GAAD,EAAS;AACZ,kBAAMC,MAAM,GAAGD,GAAG,CAACE,EAAJ,CAAOC,KAAP,CAAa,GAAb,CAAf;AACA,kBAAMD,EAAE,GAAGE,MAAM,CAACC,MAAM,CAACJ,MAAM,CAAC,CAAD,CAAP,CAAN,GAAoB,CAArB,CAAjB;AACA,kBAAMK,IAAI,GAAGL,MAAM,CAAC,CAAD,CAAnB;AAEA,qDACKD,GADL;AAEEE,gBAAAA,EAAE,EAAFA,EAFF;AAGEI,gBAAAA,IAAI,EAAJA,IAHF;AAIEC,gBAAAA,WAAW,EAAEP,GAAG,CAACO;AAJnB;AAMD,aAZwB,EAaxBC,OAbwB,EAlBd;AAAA,6CAiCNX,kBAjCM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { request, gql } from \"graphql-request\";\nimport { GRAPHQL_URLS } from \"constants/variables\";\n\nexport default async function fetchGovernanceProposals(chainId) {\n  const query = gql`\n    {\n      proposals(first: 999) {\n        id\n        pid\n        proposer\n        description\n        targets\n        signatures\n        calldatas\n      }\n    }\n  `;\n\n  const logs = await request(GRAPHQL_URLS[chainId].gov, query);\n\n  // reverse events to get them from newest to oldest\n  const formattedEventData = logs.proposals\n    .map((log) => {\n      const hashId = log.id.split(\"-\");\n      const id = String(Number(hashId[1]) + 1);\n      const hash = hashId[0];\n\n      return {\n        ...log,\n        id,\n        hash,\n        description: log.description,\n      };\n    })\n    .reverse();\n\n  return formattedEventData;\n}\n"]},"metadata":{},"sourceType":"module"}