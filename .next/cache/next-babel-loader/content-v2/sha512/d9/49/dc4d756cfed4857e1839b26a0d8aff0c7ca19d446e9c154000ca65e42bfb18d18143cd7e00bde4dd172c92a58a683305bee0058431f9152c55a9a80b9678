{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useWeb3React } from \"@web3-react/core\";\nimport useCurrentToken from \"hooks/useCurrentToken\";\nimport { useCallback } from \"react\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport USER_MANAGER_ABI from \"constants/abis/userManager.json\";\nimport useMarketRegistryContract from \"../contracts/useMarketRegistryContract\";\nimport { makeTxWithGasEstimate } from \"../../util/gasEstimation\";\nimport useUnionContract from \"../contracts/useUnionContract\";\nimport usePermits from \"hooks/usePermits\";\nimport { APPROVE_UNION_REGISTER_SIGNATURE_KEY } from \"constants/app\";\nexport default function useRegisterMember() {\n  _s();\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      library = _useWeb3React.library;\n\n  var tokenAddress = useCurrentToken();\n  var marketRegistryContract = useMarketRegistryContract();\n  var unionContract = useUnionContract();\n\n  var _usePermits = usePermits(),\n      getPermit = _usePermits.getPermit;\n\n  var permit = getPermit(APPROVE_UNION_REGISTER_SIGNATURE_KEY);\n  return useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var signer, _yield$marketRegistry, userManagerAddress, userManagerContract, memberFee, allowance;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            signer = library.getSigner();\n            _context.next = 3;\n            return marketRegistryContract.tokens(tokenAddress);\n\n          case 3:\n            _yield$marketRegistry = _context.sent;\n            userManagerAddress = _yield$marketRegistry.userManager;\n            userManagerContract = new Contract(userManagerAddress, USER_MANAGER_ABI, signer);\n            _context.next = 8;\n            return userManagerContract.newMemberFee();\n\n          case 8:\n            memberFee = _context.sent.toString();\n\n            if (!permit) {\n              _context.next = 11;\n              break;\n            }\n\n            return _context.abrupt(\"return\", makeTxWithGasEstimate(userManagerContract, \"registerMemberWithPermit\", [account, memberFee, permit.deadline, permit.v, permit.r, permit.s]));\n\n          case 11:\n            _context.next = 13;\n            return unionContract.allowance(account, userManagerAddress);\n\n          case 13:\n            allowance = _context.sent;\n\n            if (!allowance.lt(memberFee)) {\n              _context.next = 16;\n              break;\n            }\n\n            throw new Error(\"Allowance not enough\");\n\n          case 16:\n            _context.next = 18;\n            return makeTxWithGasEstimate(userManagerContract, \"registerMember\", [account]);\n\n          case 18:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), [account, library, tokenAddress, marketRegistryContract, permit]);\n}\n\n_s(useRegisterMember, \"myAmKG6UBl0AcTnD3RNpevdEX0M=\", false, function () {\n  return [useWeb3React, useCurrentToken, useMarketRegistryContract, useUnionContract, usePermits];\n});","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/payables/useRegisterMember.ts"],"names":["useWeb3React","useCurrentToken","useCallback","Contract","USER_MANAGER_ABI","useMarketRegistryContract","makeTxWithGasEstimate","useUnionContract","usePermits","APPROVE_UNION_REGISTER_SIGNATURE_KEY","useRegisterMember","account","library","tokenAddress","marketRegistryContract","unionContract","getPermit","permit","signer","getSigner","tokens","userManagerAddress","userManager","userManagerContract","newMemberFee","memberFee","toString","deadline","v","r","s","allowance","lt","Error"],"mappings":";;;;;AACA,SAASA,YAAT,QAA6B,kBAA7B;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,OAAOC,yBAAP,MAAsC,wCAAtC;AACA,SAASC,qBAAT,QAAsC,0BAAtC;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAASC,oCAAT,QAAqD,eAArD;AAEA,eAAe,SAASC,iBAAT,GAA6B;AAAA;;AAAA,sBACbV,YAAY,EADC;AAAA,MAClCW,OADkC,iBAClCA,OADkC;AAAA,MACzBC,OADyB,iBACzBA,OADyB;;AAE1C,MAAMC,YAAY,GAAGZ,eAAe,EAApC;AACA,MAAMa,sBAAsB,GAAGT,yBAAyB,EAAxD;AACA,MAAMU,aAAuB,GAAGR,gBAAgB,EAAhD;;AAJ0C,oBAKpBC,UAAU,EALU;AAAA,MAKlCQ,SALkC,eAKlCA,SALkC;;AAO1C,MAAMC,MAAM,GAAGD,SAAS,CAACP,oCAAD,CAAxB;AAEA,SAAOP,WAAW,wEAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACXgB,YAAAA,MADW,GACFN,OAAO,CAACO,SAAR,EADE;AAAA;AAAA,mBAGTL,sBAAsB,CAACM,MAAvB,CAA8BP,YAA9B,CAHS;;AAAA;AAAA;AAEIQ,YAAAA,kBAFJ,yBAETC,WAFS;AAIXC,YAAAA,mBAJW,GAIW,IAAIpB,QAAJ,CAC1BkB,kBAD0B,EAE1BjB,gBAF0B,EAG1Bc,MAH0B,CAJX;AAAA;AAAA,mBAUQK,mBAAmB,CAACC,YAApB,EAVR;;AAAA;AAUXC,YAAAA,SAVW,iBAU4CC,QAV5C;;AAAA,iBAYbT,MAZa;AAAA;AAAA;AAAA;;AAAA,6CAaRX,qBAAqB,CAC1BiB,mBAD0B,EAE1B,0BAF0B,EAG1B,CAACZ,OAAD,EAAUc,SAAV,EAAqBR,MAAM,CAACU,QAA5B,EAAsCV,MAAM,CAACW,CAA7C,EAAgDX,MAAM,CAACY,CAAvD,EAA0DZ,MAAM,CAACa,CAAjE,CAH0B,CAbb;;AAAA;AAAA;AAAA,mBAoBOf,aAAa,CAACgB,SAAd,CACtBpB,OADsB,EAEtBU,kBAFsB,CApBP;;AAAA;AAoBXU,YAAAA,SApBW;;AAAA,iBAyBbA,SAAS,CAACC,EAAV,CAAaP,SAAb,CAzBa;AAAA;AAAA;AAAA;;AAAA,kBA0BT,IAAIQ,KAAJ,CAAU,sBAAV,CA1BS;;AAAA;AAAA;AAAA,mBA6BJ3B,qBAAqB,CAACiB,mBAAD,EAAsB,gBAAtB,EAAwC,CACxEZ,OADwE,CAAxC,CA7BjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,IAgCf,CAACA,OAAD,EAAUC,OAAV,EAAmBC,YAAnB,EAAiCC,sBAAjC,EAAyDG,MAAzD,CAhCe,CAAlB;AAiCD;;GA1CuBP,iB;UACOV,Y,EACRC,e,EACUI,yB,EACCE,gB,EACVC,U","sourcesContent":["import type { TransactionResponse } from \"@ethersproject/providers\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport useCurrentToken from \"hooks/useCurrentToken\";\nimport { useCallback } from \"react\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport USER_MANAGER_ABI from \"constants/abis/userManager.json\";\nimport useMarketRegistryContract from \"../contracts/useMarketRegistryContract\";\nimport { makeTxWithGasEstimate } from \"../../util/gasEstimation\";\nimport useUnionContract from \"../contracts/useUnionContract\";\nimport usePermits from \"hooks/usePermits\";\nimport { APPROVE_UNION_REGISTER_SIGNATURE_KEY } from \"constants/app\";\n\nexport default function useRegisterMember() {\n  const { account, library } = useWeb3React();\n  const tokenAddress = useCurrentToken();\n  const marketRegistryContract = useMarketRegistryContract();\n  const unionContract: Contract = useUnionContract();\n  const { getPermit } = usePermits();\n\n  const permit = getPermit(APPROVE_UNION_REGISTER_SIGNATURE_KEY);\n\n  return useCallback(async (): Promise<TransactionResponse> => {\n    const signer = library.getSigner();\n    const { userManager: userManagerAddress } =\n      await marketRegistryContract.tokens(tokenAddress);\n    const userManagerContract = new Contract(\n      userManagerAddress,\n      USER_MANAGER_ABI,\n      signer\n    );\n\n    const memberFee = (await userManagerContract.newMemberFee()).toString();\n\n    if (permit) {\n      return makeTxWithGasEstimate(\n        userManagerContract,\n        \"registerMemberWithPermit\",\n        [account, memberFee, permit.deadline, permit.v, permit.r, permit.s]\n      );\n    }\n\n    const allowance = await unionContract.allowance(\n      account,\n      userManagerAddress\n    );\n\n    if (allowance.lt(memberFee)) {\n      throw new Error(\"Allowance not enough\");\n    }\n\n    return await makeTxWithGasEstimate(userManagerContract, \"registerMember\", [\n      account,\n    ]);\n  }, [account, library, tokenAddress, marketRegistryContract, permit]);\n}\n"]},"metadata":{},"sourceType":"module"}