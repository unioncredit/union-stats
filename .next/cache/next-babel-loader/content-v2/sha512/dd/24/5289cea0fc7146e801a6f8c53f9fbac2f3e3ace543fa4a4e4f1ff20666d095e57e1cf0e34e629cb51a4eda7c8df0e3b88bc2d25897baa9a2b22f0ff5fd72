{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useWeb3React } from \"@web3-react/core\";\nimport { injected, network } from \"lib/connectors\";\nimport { useEffect, useState } from \"react\";\nexport default function useEagerConnect() {\n  _s();\n\n  var _useWeb3React = useWeb3React(),\n      activate = _useWeb3React.activate,\n      active = _useWeb3React.active;\n\n  var _useState = useState(false),\n      tried = _useState[0],\n      setTried = _useState[1];\n\n  useEffect(function () {\n    function handleEagerConnect() {\n      return _handleEagerConnect.apply(this, arguments);\n    }\n\n    function _handleEagerConnect() {\n      _handleEagerConnect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _window, _window$cookieStore;\n\n        var eagerConnect, isAuthorized;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!true) {\n                  _context.next = 3;\n                  break;\n                }\n\n                _context.next = 3;\n                return import(\"cookie-store\");\n\n              case 3:\n                _context.next = 5;\n                return (_window = window) === null || _window === void 0 ? void 0 : (_window$cookieStore = _window.cookieStore) === null || _window$cookieStore === void 0 ? void 0 : _window$cookieStore.get(\"eager_connect\");\n\n              case 5:\n                eagerConnect = _context.sent;\n                _context.next = 8;\n                return injected.isAuthorized();\n\n              case 8:\n                isAuthorized = _context.sent;\n\n                if (isAuthorized && Boolean(eagerConnect)) {\n                  activate(injected, undefined, true)[\"catch\"](function () {\n                    setTried(true);\n                  });\n                } else {\n                  activate(network, undefined, true)[\"catch\"](function () {\n                    setTried(true);\n                  });\n                }\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _handleEagerConnect.apply(this, arguments);\n    }\n\n    handleEagerConnect();\n  }, []); // intentionally only running on mount (make sure it's only mounted once :))\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n\n  useEffect(function () {\n    if (!tried && active) {\n      setTried(true);\n    }\n  }, [tried, active]);\n  return tried;\n}\n\n_s(useEagerConnect, \"GLh+9ege4oFDiozdAF2n3i5tC+o=\", false, function () {\n  return [useWeb3React];\n});","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/useEagerConnect.js"],"names":["useWeb3React","injected","network","useEffect","useState","useEagerConnect","activate","active","tried","setTried","handleEagerConnect","window","cookieStore","get","eagerConnect","isAuthorized","Boolean","undefined"],"mappings":";;;;;AAAA,SAASA,YAAT,QAA6B,kBAA7B;AACA,SAASC,QAAT,EAAmBC,OAAnB,QAAkC,gBAAlC;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,eAAe,SAASC,eAAT,GAA2B;AAAA;;AAAA,sBACXL,YAAY,EADD;AAAA,MAChCM,QADgC,iBAChCA,QADgC;AAAA,MACtBC,MADsB,iBACtBA,MADsB;;AAAA,kBAGdH,QAAQ,CAAC,KAAD,CAHM;AAAA,MAGjCI,KAHiC;AAAA,MAG1BC,QAH0B;;AAKxCN,EAAAA,SAAS,CAAC,YAAM;AAAA,aACCO,kBADD;AAAA;AAAA;;AAAA;AAAA,qFACd;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAEU,OAAO,cAAP,CAFV;;AAAA;AAAA;AAAA,kCAK6BC,MAL7B,mEAK6B,QAAQC,WALrC,wDAK6B,oBAAqBC,GAArB,CAAyB,eAAzB,CAL7B;;AAAA;AAKQC,gBAAAA,YALR;AAAA;AAAA,uBAM6Bb,QAAQ,CAACc,YAAT,EAN7B;;AAAA;AAMQA,gBAAAA,YANR;;AAOE,oBAAIA,YAAY,IAAIC,OAAO,CAACF,YAAD,CAA3B,EAA2C;AACzCR,kBAAAA,QAAQ,CAACL,QAAD,EAAWgB,SAAX,EAAsB,IAAtB,CAAR,UAA0C,YAAM;AAC9CR,oBAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,mBAFD;AAGD,iBAJD,MAIO;AACLH,kBAAAA,QAAQ,CAACJ,OAAD,EAAUe,SAAV,EAAqB,IAArB,CAAR,UAAyC,YAAM;AAC7CR,oBAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,mBAFD;AAGD;;AAfH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADc;AAAA;AAAA;;AAmBdC,IAAAA,kBAAkB;AACnB,GApBQ,EAoBN,EApBM,CAAT,CALwC,CAyBhC;AAER;;AACAP,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACK,KAAD,IAAUD,MAAd,EAAsB;AACpBE,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,GAJQ,EAIN,CAACD,KAAD,EAAQD,MAAR,CAJM,CAAT;AAMA,SAAOC,KAAP;AACD;;GAnCuBH,e;UACOL,Y","sourcesContent":["import { useWeb3React } from \"@web3-react/core\";\nimport { injected, network } from \"lib/connectors\";\nimport { useEffect, useState } from \"react\";\n\nexport default function useEagerConnect() {\n  const { activate, active } = useWeb3React();\n\n  const [tried, setTried] = useState(false);\n\n  useEffect(() => {\n    async function handleEagerConnect() {\n      if (typeof window !== \"undefined\") {\n        await import(\"cookie-store\");\n      }\n\n      const eagerConnect = await window?.cookieStore?.get(\"eager_connect\");\n      const isAuthorized = await injected.isAuthorized();\n      if (isAuthorized && Boolean(eagerConnect)) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else {\n        activate(network, undefined, true).catch(() => {\n          setTried(true);\n        });\n      }\n    }\n\n    handleEagerConnect();\n  }, []); // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true);\n    }\n  }, [tried, active]);\n\n  return tried;\n}\n"]},"metadata":{},"sourceType":"module"}