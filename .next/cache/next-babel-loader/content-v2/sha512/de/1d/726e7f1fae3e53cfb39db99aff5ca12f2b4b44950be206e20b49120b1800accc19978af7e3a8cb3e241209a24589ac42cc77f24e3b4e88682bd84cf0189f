{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport useUTokenContract from \"hooks/contracts/useUTokenContract\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { BLOCKS_PER_YEAR } from \"constants/variables\";\nimport useSWR from \"swr\";\nimport useChainId from \"hooks/useChainId\";\nimport useReadProvider from \"hooks/useReadProvider\";\n\nvar getInterestRate = function getInterestRate(uTokenContract) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_, chainId) {\n      var borrowRatePerBlock, decimals;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return uTokenContract.borrowRatePerBlock();\n\n            case 2:\n              borrowRatePerBlock = _context.sent;\n              decimals = BigNumber.from(18);\n              return _context.abrupt(\"return\", formatUnits(borrowRatePerBlock.mul(BLOCKS_PER_YEAR[chainId]), decimals));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\nexport default function useInterestRate() {\n  _s();\n\n  var readProvider = useReadProvider();\n  var uTokenContract = useUTokenContract(readProvider);\n  var chainId = useChainId();\n  var shouldFetch = !!uTokenContract && !!chainId;\n  return useSWR(shouldFetch ? [\"interestRate\", chainId] : null, getInterestRate(uTokenContract));\n}\n\n_s(useInterestRate, \"3jVRk4tvAPFGMq1k/VZKr+Y7kWc=\", false, function () {\n  return [useReadProvider, useUTokenContract, useChainId, useSWR];\n});","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/stats/marketSettingsStats/useInterestRate.ts"],"names":["useUTokenContract","formatUnits","BigNumber","BLOCKS_PER_YEAR","useSWR","useChainId","useReadProvider","getInterestRate","uTokenContract","_","chainId","borrowRatePerBlock","decimals","from","mul","useInterestRate","readProvider","shouldFetch"],"mappings":";;;;;AAAA,OAAOA,iBAAP,MAA8B,mCAA9B;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,SAAT,QAA0B,0BAA1B;AAEA,SAASC,eAAT,QAAgC,qBAAhC;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,eAAP,MAA4B,uBAA5B;;AAEA,IAAMC,eAAe,GACnB,SADIA,eACJ,CAACC,cAAD;AAAA;AAAA,wEAA8B,iBAAOC,CAAP,EAAeC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEpBF,cAAc,CAACG,kBAAf,EAFoB;;AAAA;AACtBA,cAAAA,kBADsB;AAGtBC,cAAAA,QAHsB,GAGXV,SAAS,CAACW,IAAV,CAAe,EAAf,CAHW;AAAA,+CAIrBZ,WAAW,CAChBU,kBAAkB,CAACG,GAAnB,CAAuBX,eAAe,CAACO,OAAD,CAAtC,CADgB,EAEhBE,QAFgB,CAJU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA9B;;AAAA;AAAA;AAAA;AAAA;AAAA,CADF;;AAWA,eAAe,SAASG,eAAT,GAA2B;AAAA;;AACxC,MAAMC,YAAY,GAAGV,eAAe,EAApC;AACA,MAAME,cAAwB,GAAGR,iBAAiB,CAACgB,YAAD,CAAlD;AACA,MAAMN,OAAO,GAAGL,UAAU,EAA1B;AACA,MAAMY,WAAW,GAAG,CAAC,CAACT,cAAF,IAAoB,CAAC,CAACE,OAA1C;AAEA,SAAON,MAAM,CACXa,WAAW,GAAG,CAAC,cAAD,EAAiBP,OAAjB,CAAH,GAA+B,IAD/B,EAEXH,eAAe,CAACC,cAAD,CAFJ,CAAb;AAID;;GAVuBO,e;UACDT,e,EACYN,iB,EACjBK,U,EAGTD,M","sourcesContent":["import useUTokenContract from \"hooks/contracts/useUTokenContract\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { BLOCKS_PER_YEAR } from \"constants/variables\";\nimport useSWR from \"swr\";\nimport useChainId from \"hooks/useChainId\";\nimport useReadProvider from \"hooks/useReadProvider\";\n\nconst getInterestRate =\n  (uTokenContract: Contract) => async (_: any, chainId: string) => {\n    const borrowRatePerBlock: BigNumber =\n      await uTokenContract.borrowRatePerBlock();\n    const decimals = BigNumber.from(18);\n    return formatUnits(\n      borrowRatePerBlock.mul(BLOCKS_PER_YEAR[chainId]),\n      decimals\n    );\n  };\n\nexport default function useInterestRate() {\n  const readProvider = useReadProvider();\n  const uTokenContract: Contract = useUTokenContract(readProvider);\n  const chainId = useChainId();\n  const shouldFetch = !!uTokenContract && !!chainId;\n\n  return useSWR(\n    shouldFetch ? [\"interestRate\", chainId] : null,\n    getInterestRate(uTokenContract)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}