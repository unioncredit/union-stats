{"ast":null,"code":"import _slicedToArray from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { OFAC_SANCTIONED } from \"../constants/variables\";\nimport useSWR from \"swr\";\nvar ENDPOINT = \"https://www.cloudflare.com/cdn-cgi/trace\";\n\nvar fetcher = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var res,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch.apply(void 0, _args);\n\n          case 2:\n            res = _context.sent;\n            return _context.abrupt(\"return\", res.text());\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function fetcher() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar keyValueToJSON = function keyValueToJSON(raw) {\n  return raw.split(\"\\n\").reduce(function (acc, cur) {\n    var _cur$split = cur.split(\"=\"),\n        _cur$split2 = _slicedToArray(_cur$split, 2),\n        key = _cur$split2[0],\n        value = _cur$split2[1];\n\n    acc[key] = value;\n    return acc;\n  }, {});\n};\n/*\n * @name useIsSanctioned\n * Returns 'true' or 'false' whether or not the current\n *   user's IP is located in an OFAC sanctioned country.\n */\n\n\nexport default function useIsSanctioned() {\n  _s();\n\n  var _useSWR = useSWR(ENDPOINT, fetcher),\n      data = _useSWR.data;\n\n  var isSanctioned = false;\n\n  if (data) {\n    var _keyValueToJSON = keyValueToJSON(data),\n        loc = _keyValueToJSON.loc;\n\n    if (OFAC_SANCTIONED.includes(loc)) isSanctioned = true;\n  }\n\n  return isSanctioned;\n}\n\n_s(useIsSanctioned, \"Bw9uScf/xQBWZKhLCWSR33xISM4=\", false, function () {\n  return [useSWR];\n});","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/useIsSanctioned.js"],"names":["OFAC_SANCTIONED","useSWR","ENDPOINT","fetcher","fetch","res","text","keyValueToJSON","raw","split","reduce","acc","cur","key","value","useIsSanctioned","data","isSanctioned","loc","includes"],"mappings":";;;;;;AAAA,SAASA,eAAT,QAAgC,wBAAhC;AACA,OAAOC,MAAP,MAAmB,KAAnB;AAEA,IAAMC,QAAQ,GAAG,0CAAjB;;AAEA,IAAMC,OAAO;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACIC,KAAK,MAAL,eADJ;;AAAA;AACRC,YAAAA,GADQ;AAAA,6CAEPA,GAAG,CAACC,IAAJ,EAFO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPH,OAAO;AAAA;AAAA;AAAA,GAAb;;AAKA,IAAMI,cAAc,GAAG,SAAjBA,cAAiB,CAACC,GAAD;AAAA,SACrBA,GAAG,CAACC,KAAJ,CAAU,IAAV,EAAgBC,MAAhB,CAAuB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,qBACdA,GAAG,CAACH,KAAJ,CAAU,GAAV,CADc;AAAA;AAAA,QAC5BI,GAD4B;AAAA,QACvBC,KADuB;;AAGnCH,IAAAA,GAAG,CAACE,GAAD,CAAH,GAAWC,KAAX;AAEA,WAAOH,GAAP;AACD,GAND,EAMG,EANH,CADqB;AAAA,CAAvB;AASA;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAASI,eAAT,GAA2B;AAAA;;AAAA,gBACvBd,MAAM,CAACC,QAAD,EAAWC,OAAX,CADiB;AAAA,MAChCa,IADgC,WAChCA,IADgC;;AAGxC,MAAIC,YAAY,GAAG,KAAnB;;AAEA,MAAID,IAAJ,EAAU;AAAA,0BACQT,cAAc,CAACS,IAAD,CADtB;AAAA,QACAE,GADA,mBACAA,GADA;;AAGR,QAAIlB,eAAe,CAACmB,QAAhB,CAAyBD,GAAzB,CAAJ,EAAmCD,YAAY,GAAG,IAAf;AACpC;;AAED,SAAOA,YAAP;AACD;;GAZuBF,e;UACLd,M","sourcesContent":["import { OFAC_SANCTIONED } from \"../constants/variables\";\nimport useSWR from \"swr\";\n\nconst ENDPOINT = \"https://www.cloudflare.com/cdn-cgi/trace\";\n\nconst fetcher = async (...args) => {\n  const res = await fetch(...args);\n  return res.text();\n};\n\nconst keyValueToJSON = (raw) =>\n  raw.split(\"\\n\").reduce((acc, cur) => {\n    const [key, value] = cur.split(\"=\");\n\n    acc[key] = value;\n\n    return acc;\n  }, {});\n\n/*\n * @name useIsSanctioned\n * Returns 'true' or 'false' whether or not the current\n *   user's IP is located in an OFAC sanctioned country.\n */\nexport default function useIsSanctioned() {\n  const { data } = useSWR(ENDPOINT, fetcher);\n\n  let isSanctioned = false;\n\n  if (data) {\n    const { loc } = keyValueToJSON(data);\n\n    if (OFAC_SANCTIONED.includes(loc)) isSanctioned = true;\n  }\n\n  return isSanctioned;\n}\n"]},"metadata":{},"sourceType":"module"}