{"ast":null,"code":"import { formatUnits } from \"@ethersproject/units\";\nimport useUnionContract from \"hooks/contracts/useUnionContract\";\nimport useReadProvider from \"hooks/useReadProvider\";\nimport useSWR from \"swr\";\n\nconst getVotingWalletData = governanceTokenContract => async (_, address) => {\n  const balanceOf = await governanceTokenContract.balanceOf(address);\n  const currentVotes = await governanceTokenContract.getCurrentVotes(address);\n  const delegates = await governanceTokenContract.delegates(address);\n  return {\n    balanceOf: parseFloat(formatUnits(balanceOf, 18)),\n    currentVotes: parseFloat(formatUnits(currentVotes, 18)),\n    delegates: delegates\n  };\n};\n\nexport default function useVotingWalletData(address) {\n  const readProvider = useReadProvider();\n  const contract = useUnionContract(readProvider);\n  const shouldFetch = typeof address === \"string\" && !!contract;\n  return useSWR(shouldFetch ? [\"VotingWalletData\", address] : null, getVotingWalletData(contract));\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/governance/useVotingWalletData.ts"],"names":["formatUnits","useUnionContract","useReadProvider","useSWR","getVotingWalletData","governanceTokenContract","_","address","balanceOf","currentVotes","getCurrentVotes","delegates","parseFloat","useVotingWalletData","readProvider","contract","shouldFetch"],"mappings":"AAEA,SAASA,WAAT,QAA4B,sBAA5B;AACA,OAAOC,gBAAP,MAA6B,kCAA7B;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,OAAOC,MAAP,MAAmB,KAAnB;;AAEA,MAAMC,mBAAmB,GACtBC,uBAAD,IAAuC,OAAOC,CAAP,EAAeC,OAAf,KAAmC;AACxE,QAAMC,SAAoB,GAAG,MAAMH,uBAAuB,CAACG,SAAxB,CACjCD,OADiC,CAAnC;AAIA,QAAME,YAAuB,GAC3B,MAAMJ,uBAAuB,CAACK,eAAxB,CAAwCH,OAAxC,CADR;AAGA,QAAMI,SAAiB,GAAG,MAAMN,uBAAuB,CAACM,SAAxB,CAAkCJ,OAAlC,CAAhC;AAEA,SAAO;AACLC,IAAAA,SAAS,EAAEI,UAAU,CAACZ,WAAW,CAACQ,SAAD,EAAY,EAAZ,CAAZ,CADhB;AAELC,IAAAA,YAAY,EAAEG,UAAU,CAACZ,WAAW,CAACS,YAAD,EAAe,EAAf,CAAZ,CAFnB;AAGLE,IAAAA,SAAS,EAAEA;AAHN,GAAP;AAKD,CAhBH;;AAkBA,eAAe,SAASE,mBAAT,CAA6BN,OAA7B,EAA8C;AAC3D,QAAMO,YAAY,GAAGZ,eAAe,EAApC;AACA,QAAMa,QAAQ,GAAGd,gBAAgB,CAACa,YAAD,CAAjC;AAEA,QAAME,WAAW,GAAG,OAAOT,OAAP,KAAmB,QAAnB,IAA+B,CAAC,CAACQ,QAArD;AAEA,SAAOZ,MAAM,CACXa,WAAW,GAAG,CAAC,kBAAD,EAAqBT,OAArB,CAAH,GAAmC,IADnC,EAEXH,mBAAmB,CAACW,QAAD,CAFR,CAAb;AAID","sourcesContent":["import type { BigNumber } from \"@ethersproject/bignumber\";\nimport type { Contract } from \"@ethersproject/contracts\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport useUnionContract from \"hooks/contracts/useUnionContract\";\nimport useReadProvider from \"hooks/useReadProvider\";\nimport useSWR from \"swr\";\n\nconst getVotingWalletData =\n  (governanceTokenContract: Contract) => async (_: any, address: string) => {\n    const balanceOf: BigNumber = await governanceTokenContract.balanceOf(\n      address\n    );\n\n    const currentVotes: BigNumber =\n      await governanceTokenContract.getCurrentVotes(address);\n\n    const delegates: string = await governanceTokenContract.delegates(address);\n\n    return {\n      balanceOf: parseFloat(formatUnits(balanceOf, 18)),\n      currentVotes: parseFloat(formatUnits(currentVotes, 18)),\n      delegates: delegates,\n    };\n  };\n\nexport default function useVotingWalletData(address: string) {\n  const readProvider = useReadProvider();\n  const contract = useUnionContract(readProvider);\n\n  const shouldFetch = typeof address === \"string\" && !!contract;\n\n  return useSWR(\n    shouldFetch ? [\"VotingWalletData\", address] : null,\n    getVotingWalletData(contract)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}