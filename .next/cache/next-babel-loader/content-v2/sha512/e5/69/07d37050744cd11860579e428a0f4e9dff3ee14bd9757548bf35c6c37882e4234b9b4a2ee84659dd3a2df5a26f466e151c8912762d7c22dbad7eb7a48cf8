{"ast":null,"code":"import _defineProperty from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectWithoutProperties from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"/Users/mathewstokes/Desktop/stats-app/components-ui/UnwrapButton.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from \"react\";\nimport { Button } from \"@unioncredit/ui\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { formatEther } from \"@ethersproject/units\";\nimport handleTxError from \"util/handleTxError\";\nimport activityLabels from \"util/activityLabels\";\nimport { addToast, FLAVORS } from \"hooks/useToast\";\nimport { useAddActivity } from \"hooks/data/useActivity\";\nimport useUnwrapUnion from \"hooks/payables/useUnwrapUnion\";\nimport useUnionSymbol from \"hooks/useUnionSymbol\";\nimport format from \"util/formatValue\";\nimport { TOKENS } from \"constants/variables\";\nimport isHash from \"util/isHash\";\nimport getReceipt from \"util/getReceipt\";\nimport useTokenBalance from \"hooks/data/useTokenBalance\";\nexport var UnwrapButton = function UnwrapButton(_ref) {\n  _s();\n\n  var _TOKENS$chainId;\n\n  var onComplete = _ref.onComplete,\n      props = _objectWithoutProperties(_ref, [\"onComplete\"]);\n\n  var unwrap = useUnwrapUnion();\n  var addActivity = useAddActivity();\n\n  var _useWeb3React = useWeb3React(),\n      library = _useWeb3React.library,\n      chainId = _useWeb3React.chainId;\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useUnionSymbol = useUnionSymbol(),\n      unionSymbol = _useUnionSymbol.data;\n\n  var _useTokenBalance = useTokenBalance((_TOKENS$chainId = TOKENS[chainId]) === null || _TOKENS$chainId === void 0 ? void 0 : _TOKENS$chainId.WRAPPED_UNION),\n      balance = _useTokenBalance.data;\n\n  var displayBalance = format(formatEther(balance), 4);\n\n  var handleUnwrap = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _yield$unwrap, hash, _hash;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(balance !== null && balance !== void 0 && balance.lte(\"0\"))) {\n                _context.next = 3;\n                break;\n              }\n\n              addToast(FLAVORS.ERROR(\"No tokens to unwrap\"));\n              return _context.abrupt(\"return\");\n\n            case 3:\n              _context.prev = 3;\n              setLoading(true);\n              _context.next = 7;\n              return unwrap(balance);\n\n            case 7:\n              _yield$unwrap = _context.sent;\n              hash = _yield$unwrap.hash;\n              _context.next = 11;\n              return getReceipt(hash, library, {\n                pending: \"Unwrapping \".concat(displayBalance, \" \").concat(unionSymbol),\n                success: \"Unwrapped \".concat(displayBalance, \" \").concat(unionSymbol)\n              });\n\n            case 11:\n              addActivity(activityLabels.unwrap({\n                balance: balance,\n                hash: hash\n              }));\n              setLoading(false);\n\n              if (!(typeof onComplete === \"function\")) {\n                _context.next = 16;\n                break;\n              }\n\n              _context.next = 16;\n              return onComplete();\n\n            case 16:\n              _context.next = 24;\n              break;\n\n            case 18:\n              _context.prev = 18;\n              _context.t0 = _context[\"catch\"](3);\n              setLoading(false);\n              _hash = isHash(_context.t0.message) && _context.t0.message;\n              addActivity(activityLabels.unwrap({\n                balance: balance,\n                hash: _hash\n              }, true));\n              handleTxError(_context.t0, \"Failed to unwrap \".concat(unionSymbol));\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 18]]);\n    }));\n\n    return function handleUnwrap() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(Button, _objectSpread(_objectSpread({}, props), {}, {\n    onClick: handleUnwrap,\n    loading: loading\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 10\n  }, _this);\n};\n\n_s(UnwrapButton, \"7XTjd2TDjJDsOpzAurWrUgfvh+0=\", false, function () {\n  return [useUnwrapUnion, useAddActivity, useWeb3React, useUnionSymbol, useTokenBalance];\n});\n\n_c = UnwrapButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"UnwrapButton\");","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/components-ui/UnwrapButton.js"],"names":["useState","Button","useWeb3React","formatEther","handleTxError","activityLabels","addToast","FLAVORS","useAddActivity","useUnwrapUnion","useUnionSymbol","format","TOKENS","isHash","getReceipt","useTokenBalance","UnwrapButton","onComplete","props","unwrap","addActivity","library","chainId","loading","setLoading","unionSymbol","data","WRAPPED_UNION","balance","displayBalance","handleUnwrap","lte","ERROR","hash","pending","success","message"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { Button } from \"@unioncredit/ui\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { formatEther } from \"@ethersproject/units\";\n\nimport handleTxError from \"util/handleTxError\";\nimport activityLabels from \"util/activityLabels\";\nimport { addToast, FLAVORS } from \"hooks/useToast\";\nimport { useAddActivity } from \"hooks/data/useActivity\";\nimport useUnwrapUnion from \"hooks/payables/useUnwrapUnion\";\nimport useUnionSymbol from \"hooks/useUnionSymbol\";\nimport format from \"util/formatValue\";\nimport { TOKENS } from \"constants/variables\";\nimport isHash from \"util/isHash\";\nimport getReceipt from \"util/getReceipt\";\nimport useTokenBalance from \"hooks/data/useTokenBalance\";\n\nexport const UnwrapButton = ({ onComplete, ...props }) => {\n  const unwrap = useUnwrapUnion();\n  const addActivity = useAddActivity();\n  const { library, chainId } = useWeb3React();\n  const [loading, setLoading] = useState(false);\n  const { data: unionSymbol } = useUnionSymbol();\n  const { data: balance } = useTokenBalance(TOKENS[chainId]?.WRAPPED_UNION);\n\n  const displayBalance = format(formatEther(balance), 4);\n\n  const handleUnwrap = async () => {\n    if (balance?.lte(\"0\")) {\n      addToast(FLAVORS.ERROR(\"No tokens to unwrap\"));\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const { hash } = await unwrap(balance);\n      await getReceipt(hash, library, {\n        pending: `Unwrapping ${displayBalance} ${unionSymbol}`,\n        success: `Unwrapped ${displayBalance} ${unionSymbol}`,\n      });\n      addActivity(activityLabels.unwrap({ balance, hash }));\n      setLoading(false);\n      if (typeof onComplete === \"function\") {\n        await onComplete();\n      }\n    } catch (err) {\n      setLoading(false);\n      const hash = isHash(err.message) && err.message;\n      addActivity(activityLabels.unwrap({ balance, hash }, true));\n      handleTxError(err, `Failed to unwrap ${unionSymbol}`);\n    }\n  };\n\n  return <Button {...props} onClick={handleUnwrap} loading={loading} />;\n};\n"]},"metadata":{},"sourceType":"module"}