{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _toConsumableArray from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"/Users/mathewstokes/Desktop/stats-app/components-ui/ProposalHistoryCard.js\",\n    _s = $RefreshSig$();\n\nimport useProposalHistory from \"hooks/governance/useProposalHistory\";\nimport useChainId from \"hooks/useChainId\";\nimport { Heading, Card, Steps } from \"@unioncredit/ui\";\nimport getEtherScanLink from \"util/getEtherscanLink\";\n\nfunction parseData(chainId, data) {\n  if (!data) return [];\n  return data.map(function (item) {\n    var _item$id$split;\n\n    var date = new Date(Number(item.timestamp * 1000));\n    var subTitle = \"\".concat(date.toDateString(), \" \").concat(date.getHours(), \":\").concat(date.getMinutes());\n    var hash = item.id ? (_item$id$split = item.id.split(\"-\")) === null || _item$id$split === void 0 ? void 0 : _item$id$split[0] : false;\n    var href = hash && getEtherScanLink(chainId, hash, \"TRANSACTION\");\n\n    if (item.action === \"queued\") {\n      return {\n        title: \"Queued for Execution\",\n        subTitle: subTitle,\n        color: \"blue\",\n        href: href\n      };\n    } else if (item.action === \"proposed\") {\n      return {\n        title: \"Proposed\",\n        subTitle: subTitle,\n        color: \"blue\",\n        href: href\n      };\n    } else if (item.action === \"executed\") {\n      return {\n        title: \"Executed\",\n        subTitle: subTitle,\n        color: \"green\",\n        href: href\n      };\n    } else if (item.action === \"votingStarted\") {\n      return {\n        title: \"Queued For Voting\",\n        subTitle: subTitle,\n        color: \"purple\",\n        href: href\n      };\n    } else {\n      return {};\n    }\n  });\n}\n\nexport function ProposalHistoryCard(_ref) {\n  _s();\n\n  var id = _ref.id,\n      startTimestamp = _ref.startTimestamp;\n\n  var _useProposalHistory = useProposalHistory(id),\n      _useProposalHistory$d = _useProposalHistory.data,\n      data = _useProposalHistory$d === void 0 ? [] : _useProposalHistory$d;\n\n  var chainId = useChainId();\n  var hasHistory = data && data.length > 0;\n  var votingStarted = startTimestamp * 1000 <= Date.now() && {\n    action: \"votingStarted\",\n    timestamp: startTimestamp\n  };\n  var allData = [].concat(_toConsumableArray(data), [votingStarted]).filter(Boolean).sort(function (a, b) {\n    return Number(a.timestamp) - Number(b.timestamp);\n  });\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        children: \"History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), hasHistory ? /*#__PURE__*/_jsxDEV(Steps, {\n        items: parseData(chainId, allData)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this) : \"No history\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ProposalHistoryCard, \"DfkEUHN/+I9fG+j5Jexpa1DLk1A=\", false, function () {\n  return [useProposalHistory, useChainId];\n});\n\n_c = ProposalHistoryCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProposalHistoryCard\");","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/components-ui/ProposalHistoryCard.js"],"names":["useProposalHistory","useChainId","Heading","Card","Steps","getEtherScanLink","parseData","chainId","data","map","item","date","Date","Number","timestamp","subTitle","toDateString","getHours","getMinutes","hash","id","split","href","action","title","color","ProposalHistoryCard","startTimestamp","hasHistory","length","votingStarted","now","allData","filter","Boolean","sort","a","b"],"mappings":"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","sourcesContent":["import useProposalHistory from \"hooks/governance/useProposalHistory\";\nimport useChainId from \"hooks/useChainId\";\nimport { Heading, Card, Steps } from \"@unioncredit/ui\";\nimport getEtherScanLink from \"util/getEtherscanLink\";\n\nfunction parseData(chainId, data) {\n  if (!data) return [];\n\n  return data.map((item) => {\n    const date = new Date(Number(item.timestamp * 1000));\n    const subTitle = `${date.toDateString()} ${date.getHours()}:${date.getMinutes()}`;\n    const hash = item.id ? item.id.split(\"-\")?.[0] : false;\n    const href = hash && getEtherScanLink(chainId, hash, \"TRANSACTION\");\n\n    if (item.action === \"queued\") {\n      return { title: \"Queued for Execution\", subTitle, color: \"blue\", href };\n    } else if (item.action === \"proposed\") {\n      return { title: \"Proposed\", subTitle, color: \"blue\", href };\n    } else if (item.action === \"executed\") {\n      return { title: \"Executed\", subTitle, color: \"green\", href };\n    } else if (item.action === \"votingStarted\") {\n      return { title: \"Queued For Voting\", subTitle, color: \"purple\", href };\n    } else {\n      return {};\n    }\n  });\n}\n\nexport function ProposalHistoryCard({ id, startTimestamp }) {\n  const { data = [] } = useProposalHistory(id);\n  const chainId = useChainId();\n\n  const hasHistory = data && data.length > 0;\n\n  const votingStarted = startTimestamp * 1000 <= Date.now() && {\n    action: \"votingStarted\",\n    timestamp: startTimestamp,\n  };\n\n  const allData = [...data, votingStarted]\n    .filter(Boolean)\n    .sort((a, b) => Number(a.timestamp) - Number(b.timestamp));\n\n  return (\n    <Card>\n      <Card.Body>\n        <Heading>History</Heading>\n        {hasHistory ? (\n          <Steps items={parseData(chainId, allData)} />\n        ) : (\n          \"No history\"\n        )}\n      </Card.Body>\n    </Card>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}