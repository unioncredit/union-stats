{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { isAddress } from \"@ethersproject/address\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport useSWR from \"swr\";\nimport parseRes from \"util/parseRes\";\nimport useComptrollerContract from \"../contracts/useComptrollerContract\";\nimport useCurrentToken from \"../useCurrentToken\";\n\nvar getRewardsData = function getRewardsData(contract) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_, account, tokenAddress) {\n      var rewardsMultiplier, rewards;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return contract.getRewardsMultiplier(account, tokenAddress);\n\n            case 3:\n              rewardsMultiplier = _context.sent;\n              _context.next = 6;\n              return contract.calculateRewards(account, tokenAddress);\n\n            case 6:\n              rewards = _context.sent;\n              return _context.abrupt(\"return\", {\n                rewards: parseRes(rewards, 3),\n                rewardsMultiplier: parseRes(rewardsMultiplier)\n              });\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n              throw _context.t0;\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 10]]);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\nexport default function useRewardsData() {\n  _s();\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId;\n\n  var comptrollerContract = useComptrollerContract();\n  var curToken = useCurrentToken();\n  var shouldFetch = !!comptrollerContract && typeof chainId === \"number\" && typeof account === \"string\" && isAddress(curToken);\n  return useSWR(shouldFetch ? [\"RewardsData\", account, curToken, chainId] : null, getRewardsData(comptrollerContract), {\n    refreshInterval: 30 * 1000\n  });\n}\n\n_s(useRewardsData, \"zgqcS+gXqugTZJPaC16dZtY7Jtw=\", false, function () {\n  return [useWeb3React, useComptrollerContract, useCurrentToken, useSWR];\n});","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/data/useRewardsData.ts"],"names":["isAddress","useWeb3React","useSWR","parseRes","useComptrollerContract","useCurrentToken","getRewardsData","contract","_","account","tokenAddress","getRewardsMultiplier","rewardsMultiplier","calculateRewards","rewards","console","error","useRewardsData","chainId","comptrollerContract","curToken","shouldFetch","refreshInterval"],"mappings":";;;;;AAAA,SAASA,SAAT,QAA0B,wBAA1B;AAEA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,sBAAP,MAAmC,qCAAnC;AACA,OAAOC,eAAP,MAA4B,oBAA5B;;AAEA,IAAMC,cAAc,GAClB,SADIA,cACJ,CAACC,QAAD;AAAA;AAAA,wEACA,iBAAOC,CAAP,EAAeC,OAAf,EAAgCC,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEoCH,QAAQ,CAACI,oBAAT,CAC9BF,OAD8B,EAE9BC,YAF8B,CAFpC;;AAAA;AAEUE,cAAAA,iBAFV;AAAA;AAAA,qBAO0BL,QAAQ,CAACM,gBAAT,CAA0BJ,OAA1B,EAAmCC,YAAnC,CAP1B;;AAAA;AAOUI,cAAAA,OAPV;AAAA,+CASW;AACLA,gBAAAA,OAAO,EAAEX,QAAQ,CAACW,OAAD,EAAU,CAAV,CADZ;AAELF,gBAAAA,iBAAiB,EAAET,QAAQ,CAACS,iBAAD;AAFtB,eATX;;AAAA;AAAA;AAAA;AAcIG,cAAAA,OAAO,CAACC,KAAR;AAdJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADA;;AAAA;AAAA;AAAA;AAAA;AAAA,CADF;;AAqBA,eAAe,SAASC,cAAT,GAA0B;AAAA;;AAAA,sBACVhB,YAAY,EADF;AAAA,MAC/BQ,OAD+B,iBAC/BA,OAD+B;AAAA,MACtBS,OADsB,iBACtBA,OADsB;;AAEvC,MAAMC,mBAAmB,GAAGf,sBAAsB,EAAlD;AACA,MAAMgB,QAAQ,GAAGf,eAAe,EAAhC;AAEA,MAAMgB,WAAW,GACf,CAAC,CAACF,mBAAF,IACA,OAAOD,OAAP,KAAmB,QADnB,IAEA,OAAOT,OAAP,KAAmB,QAFnB,IAGAT,SAAS,CAACoB,QAAD,CAJX;AAMA,SAAOlB,MAAM,CACXmB,WAAW,GAAG,CAAC,aAAD,EAAgBZ,OAAhB,EAAyBW,QAAzB,EAAmCF,OAAnC,CAAH,GAAiD,IADjD,EAEXZ,cAAc,CAACa,mBAAD,CAFH,EAGX;AACEG,IAAAA,eAAe,EAAE,KAAK;AADxB,GAHW,CAAb;AAOD;;GAlBuBL,c;UACOhB,Y,EACDG,sB,EACXC,e,EAQVH,M","sourcesContent":["import { isAddress } from \"@ethersproject/address\";\nimport type { Contract } from \"@ethersproject/contracts\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport useSWR from \"swr\";\nimport parseRes from \"util/parseRes\";\nimport useComptrollerContract from \"../contracts/useComptrollerContract\";\nimport useCurrentToken from \"../useCurrentToken\";\n\nconst getRewardsData =\n  (contract: Contract) =>\n  async (_: any, account: string, tokenAddress: string) => {\n    try {\n      const rewardsMultiplier = await contract.getRewardsMultiplier(\n        account,\n        tokenAddress\n      );\n\n      const rewards = await contract.calculateRewards(account, tokenAddress);\n\n      return {\n        rewards: parseRes(rewards, 3),\n        rewardsMultiplier: parseRes(rewardsMultiplier),\n      };\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  };\n\nexport default function useRewardsData() {\n  const { account, chainId } = useWeb3React();\n  const comptrollerContract = useComptrollerContract();\n  const curToken = useCurrentToken();\n\n  const shouldFetch =\n    !!comptrollerContract &&\n    typeof chainId === \"number\" &&\n    typeof account === \"string\" &&\n    isAddress(curToken);\n\n  return useSWR(\n    shouldFetch ? [\"RewardsData\", account, curToken, chainId] : null,\n    getRewardsData(comptrollerContract),\n    {\n      refreshInterval: 30 * 1000,\n    }\n  );\n}\n"]},"metadata":{},"sourceType":"module"}