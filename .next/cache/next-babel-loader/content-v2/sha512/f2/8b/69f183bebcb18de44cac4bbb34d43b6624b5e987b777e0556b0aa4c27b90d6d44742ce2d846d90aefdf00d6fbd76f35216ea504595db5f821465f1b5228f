{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/mathewstokes/Desktop/stats-app/components-ui/DepositInput.js\";\nimport { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { Button, Dai, Box, Input } from \"@unioncredit/ui\";\nimport getReceipt from \"util/getReceipt\";\nimport handleTxError from \"util/handleTxError\";\nimport useCurrentToken from \"hooks/useCurrentToken\";\nimport useTokenBalance from \"hooks/data/useTokenBalance\";\nimport useStakeDeposit from \"hooks/payables/useStakeDeposit\";\nimport errorMessages from \"util/errorMessages\";\nimport { roundDown } from \"util/numbers\";\nimport activityLabels from \"util/activityLabels\";\nimport { useAddActivity } from \"hooks/data/useActivity\";\nimport isHash from \"util/isHash\";\nimport { Approval } from \"components-ui\";\nimport useUserContract from \"hooks/contracts/useUserContract\";\nimport useMaxStakeAmount from \"hooks/data/useMaxStakeAmount\";\nimport { APPROVE_DAI_DEPOSIT_SIGNATURE_KEY } from \"constants/app\";\nimport usePermits from \"hooks/usePermits\";\nimport { formatEther } from \"@ethersproject/units\";\nexport const DepositInput = ({\n  totalStake,\n  onComplete\n}) => {\n  var _errors$amount;\n\n  const {\n    library\n  } = useWeb3React();\n  const addActivity = useAddActivity();\n  const userManager = useUserContract();\n  const {\n    removePermit\n  } = usePermits();\n  const {\n    data: maxStake = \"0\"\n  } = useMaxStakeAmount();\n  const {\n    handleSubmit,\n    register,\n    watch,\n    setValue,\n    formState,\n    errors,\n    reset\n  } = useForm({\n    mode: \"onChange\",\n    reValidateMode: \"onChange\"\n  });\n  const {\n    isDirty,\n    isSubmitting\n  } = formState;\n  const watchAmount = watch(\"amount\", 0);\n  const amount = Number(watchAmount || 0);\n  const DAI = useCurrentToken();\n  const {\n    data: daiBalance = 0.0,\n    mutate: updateDaiBalance\n  } = useTokenBalance(DAI);\n  useEffect(() => {\n    updateDaiBalance();\n  }, []);\n  const maxStakeAmount = Number(formatEther(maxStake));\n  const maxAllowed = maxStakeAmount - parseFloat(totalStake);\n  const maxDeposit = Math.min(maxAllowed, roundDown(daiBalance));\n  const newTotalStake = Number(parseFloat(amount || 0) + parseFloat(totalStake));\n\n  const handleMaxDeposit = () => {\n    setValue(\"amount\", maxDeposit, {\n      shouldDirty: true,\n      shouldValidate: true\n    });\n  };\n\n  const deposit = useStakeDeposit();\n\n  const onSubmit = async values => {\n    try {\n      const {\n        hash\n      } = await deposit(values.amount);\n      await getReceipt(hash, library, {\n        pending: `Staking ${values.amount} DAI`,\n        success: `Staked ${values.amount} DAI`\n      });\n      addActivity(activityLabels.borrow({\n        amount: values.amount,\n        hash\n      }));\n      await onComplete();\n      removePermit(APPROVE_DAI_DEPOSIT_SIGNATURE_KEY);\n      reset();\n    } catch (err) {\n      const hash = isHash(err.message) && err.message;\n      addActivity(activityLabels.borrow({\n        amount: values.amount,\n        hash\n      }, true));\n      handleTxError(err, `Failed to stake ${values.amount} DAI`);\n    }\n  };\n\n  const validateAmount = amount => {\n    if (!amount || amount <= 0) return errorMessages.required;\n    if (amount > maxAllowed) return errorMessages.stakeLimitHit;\n    if (amount > daiBalance) return errorMessages.notEnoughBalanceDAI;\n    if (amount < 0.1) return errorMessages.minValuePointZeroOne;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      mt: \"18px\",\n      direction: \"vertical\",\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        type: \"number\",\n        name: \"amount\",\n        label: \"Amount to stake\",\n        caption: `Max. ${maxDeposit} DAI`,\n        onCaptionClick: handleMaxDeposit,\n        placeholder: \"0\",\n        suffix: /*#__PURE__*/_jsxDEV(Dai, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 19\n        }, this),\n        error: errors === null || errors === void 0 ? void 0 : (_errors$amount = errors.amount) === null || _errors$amount === void 0 ? void 0 : _errors$amount.message,\n        ref: register({\n          validate: validateAmount\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: \"18px\",\n      fluid: true,\n      children: /*#__PURE__*/_jsxDEV(Approval, {\n        amount: amount,\n        tokenAddress: DAI,\n        spender: userManager.address,\n        label: \"Approve DAI for Staking\",\n        signatureKey: APPROVE_DAI_DEPOSIT_SIGNATURE_KEY,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          fluid: true,\n          type: \"submit\",\n          loading: isSubmitting,\n          disabled: !isDirty || newTotalStake > maxStakeAmount,\n          label: `Stake ${amount} DAI`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/components-ui/DepositInput.js"],"names":["useEffect","useForm","useWeb3React","Button","Dai","Box","Input","getReceipt","handleTxError","useCurrentToken","useTokenBalance","useStakeDeposit","errorMessages","roundDown","activityLabels","useAddActivity","isHash","Approval","useUserContract","useMaxStakeAmount","APPROVE_DAI_DEPOSIT_SIGNATURE_KEY","usePermits","formatEther","DepositInput","totalStake","onComplete","library","addActivity","userManager","removePermit","data","maxStake","handleSubmit","register","watch","setValue","formState","errors","reset","mode","reValidateMode","isDirty","isSubmitting","watchAmount","amount","Number","DAI","daiBalance","mutate","updateDaiBalance","maxStakeAmount","maxAllowed","parseFloat","maxDeposit","Math","min","newTotalStake","handleMaxDeposit","shouldDirty","shouldValidate","deposit","onSubmit","values","hash","pending","success","borrow","err","message","validateAmount","required","stakeLimitHit","notEnoughBalanceDAI","minValuePointZeroOne","validate","address"],"mappings":"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","sourcesContent":["import { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { Button, Dai, Box, Input } from \"@unioncredit/ui\";\n\nimport getReceipt from \"util/getReceipt\";\nimport handleTxError from \"util/handleTxError\";\nimport useCurrentToken from \"hooks/useCurrentToken\";\nimport useTokenBalance from \"hooks/data/useTokenBalance\";\nimport useStakeDeposit from \"hooks/payables/useStakeDeposit\";\nimport errorMessages from \"util/errorMessages\";\nimport { roundDown } from \"util/numbers\";\nimport activityLabels from \"util/activityLabels\";\nimport { useAddActivity } from \"hooks/data/useActivity\";\nimport isHash from \"util/isHash\";\nimport { Approval } from \"components-ui\";\nimport useUserContract from \"hooks/contracts/useUserContract\";\nimport useMaxStakeAmount from \"hooks/data/useMaxStakeAmount\";\nimport { APPROVE_DAI_DEPOSIT_SIGNATURE_KEY } from \"constants/app\";\nimport usePermits from \"hooks/usePermits\";\nimport { formatEther } from \"@ethersproject/units\";\n\nexport const DepositInput = ({ totalStake, onComplete }) => {\n  const { library } = useWeb3React();\n  const addActivity = useAddActivity();\n  const userManager = useUserContract();\n  const { removePermit } = usePermits();\n  const { data: maxStake = \"0\" } = useMaxStakeAmount();\n\n  const { handleSubmit, register, watch, setValue, formState, errors, reset } =\n    useForm({\n      mode: \"onChange\",\n      reValidateMode: \"onChange\",\n    });\n\n  const { isDirty, isSubmitting } = formState;\n\n  const watchAmount = watch(\"amount\", 0);\n  const amount = Number(watchAmount || 0);\n\n  const DAI = useCurrentToken();\n\n  const { data: daiBalance = 0.0, mutate: updateDaiBalance } =\n    useTokenBalance(DAI);\n\n  useEffect(() => {\n    updateDaiBalance();\n  }, []);\n\n  const maxStakeAmount = Number(formatEther(maxStake));\n  const maxAllowed = maxStakeAmount - parseFloat(totalStake);\n  const maxDeposit = Math.min(maxAllowed, roundDown(daiBalance));\n  const newTotalStake = Number(\n    parseFloat(amount || 0) + parseFloat(totalStake)\n  );\n\n  const handleMaxDeposit = () => {\n    setValue(\"amount\", maxDeposit, {\n      shouldDirty: true,\n      shouldValidate: true,\n    });\n  };\n\n  const deposit = useStakeDeposit();\n\n  const onSubmit = async (values) => {\n    try {\n      const { hash } = await deposit(values.amount);\n      await getReceipt(hash, library, {\n        pending: `Staking ${values.amount} DAI`,\n        success: `Staked ${values.amount} DAI`,\n      });\n      addActivity(activityLabels.borrow({ amount: values.amount, hash }));\n      await onComplete();\n      removePermit(APPROVE_DAI_DEPOSIT_SIGNATURE_KEY);\n      reset();\n    } catch (err) {\n      const hash = isHash(err.message) && err.message;\n      addActivity(activityLabels.borrow({ amount: values.amount, hash }, true));\n      handleTxError(err, `Failed to stake ${values.amount} DAI`);\n    }\n  };\n\n  const validateAmount = (amount) => {\n    if (!amount || amount <= 0) return errorMessages.required;\n    if (amount > maxAllowed) return errorMessages.stakeLimitHit;\n    if (amount > daiBalance) return errorMessages.notEnoughBalanceDAI;\n    if (amount < 0.1) return errorMessages.minValuePointZeroOne;\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Box mt=\"18px\" direction=\"vertical\">\n        <Input\n          type=\"number\"\n          name=\"amount\"\n          label=\"Amount to stake\"\n          caption={`Max. ${maxDeposit} DAI`}\n          onCaptionClick={handleMaxDeposit}\n          placeholder=\"0\"\n          suffix={<Dai />}\n          error={errors?.amount?.message}\n          ref={register({ validate: validateAmount })}\n        />\n      </Box>\n      <Box mt=\"18px\" fluid>\n        <Approval\n          amount={amount}\n          tokenAddress={DAI}\n          spender={userManager.address}\n          label=\"Approve DAI for Staking\"\n          signatureKey={APPROVE_DAI_DEPOSIT_SIGNATURE_KEY}\n        >\n          <Button\n            fluid\n            type=\"submit\"\n            loading={isSubmitting}\n            disabled={!isDirty || newTotalStake > maxStakeAmount}\n            label={`Stake ${amount} DAI`}\n          />\n        </Approval>\n      </Box>\n    </form>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}