{"ast":null,"code":"import { parseUnits } from \"@ethersproject/units\";\nimport useCurrentToken from \"hooks/useCurrentToken\";\nimport { useCallback } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport USER_MANAGER_ABI from \"constants/abis/userManager.json\";\nimport useMarketRegistryContract from \"../contracts/useMarketRegistryContract\";\nexport default function useStakeWithdraw() {\n  const tokenAddress = useCurrentToken();\n  const {\n    library\n  } = useWeb3React();\n  const marketRegistryContract = useMarketRegistryContract();\n  return useCallback(async amount => {\n    const stakeAmount = parseUnits(String(amount), 18);\n    const signer = library.getSigner();\n    const res = await marketRegistryContract.tokens(tokenAddress);\n    const userManagerAddress = res.userManager;\n    const userManagerContract = new Contract(userManagerAddress, USER_MANAGER_ABI, signer);\n    let gasLimit;\n\n    try {\n      const estimateGas = await userManagerContract.estimateGas.unstake(stakeAmount.toString());\n      gasLimit = (parseFloat(estimateGas.toString()) * 1.1).toFixed(0);\n    } catch (err) {\n      gasLimit = 800000;\n    }\n\n    return userManagerContract.unstake(stakeAmount.toString(), {\n      gasLimit\n    });\n  }, [library, marketRegistryContract, tokenAddress]);\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/payables/useStakeWithdraw.ts"],"names":["parseUnits","useCurrentToken","useCallback","useWeb3React","Contract","USER_MANAGER_ABI","useMarketRegistryContract","useStakeWithdraw","tokenAddress","library","marketRegistryContract","amount","stakeAmount","String","signer","getSigner","res","tokens","userManagerAddress","userManager","userManagerContract","gasLimit","estimateGas","unstake","toString","parseFloat","toFixed","err"],"mappings":"AACA,SAASA,UAAT,QAA2B,sBAA3B;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,OAAOC,yBAAP,MAAsC,wCAAtC;AAEA,eAAe,SAASC,gBAAT,GAA4B;AACzC,QAAMC,YAAY,GAAGP,eAAe,EAApC;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAcN,YAAY,EAAhC;AACA,QAAMO,sBAAsB,GAAGJ,yBAAyB,EAAxD;AAEA,SAAOJ,WAAW,CAChB,MAAOS,MAAP,IAAiE;AAC/D,UAAMC,WAAW,GAAGZ,UAAU,CAACa,MAAM,CAACF,MAAD,CAAP,EAAiB,EAAjB,CAA9B;AAEA,UAAMG,MAAM,GAAGL,OAAO,CAACM,SAAR,EAAf;AACA,UAAMC,GAAG,GAAG,MAAMN,sBAAsB,CAACO,MAAvB,CAA8BT,YAA9B,CAAlB;AACA,UAAMU,kBAAkB,GAAGF,GAAG,CAACG,WAA/B;AACA,UAAMC,mBAAmB,GAAG,IAAIhB,QAAJ,CAC1Bc,kBAD0B,EAE1Bb,gBAF0B,EAG1BS,MAH0B,CAA5B;AAMA,QAAIO,QAAJ;;AACA,QAAI;AACF,YAAMC,WAAW,GAAG,MAAMF,mBAAmB,CAACE,WAApB,CAAgCC,OAAhC,CACxBX,WAAW,CAACY,QAAZ,EADwB,CAA1B;AAGAH,MAAAA,QAAQ,GAAG,CAACI,UAAU,CAACH,WAAW,CAACE,QAAZ,EAAD,CAAV,GAAqC,GAAtC,EAA2CE,OAA3C,CAAmD,CAAnD,CAAX;AACD,KALD,CAKE,OAAOC,GAAP,EAAY;AACZN,MAAAA,QAAQ,GAAG,MAAX;AACD;;AAED,WAAOD,mBAAmB,CAACG,OAApB,CAA4BX,WAAW,CAACY,QAAZ,EAA5B,EAAoD;AACzDH,MAAAA;AADyD,KAApD,CAAP;AAGD,GA1Be,EA2BhB,CAACZ,OAAD,EAAUC,sBAAV,EAAkCF,YAAlC,CA3BgB,CAAlB;AA6BD","sourcesContent":["import type { TransactionResponse } from \"@ethersproject/providers\";\nimport { parseUnits } from \"@ethersproject/units\";\nimport useCurrentToken from \"hooks/useCurrentToken\";\nimport { useCallback } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport USER_MANAGER_ABI from \"constants/abis/userManager.json\";\nimport useMarketRegistryContract from \"../contracts/useMarketRegistryContract\";\n\nexport default function useStakeWithdraw() {\n  const tokenAddress = useCurrentToken();\n  const { library } = useWeb3React();\n  const marketRegistryContract = useMarketRegistryContract();\n\n  return useCallback(\n    async (amount: number | string): Promise<TransactionResponse> => {\n      const stakeAmount = parseUnits(String(amount), 18);\n\n      const signer = library.getSigner();\n      const res = await marketRegistryContract.tokens(tokenAddress);\n      const userManagerAddress = res.userManager;\n      const userManagerContract = new Contract(\n        userManagerAddress,\n        USER_MANAGER_ABI,\n        signer\n      );\n\n      let gasLimit: any;\n      try {\n        const estimateGas = await userManagerContract.estimateGas.unstake(\n          stakeAmount.toString()\n        );\n        gasLimit = (parseFloat(estimateGas.toString()) * 1.1).toFixed(0);\n      } catch (err) {\n        gasLimit = 800000;\n      }\n\n      return userManagerContract.unstake(stakeAmount.toString(), {\n        gasLimit,\n      });\n    },\n    [library, marketRegistryContract, tokenAddress]\n  );\n}\n"]},"metadata":{},"sourceType":"module"}