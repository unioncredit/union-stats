{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { request, gql } from \"graphql-request\";\nimport { GRAPHQL_URLS } from \"constants/variables\";\nimport { TransactionTypes } from \"constants/app\";\nimport { formatEther } from \"@ethersproject/units\";\nconst query = gql`\n  query (\n    $first: Int, \n    $vouchCancellationsFilter: VouchCancellation_filter,\n    $trustLinesFilter: TrustLine_filter,\n    $trustLinesFilter_Vouch: TrustLine_filter\n  ) {\n    ${TransactionTypes.CANCEL}: vouchCancellations(first: $first, where: $vouchCancellationsFilter) {\n      borrower\n      staker\n      timestamp\n    }\n    ${TransactionTypes.TRUST}: trustLines(first: $first, where: $trustLinesFilter) {\n      amount\n      borrower\n      staker\n      timestamp\n    }\n    ${TransactionTypes.TRUSTED}: trustLines(first: $first, where: $trustLinesFilter_Vouch) {\n      amount\n      borrower\n      staker\n      timestamp\n    }\n  }\n`;\nexport default async function fetchUserTransactions(chainId, staker, borrower) {\n  const borrowerVariable = borrower ? {\n    borrower\n  } : {};\n  const variables = {\n    first: 100,\n    vouchCancellationsFilter: _objectSpread({\n      staker\n    }, borrowerVariable),\n    trustLinesFilter: _objectSpread({\n      staker\n    }, borrowerVariable),\n    trustLinesFilter_Vouch: _objectSpread({\n      borrower: staker\n    }, borrower ? {\n      staker: borrower\n    } : {})\n  };\n  const resp = await request(GRAPHQL_URLS[chainId].user, query, variables);\n  const flattened = Object.keys(resp).reduce((acc, key) => {\n    const parsed = resp[key].map(item => {\n      if (item.amount) {\n        item.amount = formatEther(item.amount);\n      }\n\n      if (key === TransactionTypes.TRUST) {\n        item.address = item.borrower;\n      }\n\n      return _objectSpread(_objectSpread({}, item), {}, {\n        type: key\n      });\n    });\n    return [...acc, ...parsed];\n  }, []);\n  const sorted = flattened.sort((a, b) => {\n    return Number(b.timestamp) - Number(a.timestamp);\n  });\n  return sorted;\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/fetchers/fetchUserTransactions.js"],"names":["request","gql","GRAPHQL_URLS","TransactionTypes","formatEther","query","CANCEL","TRUST","TRUSTED","fetchUserTransactions","chainId","staker","borrower","borrowerVariable","variables","first","vouchCancellationsFilter","trustLinesFilter","trustLinesFilter_Vouch","resp","user","flattened","Object","keys","reduce","acc","key","parsed","map","item","amount","address","type","sorted","sort","a","b","Number","timestamp"],"mappings":";;;;;;AAAA,SAASA,OAAT,EAAkBC,GAAlB,QAA6B,iBAA7B;AACA,SAASC,YAAT,QAA6B,qBAA7B;AAEA,SAASC,gBAAT,QAAiC,eAAjC;AACA,SAASC,WAAT,QAA4B,sBAA5B;AAEA,MAAMC,KAAK,GAAGJ,GAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,gBAAgB,CAACG,MAAO;AAC9B;AACA;AACA;AACA;AACA,MAAMH,gBAAgB,CAACI,KAAM;AAC7B;AACA;AACA;AACA;AACA;AACA,MAAMJ,gBAAgB,CAACK,OAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,CAzBA;AA2BA,eAAe,eAAeC,qBAAf,CAAqCC,OAArC,EAA8CC,MAA9C,EAAsDC,QAAtD,EAAgE;AAC7E,QAAMC,gBAAgB,GAAGD,QAAQ,GAAG;AAAEA,IAAAA;AAAF,GAAH,GAAkB,EAAnD;AAEA,QAAME,SAAS,GAAG;AAChBC,IAAAA,KAAK,EAAE,GADS;AAEhBC,IAAAA,wBAAwB;AACtBL,MAAAA;AADsB,OAEnBE,gBAFmB,CAFR;AAMhBI,IAAAA,gBAAgB;AACdN,MAAAA;AADc,OAEXE,gBAFW,CANA;AAUhBK,IAAAA,sBAAsB;AACpBN,MAAAA,QAAQ,EAAED;AADU,OAEhBC,QAAQ,GAAG;AAAED,MAAAA,MAAM,EAAEC;AAAV,KAAH,GAA0B,EAFlB;AAVN,GAAlB;AAgBA,QAAMO,IAAI,GAAG,MAAMnB,OAAO,CAACE,YAAY,CAACQ,OAAD,CAAZ,CAAsBU,IAAvB,EAA6Bf,KAA7B,EAAoCS,SAApC,CAA1B;AAEA,QAAMO,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYJ,IAAZ,EAAkBK,MAAlB,CAAyB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACvD,UAAMC,MAAM,GAAGR,IAAI,CAACO,GAAD,CAAJ,CAAUE,GAAV,CAAeC,IAAD,IAAU;AACrC,UAAIA,IAAI,CAACC,MAAT,EAAiB;AACfD,QAAAA,IAAI,CAACC,MAAL,GAAc1B,WAAW,CAACyB,IAAI,CAACC,MAAN,CAAzB;AACD;;AAED,UAAIJ,GAAG,KAAKvB,gBAAgB,CAACI,KAA7B,EAAoC;AAClCsB,QAAAA,IAAI,CAACE,OAAL,GAAeF,IAAI,CAACjB,QAApB;AACD;;AAED,6CACKiB,IADL;AAEEG,QAAAA,IAAI,EAAEN;AAFR;AAID,KAbc,CAAf;AAeA,WAAO,CAAC,GAAGD,GAAJ,EAAS,GAAGE,MAAZ,CAAP;AACD,GAjBiB,EAiBf,EAjBe,CAAlB;AAmBA,QAAMM,MAAM,GAAGZ,SAAS,CAACa,IAAV,CAAe,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACtC,WAAOC,MAAM,CAACD,CAAC,CAACE,SAAH,CAAN,GAAsBD,MAAM,CAACF,CAAC,CAACG,SAAH,CAAnC;AACD,GAFc,CAAf;AAIA,SAAOL,MAAP;AACD","sourcesContent":["import { request, gql } from \"graphql-request\";\nimport { GRAPHQL_URLS } from \"constants/variables\";\n\nimport { TransactionTypes } from \"constants/app\";\nimport { formatEther } from \"@ethersproject/units\";\n\nconst query = gql`\n  query (\n    $first: Int, \n    $vouchCancellationsFilter: VouchCancellation_filter,\n    $trustLinesFilter: TrustLine_filter,\n    $trustLinesFilter_Vouch: TrustLine_filter\n  ) {\n    ${TransactionTypes.CANCEL}: vouchCancellations(first: $first, where: $vouchCancellationsFilter) {\n      borrower\n      staker\n      timestamp\n    }\n    ${TransactionTypes.TRUST}: trustLines(first: $first, where: $trustLinesFilter) {\n      amount\n      borrower\n      staker\n      timestamp\n    }\n    ${TransactionTypes.TRUSTED}: trustLines(first: $first, where: $trustLinesFilter_Vouch) {\n      amount\n      borrower\n      staker\n      timestamp\n    }\n  }\n`;\n\nexport default async function fetchUserTransactions(chainId, staker, borrower) {\n  const borrowerVariable = borrower ? { borrower } : {};\n\n  const variables = {\n    first: 100,\n    vouchCancellationsFilter: {\n      staker,\n      ...borrowerVariable,\n    },\n    trustLinesFilter: {\n      staker,\n      ...borrowerVariable,\n    },\n    trustLinesFilter_Vouch: {\n      borrower: staker,\n      ...(borrower ? { staker: borrower } : {}),\n    },\n  };\n\n  const resp = await request(GRAPHQL_URLS[chainId].user, query, variables);\n\n  const flattened = Object.keys(resp).reduce((acc, key) => {\n    const parsed = resp[key].map((item) => {\n      if (item.amount) {\n        item.amount = formatEther(item.amount);\n      }\n\n      if (key === TransactionTypes.TRUST) {\n        item.address = item.borrower;\n      }\n\n      return {\n        ...item,\n        type: key,\n      };\n    });\n\n    return [...acc, ...parsed];\n  }, []);\n\n  const sorted = flattened.sort((a, b) => {\n    return Number(b.timestamp) - Number(a.timestamp);\n  });\n\n  return sorted;\n}\n"]},"metadata":{},"sourceType":"module"}