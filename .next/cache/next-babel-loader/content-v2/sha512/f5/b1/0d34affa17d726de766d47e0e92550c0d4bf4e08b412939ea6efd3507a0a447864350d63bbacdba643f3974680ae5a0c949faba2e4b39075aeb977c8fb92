{"ast":null,"code":"import useAssetContract from \"hooks/contracts/useAssetContract\";\nimport useDAIDecimals from \"hooks/useDAIDecimals\";\nimport useChainId from \"hooks/useChainId\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { TOKENS } from \"constants/variables\";\nimport useSWR from \"swr\";\nimport useReadProvider from \"hooks/useReadProvider\";\n\nconst getPoolBalance = assetContract => async (_, decimals, daiAddress) => {\n  const poolBalance = await assetContract.getPoolBalance(daiAddress);\n  return formatUnits(poolBalance, decimals);\n};\n\nexport default function usePoolBalance() {\n  const readProvider = useReadProvider();\n  const assetContract = useAssetContract(readProvider);\n  const {\n    data: decimals\n  } = useDAIDecimals();\n  const chainId = useChainId();\n  const shouldFetch = !!assetContract && chainId && TOKENS[chainId] && TOKENS[chainId].DAI;\n  return useSWR(shouldFetch ? [\"poolBalance\", decimals, TOKENS[chainId].DAI] : null, getPoolBalance(assetContract));\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/stats/assetManagerStats/usePoolBalance.ts"],"names":["useAssetContract","useDAIDecimals","useChainId","formatUnits","TOKENS","useSWR","useReadProvider","getPoolBalance","assetContract","_","decimals","daiAddress","poolBalance","usePoolBalance","readProvider","data","chainId","shouldFetch","DAI"],"mappings":"AAAA,OAAOA,gBAAP,MAA6B,kCAA7B;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AAGA,SAASC,MAAT,QAAuB,qBAAvB;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,eAAP,MAA4B,uBAA5B;;AAEA,MAAMC,cAAc,GACjBC,aAAD,IACA,OAAOC,CAAP,EAAeC,QAAf,EAAoCC,UAApC,KAA2D;AACzD,QAAMC,WAAsB,GAAG,MAAMJ,aAAa,CAACD,cAAd,CACnCI,UADmC,CAArC;AAGA,SAAOR,WAAW,CAACS,WAAD,EAAcF,QAAd,CAAlB;AACD,CAPH;;AASA,eAAe,SAASG,cAAT,GAA0B;AACvC,QAAMC,YAAY,GAAGR,eAAe,EAApC;AACA,QAAME,aAAuB,GAAGR,gBAAgB,CAACc,YAAD,CAAhD;AACA,QAAM;AAAEC,IAAAA,IAAI,EAAEL;AAAR,MAAqBT,cAAc,EAAzC;AACA,QAAMe,OAAO,GAAGd,UAAU,EAA1B;AAEA,QAAMe,WAAW,GACf,CAAC,CAACT,aAAF,IAAmBQ,OAAnB,IAA8BZ,MAAM,CAACY,OAAD,CAApC,IAAiDZ,MAAM,CAACY,OAAD,CAAN,CAAgBE,GADnE;AAEA,SAAOb,MAAM,CACXY,WAAW,GAAG,CAAC,aAAD,EAAgBP,QAAhB,EAA0BN,MAAM,CAACY,OAAD,CAAN,CAAgBE,GAA1C,CAAH,GAAoD,IADpD,EAEXX,cAAc,CAACC,aAAD,CAFH,CAAb;AAID","sourcesContent":["import useAssetContract from \"hooks/contracts/useAssetContract\";\nimport useDAIDecimals from \"hooks/useDAIDecimals\";\nimport useChainId from \"hooks/useChainId\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { TOKENS } from \"constants/variables\";\nimport useSWR from \"swr\";\nimport useReadProvider from \"hooks/useReadProvider\";\n\nconst getPoolBalance =\n  (assetContract: Contract) =>\n  async (_: any, decimals: BigNumber, daiAddress: String) => {\n    const poolBalance: BigNumber = await assetContract.getPoolBalance(\n      daiAddress\n    );\n    return formatUnits(poolBalance, decimals);\n  };\n\nexport default function usePoolBalance() {\n  const readProvider = useReadProvider();\n  const assetContract: Contract = useAssetContract(readProvider);\n  const { data: decimals } = useDAIDecimals();\n  const chainId = useChainId();\n\n  const shouldFetch =\n    !!assetContract && chainId && TOKENS[chainId] && TOKENS[chainId].DAI;\n  return useSWR(\n    shouldFetch ? [\"poolBalance\", decimals, TOKENS[chainId].DAI] : null,\n    getPoolBalance(assetContract)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}