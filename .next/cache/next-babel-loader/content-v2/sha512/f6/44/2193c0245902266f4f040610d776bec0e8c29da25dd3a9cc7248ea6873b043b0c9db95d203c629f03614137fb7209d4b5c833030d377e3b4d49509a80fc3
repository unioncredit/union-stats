{"ast":null,"code":"import { isAddress } from \"@ethersproject/address\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport U_TOKEN_ABI from \"constants/abis/uToken.json\";\nimport { BLOCKS_PER_YEAR, BLOCK_SPEED } from \"constants/variables\";\nimport useSWR from \"swr\";\nimport { formatDueDate } from \"util/formatDueDate\";\nimport useCurrentToken from \"../useCurrentToken\";\nimport useMarketRegistryContract from \"../contracts/useMarketRegistryContract\";\nimport { roundUp } from \"util/numbers\";\n\nconst getPaymentDue = async (account, chainId, contract, library) => {\n  const isOverdue = await contract.checkIsOverdue(account);\n\n  if (isOverdue) {\n    return \"Overdue\";\n  }\n\n  const lastRepayRes = await contract.getLastRepay(account);\n  const lastRepay = parseInt(lastRepayRes.toString());\n  const overdueBlocksRes = await contract.overdueBlocks();\n  const overdueBlocks = parseInt(overdueBlocksRes.toString());\n  const curBlock = await library.getBlockNumber();\n  const block = await library.getBlock(curBlock);\n  const resp = await library.provider.send(\"eth_getTransactionReceipt\", [block.transactions[0]]); // Supports ARBITRUM which returns L1 blockNumber as `l1BlockNumber`\n\n  const blockNumber = resp.result.l1BlockNumber || resp.result.blockNumber;\n\n  if (lastRepay === 0) {\n    return \"No Payment Due\";\n  }\n\n  const seconds = (lastRepay + overdueBlocks - blockNumber) * BLOCK_SPEED[chainId];\n  return formatDueDate(seconds);\n};\n\nconst getCreditLimit = contract => async (_, account, tokenAddress, chainId, library) => {\n  const res = await contract.tokens(tokenAddress);\n  const uTokenAddress = res.uToken;\n  const uTokenContract = new Contract(uTokenAddress, U_TOKEN_ABI, library.getSigner());\n  const apr = await uTokenContract.borrowRatePerBlock();\n  const borrowed = await uTokenContract.getBorrowed(account);\n  const fee = await uTokenContract.originationFee();\n  const interest = await uTokenContract.calculatingInterest(account);\n  const overdueBlocks = await uTokenContract.overdueBlocks();\n  const isOverdue = await uTokenContract.checkIsOverdue(account);\n  const paymentDueDate = await getPaymentDue(account, chainId, uTokenContract, library);\n  const paymentPeriod = formatDueDate(overdueBlocks.mul(BLOCK_SPEED[chainId]).toNumber());\n  return {\n    apr: Number(formatUnits(apr, 18)) * BLOCKS_PER_YEAR[chainId],\n    borrowedRounded: roundUp(Number(formatUnits(borrowed, 18)) + Number(formatUnits(interest, 18))),\n    borrowedRaw: Number(formatUnits(borrowed, 18)) + Number(formatUnits(interest, 18)),\n    fee: Number(formatUnits(fee, 18)),\n    interest: Number(formatUnits(interest, 18)),\n    paymentDueDate,\n    paymentPeriod,\n    isOverdue\n  };\n};\n\nexport default function useBorrowData(address) {\n  const {\n    account: connectedAccount,\n    library,\n    chainId\n  } = useWeb3React();\n  const curToken = useCurrentToken();\n  const account = address || connectedAccount;\n  const marketRegistryContract = useMarketRegistryContract();\n  const shouldFetch = !!marketRegistryContract && typeof account === \"string\" && typeof chainId === \"number\" && isAddress(curToken) && !!library;\n  return useSWR(shouldFetch ? [\"CreditLimit\", account, curToken, chainId, library] : null, getCreditLimit(marketRegistryContract));\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/data/useBorrowData.js"],"names":["isAddress","Contract","formatUnits","useWeb3React","U_TOKEN_ABI","BLOCKS_PER_YEAR","BLOCK_SPEED","useSWR","formatDueDate","useCurrentToken","useMarketRegistryContract","roundUp","getPaymentDue","account","chainId","contract","library","isOverdue","checkIsOverdue","lastRepayRes","getLastRepay","lastRepay","parseInt","toString","overdueBlocksRes","overdueBlocks","curBlock","getBlockNumber","block","getBlock","resp","provider","send","transactions","blockNumber","result","l1BlockNumber","seconds","getCreditLimit","_","tokenAddress","res","tokens","uTokenAddress","uToken","uTokenContract","getSigner","apr","borrowRatePerBlock","borrowed","getBorrowed","fee","originationFee","interest","calculatingInterest","paymentDueDate","paymentPeriod","mul","toNumber","Number","borrowedRounded","borrowedRaw","useBorrowData","address","connectedAccount","curToken","marketRegistryContract","shouldFetch"],"mappings":"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","sourcesContent":["import { isAddress } from \"@ethersproject/address\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport U_TOKEN_ABI from \"constants/abis/uToken.json\";\nimport { BLOCKS_PER_YEAR, BLOCK_SPEED } from \"constants/variables\";\nimport useSWR from \"swr\";\nimport { formatDueDate } from \"util/formatDueDate\";\nimport useCurrentToken from \"../useCurrentToken\";\nimport useMarketRegistryContract from \"../contracts/useMarketRegistryContract\";\nimport { roundUp } from \"util/numbers\";\n\nconst getPaymentDue = async (account, chainId, contract, library) => {\n  const isOverdue = await contract.checkIsOverdue(account);\n\n  if (isOverdue) {\n    return \"Overdue\";\n  }\n\n  const lastRepayRes = await contract.getLastRepay(account);\n  const lastRepay = parseInt(lastRepayRes.toString());\n\n  const overdueBlocksRes = await contract.overdueBlocks();\n  const overdueBlocks = parseInt(overdueBlocksRes.toString());\n\n  const curBlock = await library.getBlockNumber();\n  const block = await library.getBlock(curBlock);\n  const resp = await library.provider.send(\"eth_getTransactionReceipt\", [\n    block.transactions[0],\n  ]);\n\n  // Supports ARBITRUM which returns L1 blockNumber as `l1BlockNumber`\n  const blockNumber = resp.result.l1BlockNumber || resp.result.blockNumber;\n\n  if (lastRepay === 0) {\n    return \"No Payment Due\";\n  }\n\n  const seconds =\n    (lastRepay + overdueBlocks - blockNumber) * BLOCK_SPEED[chainId];\n\n  return formatDueDate(seconds);\n};\n\nconst getCreditLimit =\n  (contract) => async (_, account, tokenAddress, chainId, library) => {\n    const res = await contract.tokens(tokenAddress);\n    const uTokenAddress = res.uToken;\n\n    const uTokenContract = new Contract(\n      uTokenAddress,\n      U_TOKEN_ABI,\n      library.getSigner()\n    );\n\n    const apr = await uTokenContract.borrowRatePerBlock();\n\n    const borrowed = await uTokenContract.getBorrowed(account);\n\n    const fee = await uTokenContract.originationFee();\n\n    const interest = await uTokenContract.calculatingInterest(account);\n\n    const overdueBlocks = await uTokenContract.overdueBlocks();\n\n    const isOverdue = await uTokenContract.checkIsOverdue(account);\n\n    const paymentDueDate = await getPaymentDue(\n      account,\n      chainId,\n      uTokenContract,\n      library\n    );\n\n    const paymentPeriod = formatDueDate(\n      overdueBlocks.mul(BLOCK_SPEED[chainId]).toNumber()\n    );\n\n    return {\n      apr: Number(formatUnits(apr, 18)) * BLOCKS_PER_YEAR[chainId],\n      borrowedRounded: roundUp(\n        Number(formatUnits(borrowed, 18)) + Number(formatUnits(interest, 18))\n      ),\n      borrowedRaw:\n        Number(formatUnits(borrowed, 18)) + Number(formatUnits(interest, 18)),\n      fee: Number(formatUnits(fee, 18)),\n      interest: Number(formatUnits(interest, 18)),\n      paymentDueDate,\n      paymentPeriod,\n      isOverdue,\n    };\n  };\n\nexport default function useBorrowData(address) {\n  const { account: connectedAccount, library, chainId } = useWeb3React();\n  const curToken = useCurrentToken();\n\n  const account = address || connectedAccount;\n\n  const marketRegistryContract = useMarketRegistryContract();\n\n  const shouldFetch =\n    !!marketRegistryContract &&\n    typeof account === \"string\" &&\n    typeof chainId === \"number\" &&\n    isAddress(curToken) &&\n    !!library;\n\n  return useSWR(\n    shouldFetch ? [\"CreditLimit\", account, curToken, chainId, library] : null,\n    getCreditLimit(marketRegistryContract)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}