{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { isAddress } from \"@ethersproject/address\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport useSWR from \"swr\";\nimport { roundDown } from \"util/numbers\";\nimport parseRes from \"util/parseRes\";\nimport USER_MANAGER_ABI from \"constants/abis/userManager.json\";\nimport useMarketRegistryContract from \"../contracts/useMarketRegistryContract\";\nimport useCurrentToken from \"../useCurrentToken\";\n\nvar getStakeData = function getStakeData(marketRegistryContract) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_, account, tokenAddress, library) {\n      var signer, res, userManagerAddress, userManagerContract, totalStake, totalLocked, totalFrozen;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              signer = library.getSigner();\n              _context.next = 4;\n              return marketRegistryContract.tokens(tokenAddress);\n\n            case 4:\n              res = _context.sent;\n              userManagerAddress = res.userManager;\n              userManagerContract = new Contract(userManagerAddress, USER_MANAGER_ABI, signer);\n              _context.next = 9;\n              return userManagerContract.getStakerBalance(account);\n\n            case 9:\n              totalStake = _context.sent;\n              _context.next = 12;\n              return userManagerContract.getTotalLockedStake(account);\n\n            case 12:\n              totalLocked = _context.sent;\n              _context.next = 15;\n              return userManagerContract.getTotalFrozenAmount(account);\n\n            case 15:\n              totalFrozen = _context.sent;\n              return _context.abrupt(\"return\", {\n                totalStake: parseRes(totalStake),\n                utilizedStake: parseRes(totalLocked.sub(totalFrozen)),\n                withdrawableStake: roundDown(formatUnits(totalStake.sub(totalLocked), 18)),\n                defaultedStake: parseRes(totalFrozen)\n              });\n\n            case 19:\n              _context.prev = 19;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n              throw _context.t0;\n\n            case 23:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 19]]);\n    }));\n\n    return function (_x, _x2, _x3, _x4) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\nexport default function useStakeData() {\n  _s();\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      library = _useWeb3React.library;\n\n  var curToken = useCurrentToken();\n  var marketRegistryContract = useMarketRegistryContract();\n  var shouldFetch = !!marketRegistryContract && typeof account === \"string\" && isAddress(curToken);\n  return useSWR(shouldFetch ? [\"StakeData\", account, curToken, library] : null, getStakeData(marketRegistryContract));\n}\n\n_s(useStakeData, \"hu6Fu6jnlE0TSs8jitzdo5F8xhY=\", false, function () {\n  return [useWeb3React, useCurrentToken, useMarketRegistryContract, useSWR];\n});","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/data/useStakeData.ts"],"names":["isAddress","Contract","formatUnits","useWeb3React","useSWR","roundDown","parseRes","USER_MANAGER_ABI","useMarketRegistryContract","useCurrentToken","getStakeData","marketRegistryContract","_","account","tokenAddress","library","signer","getSigner","tokens","res","userManagerAddress","userManager","userManagerContract","getStakerBalance","totalStake","getTotalLockedStake","totalLocked","getTotalFrozenAmount","totalFrozen","utilizedStake","sub","withdrawableStake","defaultedStake","console","error","useStakeData","curToken","shouldFetch"],"mappings":";;;;;AAAA,SAASA,SAAT,QAA0B,wBAA1B;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,OAAOC,yBAAP,MAAsC,wCAAtC;AACA,OAAOC,eAAP,MAA4B,oBAA5B;;AAEA,IAAMC,YAAY,GAChB,SADIA,YACJ,CAACC,sBAAD;AAAA;AAAA,wEACA,iBAAOC,CAAP,EAAeC,OAAf,EAAgCC,YAAhC,EAAsDC,OAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEUC,cAAAA,MAFV,GAEmBD,OAAO,CAACE,SAAR,EAFnB;AAAA;AAAA,qBAGsBN,sBAAsB,CAACO,MAAvB,CAA8BJ,YAA9B,CAHtB;;AAAA;AAGUK,cAAAA,GAHV;AAIUC,cAAAA,kBAJV,GAI+BD,GAAG,CAACE,WAJnC;AAKUC,cAAAA,mBALV,GAKgC,IAAIrB,QAAJ,CAC1BmB,kBAD0B,EAE1Bb,gBAF0B,EAG1BS,MAH0B,CALhC;AAAA;AAAA,qBAW6BM,mBAAmB,CAACC,gBAApB,CAAqCV,OAArC,CAX7B;;AAAA;AAWUW,cAAAA,UAXV;AAAA;AAAA,qBAa8BF,mBAAmB,CAACG,mBAApB,CACxBZ,OADwB,CAb9B;;AAAA;AAaUa,cAAAA,WAbV;AAAA;AAAA,qBAiB8BJ,mBAAmB,CAACK,oBAApB,CACxBd,OADwB,CAjB9B;;AAAA;AAiBUe,cAAAA,WAjBV;AAAA,+CAqBW;AACLJ,gBAAAA,UAAU,EAAElB,QAAQ,CAACkB,UAAD,CADf;AAELK,gBAAAA,aAAa,EAAEvB,QAAQ,CAACoB,WAAW,CAACI,GAAZ,CAAgBF,WAAhB,CAAD,CAFlB;AAGLG,gBAAAA,iBAAiB,EAAE1B,SAAS,CAC1BH,WAAW,CAACsB,UAAU,CAACM,GAAX,CAAeJ,WAAf,CAAD,EAA8B,EAA9B,CADe,CAHvB;AAMLM,gBAAAA,cAAc,EAAE1B,QAAQ,CAACsB,WAAD;AANnB,eArBX;;AAAA;AAAA;AAAA;AA8BIK,cAAAA,OAAO,CAACC,KAAR;AA9BJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADA;;AAAA;AAAA;AAAA;AAAA;AAAA,CADF;;AAqCA,eAAe,SAASC,YAAT,GAAwB;AAAA;;AAAA,sBACRhC,YAAY,EADJ;AAAA,MAC7BU,OAD6B,iBAC7BA,OAD6B;AAAA,MACpBE,OADoB,iBACpBA,OADoB;;AAErC,MAAMqB,QAAQ,GAAG3B,eAAe,EAAhC;AACA,MAAME,sBAAsB,GAAGH,yBAAyB,EAAxD;AAEA,MAAM6B,WAAW,GACf,CAAC,CAAC1B,sBAAF,IACA,OAAOE,OAAP,KAAmB,QADnB,IAEAb,SAAS,CAACoC,QAAD,CAHX;AAKA,SAAOhC,MAAM,CACXiC,WAAW,GAAG,CAAC,WAAD,EAAcxB,OAAd,EAAuBuB,QAAvB,EAAiCrB,OAAjC,CAAH,GAA+C,IAD/C,EAEXL,YAAY,CAACC,sBAAD,CAFD,CAAb;AAID;;GAduBwB,Y;UACOhC,Y,EACZM,e,EACcD,yB,EAOxBJ,M","sourcesContent":["import { isAddress } from \"@ethersproject/address\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport useSWR from \"swr\";\nimport { roundDown } from \"util/numbers\";\nimport parseRes from \"util/parseRes\";\nimport USER_MANAGER_ABI from \"constants/abis/userManager.json\";\nimport useMarketRegistryContract from \"../contracts/useMarketRegistryContract\";\nimport useCurrentToken from \"../useCurrentToken\";\n\nconst getStakeData =\n  (marketRegistryContract: Contract) =>\n  async (_: any, account: string, tokenAddress: string, library) => {\n    try {\n      const signer = library.getSigner();\n      const res = await marketRegistryContract.tokens(tokenAddress);\n      const userManagerAddress = res.userManager;\n      const userManagerContract = new Contract(\n        userManagerAddress,\n        USER_MANAGER_ABI,\n        signer\n      );\n\n      const totalStake = await userManagerContract.getStakerBalance(account);\n\n      const totalLocked = await userManagerContract.getTotalLockedStake(\n        account\n      );\n\n      const totalFrozen = await userManagerContract.getTotalFrozenAmount(\n        account\n      );\n\n      return {\n        totalStake: parseRes(totalStake),\n        utilizedStake: parseRes(totalLocked.sub(totalFrozen)),\n        withdrawableStake: roundDown(\n          formatUnits(totalStake.sub(totalLocked), 18)\n        ),\n        defaultedStake: parseRes(totalFrozen),\n      };\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  };\n\nexport default function useStakeData() {\n  const { account, library } = useWeb3React();\n  const curToken = useCurrentToken();\n  const marketRegistryContract = useMarketRegistryContract();\n\n  const shouldFetch =\n    !!marketRegistryContract &&\n    typeof account === \"string\" &&\n    isAddress(curToken);\n\n  return useSWR(\n    shouldFetch ? [\"StakeData\", account, curToken, library] : null,\n    getStakeData(marketRegistryContract)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}