{"ast":null,"code":"import _toConsumableArray from \"/Users/mathewstokes/Desktop/stats-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useCallback } from \"react\";\nimport { newRidgeState } from \"react-ridge-state\";\nvar initialState = [];\nexport var toastState = newRidgeState(initialState);\nexport var FLAVORS = {\n  TX_PENDING: function TX_PENDING(hash, body) {\n    return {\n      body: body || \"Transaction is pending.\",\n      hash: hash,\n      type: \"pending\",\n      hideAfter: 0\n    };\n  },\n  TX_SUCCESS: function TX_SUCCESS(hash, body) {\n    return {\n      body: body || \"Transaction successful.\",\n      hash: hash,\n      type: \"success\",\n      hideAfter: 15\n    };\n  },\n  TX_ERROR: function TX_ERROR() {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Transaction failed\";\n    var hash = arguments.length > 1 ? arguments[1] : undefined;\n    return {\n      body: message,\n      hash: hash,\n      type: \"error\",\n      hideAfter: 15\n    };\n  },\n  LOGGED_OUT: {\n    body: \"You’ve succesfully logged out\",\n    type: \"success\",\n    hideAfter: 15\n  },\n  SUCCESS: function SUCCESS(message) {\n    return {\n      body: message,\n      type: \"success\",\n      hideAfter: 15\n    };\n  },\n  ERROR: function ERROR(message) {\n    return {\n      body: message,\n      type: \"error\",\n      hideAfter: 15\n    };\n  }\n};\nexport var removeToast = function removeToast(id) {\n  toastState.set(function (x) {\n    return x.filter(function (toast) {\n      return toast.id !== id;\n    });\n  });\n};\nexport var addToast = function addToast(toast) {\n  var _toastState$get$lengt;\n\n  var timer;\n  toast.id = (_toastState$get$lengt = toastState.get().length) !== null && _toastState$get$lengt !== void 0 ? _toastState$get$lengt : 0;\n  toastState.set(function (x) {\n    return [].concat(_toConsumableArray(x), [toast]);\n  });\n\n  var hide = function hide() {\n    clearTimeout(timer);\n    removeToast(toast.id);\n  };\n\n  if (!isNaN(toast.hideAfter) && toast.hideAfter > 0) {\n    timer = setTimeout(function () {\n      return removeToast(toast.id);\n    }, toast.hideAfter * 1000);\n  }\n\n  return {\n    hide: hide\n  };\n};\nexport default function useToast() {\n  _s();\n\n  return useCallback(addToast, []);\n}\n\n_s(useToast, \"epj4qY15NHsef74wNqHIp5fdZmg=\");","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/useToast.js"],"names":["useCallback","newRidgeState","initialState","toastState","FLAVORS","TX_PENDING","hash","body","type","hideAfter","TX_SUCCESS","TX_ERROR","message","LOGGED_OUT","SUCCESS","ERROR","removeToast","id","set","x","filter","toast","addToast","timer","get","length","hide","clearTimeout","isNaN","setTimeout","useToast"],"mappings":"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","sourcesContent":["import { useCallback } from \"react\";\nimport { newRidgeState } from \"react-ridge-state\";\n\nconst initialState = [];\n\nexport const toastState = newRidgeState(initialState);\n\nexport const FLAVORS = {\n  TX_PENDING: (hash, body) => ({\n    body: body || \"Transaction is pending.\",\n    hash,\n    type: \"pending\",\n    hideAfter: 0,\n  }),\n  TX_SUCCESS: (hash, body) => ({\n    body: body || \"Transaction successful.\",\n    hash,\n    type: \"success\",\n    hideAfter: 15,\n  }),\n  TX_ERROR: (message = \"Transaction failed\", hash) => ({\n    body: message,\n    hash,\n    type: \"error\",\n    hideAfter: 15,\n  }),\n  LOGGED_OUT: {\n    body: \"You’ve succesfully logged out\",\n    type: \"success\",\n    hideAfter: 15,\n  },\n  SUCCESS: (message) => ({\n    body: message,\n    type: \"success\",\n    hideAfter: 15,\n  }),\n  ERROR: (message) => ({\n    body: message,\n    type: \"error\",\n    hideAfter: 15,\n  }),\n};\n\nexport const removeToast = (id) => {\n  toastState.set((x) => x.filter((toast) => toast.id !== id));\n};\n\nexport const addToast = (toast) => {\n  let timer;\n\n  toast.id = toastState.get().length ?? 0;\n\n  toastState.set((x) => [...x, toast]);\n\n  const hide = () => {\n    clearTimeout(timer);\n    removeToast(toast.id);\n  };\n\n  if (!isNaN(toast.hideAfter) && toast.hideAfter > 0) {\n    timer = setTimeout(() => removeToast(toast.id), toast.hideAfter * 1000);\n  }\n\n  return { hide };\n};\n\nexport default function useToast() {\n  return useCallback(addToast, []);\n}\n"]},"metadata":{},"sourceType":"module"}