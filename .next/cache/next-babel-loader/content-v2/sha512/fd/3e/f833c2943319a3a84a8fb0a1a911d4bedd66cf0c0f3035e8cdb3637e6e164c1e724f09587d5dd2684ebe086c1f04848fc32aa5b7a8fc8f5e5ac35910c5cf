{"ast":null,"code":"import { isAddress } from \"@ethersproject/address\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport useSWR from \"swr\";\nimport useCurrentToken from \"../useCurrentToken\";\nimport USER_MANAGER_ABI from \"constants/abis/userManager.json\";\nimport useMarketRegistryContract from \"../contracts/useMarketRegistryContract\";\n\nconst getTrustCount = marketRegistryContract => async (_, account, library, tokenAddress) => {\n  let count = 0;\n  const signer = library.getSigner();\n  const res = await marketRegistryContract.tokens(tokenAddress);\n  const userManagerAddress = res.userManager;\n  const userManagerContract = new Contract(userManagerAddress, USER_MANAGER_ABI, signer);\n  const addresses = await userManagerContract.getStakerAddresses(account);\n  await Promise.all(addresses.map(async stakerAddress => {\n    const trustAmount = await userManagerContract.getVouchingAmount(stakerAddress, account);\n    const isMember = await userManagerContract.checkIsMember(stakerAddress);\n    if (trustAmount > 0 && isMember) count++;\n  }));\n  return count;\n};\n\nexport default function useTrustCountData() {\n  const {\n    account,\n    library\n  } = useWeb3React();\n  const marketRegistryContract = useMarketRegistryContract();\n  const curToken = useCurrentToken();\n  const shouldFetch = !!marketRegistryContract && typeof account === \"string\" && isAddress(curToken);\n  return useSWR(shouldFetch ? [\"TrustCount\", account, library, curToken] : null, getTrustCount(marketRegistryContract));\n}","map":{"version":3,"sources":["/Users/mathewstokes/Desktop/stats-app/hooks/data/useTrustCountData.ts"],"names":["isAddress","Contract","useWeb3React","useSWR","useCurrentToken","USER_MANAGER_ABI","useMarketRegistryContract","getTrustCount","marketRegistryContract","_","account","library","tokenAddress","count","signer","getSigner","res","tokens","userManagerAddress","userManager","userManagerContract","addresses","getStakerAddresses","Promise","all","map","stakerAddress","trustAmount","getVouchingAmount","isMember","checkIsMember","useTrustCountData","curToken","shouldFetch"],"mappings":"AAAA,SAASA,SAAT,QAA0B,wBAA1B;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,OAAOC,yBAAP,MAAsC,wCAAtC;;AAEA,MAAMC,aAAa,GAChBC,sBAAD,IACA,OAAOC,CAAP,EAAeC,OAAf,EAAgCC,OAAhC,EAA8CC,YAA9C,KAAuE;AACrE,MAAIC,KAAK,GAAG,CAAZ;AAEA,QAAMC,MAAM,GAAGH,OAAO,CAACI,SAAR,EAAf;AACA,QAAMC,GAAG,GAAG,MAAMR,sBAAsB,CAACS,MAAvB,CAA8BL,YAA9B,CAAlB;AACA,QAAMM,kBAAkB,GAAGF,GAAG,CAACG,WAA/B;AACA,QAAMC,mBAAmB,GAAG,IAAInB,QAAJ,CAC1BiB,kBAD0B,EAE1Bb,gBAF0B,EAG1BS,MAH0B,CAA5B;AAMA,QAAMO,SAAmB,GAAG,MAAMD,mBAAmB,CAACE,kBAApB,CAChCZ,OADgC,CAAlC;AAIA,QAAMa,OAAO,CAACC,GAAR,CACJH,SAAS,CAACI,GAAV,CAAc,MAAOC,aAAP,IAAyB;AACrC,UAAMC,WAAmB,GAAG,MAAMP,mBAAmB,CAACQ,iBAApB,CAChCF,aADgC,EAEhChB,OAFgC,CAAlC;AAKA,UAAMmB,QAAiB,GAAG,MAAMT,mBAAmB,CAACU,aAApB,CAC9BJ,aAD8B,CAAhC;AAIA,QAAIC,WAAW,GAAG,CAAd,IAAmBE,QAAvB,EAAiChB,KAAK;AACvC,GAXD,CADI,CAAN;AAeA,SAAOA,KAAP;AACD,CAlCH;;AAoCA,eAAe,SAASkB,iBAAT,GAA6B;AAC1C,QAAM;AAAErB,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBT,YAAY,EAAzC;AACA,QAAMM,sBAAsB,GAAGF,yBAAyB,EAAxD;AACA,QAAM0B,QAAQ,GAAG5B,eAAe,EAAhC;AAEA,QAAM6B,WAAW,GACf,CAAC,CAACzB,sBAAF,IACA,OAAOE,OAAP,KAAmB,QADnB,IAEAV,SAAS,CAACgC,QAAD,CAHX;AAKA,SAAO7B,MAAM,CACX8B,WAAW,GAAG,CAAC,YAAD,EAAevB,OAAf,EAAwBC,OAAxB,EAAiCqB,QAAjC,CAAH,GAAgD,IADhD,EAEXzB,aAAa,CAACC,sBAAD,CAFF,CAAb;AAID","sourcesContent":["import { isAddress } from \"@ethersproject/address\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport useSWR from \"swr\";\nimport useCurrentToken from \"../useCurrentToken\";\nimport USER_MANAGER_ABI from \"constants/abis/userManager.json\";\nimport useMarketRegistryContract from \"../contracts/useMarketRegistryContract\";\n\nconst getTrustCount =\n  (marketRegistryContract: Contract) =>\n  async (_: any, account: string, library: any, tokenAddress: string) => {\n    let count = 0;\n\n    const signer = library.getSigner();\n    const res = await marketRegistryContract.tokens(tokenAddress);\n    const userManagerAddress = res.userManager;\n    const userManagerContract = new Contract(\n      userManagerAddress,\n      USER_MANAGER_ABI,\n      signer\n    );\n\n    const addresses: string[] = await userManagerContract.getStakerAddresses(\n      account\n    );\n\n    await Promise.all(\n      addresses.map(async (stakerAddress) => {\n        const trustAmount: number = await userManagerContract.getVouchingAmount(\n          stakerAddress,\n          account\n        );\n\n        const isMember: boolean = await userManagerContract.checkIsMember(\n          stakerAddress\n        );\n\n        if (trustAmount > 0 && isMember) count++;\n      })\n    );\n\n    return count;\n  };\n\nexport default function useTrustCountData() {\n  const { account, library } = useWeb3React();\n  const marketRegistryContract = useMarketRegistryContract();\n  const curToken = useCurrentToken();\n\n  const shouldFetch =\n    !!marketRegistryContract &&\n    typeof account === \"string\" &&\n    isAddress(curToken);\n\n  return useSWR(\n    shouldFetch ? [\"TrustCount\", account, library, curToken] : null,\n    getTrustCount(marketRegistryContract)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}